0:S
1:whilesentence
2:list
3:while1
4:while_expression
5:function
6:function_define
7:function_type
8:function_define_list
9:function_call
10:function_call_list
11:type
12:block
13:sentence
14:E
15:T
16:F
17:id_name
18:nums
19:set_value
20:left
21:loop_expression
22:bool_expression
23:op
24:H
25:forsentence
26:for_set_value
27:IncorDec
28:Inc_expression
29:Dec_expression
30:if_expression
31:ifsentence
32:inout_expression
33:printf_expression
34:expressions
35:scanf_expression
36:getaddr
37:G
38:define
39:main
40:else
41:if
42:int
43:double
44:char
45:return
46:void
47:while
48:for
49:<=
50:>=
51:==
52:!=
53:/*
54:*/
55:<
56:>
57:=
58:+
59:-
60:*
61:/
62:%
63:;
64:,
65:(
66:)
67:[
68:]
69:{
70:}
71:num
72:id
73:string
74:&
75:++
76:--
77:printf
78:scanf
79:array
function->function_define 
function->function_define function 
index:25 function_define->function_type id ( ) { block } 
index:25 function_define->function_type id ( function_define_list ) { block } 
index:7 function_type->type 
index:7 function_type->void 
index:24 function_define_list->type id 
index:24 function_define_list->function_define_list , type id 
index:28 function_call->id ( ) 
index:28 function_call->id ( function_call_list ) 
index:27 function_call_list->list 
index:27 function_call_list->list , function_call_list 
index:4 list->E 
S->function 
index:7 type->int 
index:7 type->double 
index:7 type->char 
index:7 block->sentence 
block->sentence block 
index:12 sentence->{ block } 
index:11 sentence->{ } 
index:11 sentence->E ; 
index:6 E->E + T 
index:6 E->E - T 
index:7 E->T 
index:6 T->T * F 
index:6 T->T / F 
index:6 T->T % F 
index:7 T->F 
index:8 F->( E ) 
index:2 F->num 
index:2 F->string 
index:3 F->id 
index:3 F->array [ E ] 
index:5 F->function_call 
index:26 sentence->return E ; 
index:11 sentence->define 
index:10 define->type id_name = E ; 
index:1 define->type id_name ; 
index:7 id_name->id 
index:23 define->type array [ ] = { string } ; 
index:22 define->type array [ num ] = { nums } ; 
index:22 define->type array [ ] = { nums } ; 
index:22 define->type array [ num ] ; 
index:21 nums->num , nums 
index:7 nums->num 
index:11 sentence->set_value ; 
index:9 set_value->id = E 
index:9 set_value->array [ E ] = E 
index:11 sentence->loop_expression 
index:11 sentence->while_expression 
index:20 loop_expression->for ( for_set_value ; bool_expression ; IncorDec ) forsentence 
index:19 while_expression->while1 ( bool_expression ) whilesentence 
index:11 while1->while 
index:16 whilesentence->sentence 
index:13 bool_expression->G op H 
index:14 bool_expression->F 
index:7 op->>= 
index:7 op-><= 
index:7 op->< 
index:7 op->> 
index:7 op->== 
index:7 op->!= 
index:7 H->E 
index:7 G->E 
index:11 forsentence->sentence 
index:11 for_set_value->set_value 
index:11 sentence->IncorDec ; 
index:11 IncorDec->Inc_expression 
index:11 IncorDec->Dec_expression 
index:18 Inc_expression->id ++ 
index:18 Dec_expression->id -- 
index:11 sentence->if_expression 
index:15 if_expression->if ( bool_expression ) sentence 
index:17 if_expression->if ( bool_expression ) ifsentence else sentence 
index:16 ifsentence->sentence 
未知元素：i
index:11 sentence->inout_expression 
inout_expression->printf_expression 
inout_expression->scanf_expression 
index:31 printf_expression->printf ( string ) ; 
index:31 printf_expression->printf ( string , expressions ) ; 
expressions->getaddr , expressions 
expressions->getaddr 
index:32 scanf_expression->scanf ( string , expressions ) ; 
index:32 scanf_expression->scanf ( string ) ; 
index:29 getaddr->id 
index:29 getaddr->& id 
符号集：
0:1 #
1:2 function
2:2 function_define
3:2 function_type
4:1 id
5:1 (
6:1 )
7:1 {
8:2 block
9:1 }
10:2 function_define_list
11:2 type
12:1 void
13:1 ,
14:2 function_call
15:2 function_call_list
16:2 list
17:2 E
18:2 S
19:1 int
20:1 double
21:1 char
22:2 sentence
23:1 ;
24:1 +
25:2 T
26:1 -
27:1 *
28:2 F
29:1 /
30:1 %
31:1 num
32:1 string
33:1 array
34:1 [
35:1 ]
36:1 return
37:2 define
38:2 id_name
39:1 =
40:2 nums
41:2 set_value
42:2 loop_expression
43:2 while_expression
44:1 for
45:2 for_set_value
46:2 bool_expression
47:2 IncorDec
48:2 forsentence
49:2 while1
50:2 whilesentence
51:1 while
52:2 G
53:2 op
54:2 H
55:1 >=
56:1 <=
57:1 <
58:1 >
59:1 ==
60:1 !=
61:2 Inc_expression
62:2 Dec_expression
63:1 ++
64:1 --
65:2 if_expression
66:1 if
67:2 ifsentence
68:1 else
69:2 inout_expression
70:2 printf_expression
71:2 scanf_expression
72:1 printf
73:2 expressions
74:2 getaddr
75:1 scanf
76:1 &
77:2 S'
规则集:
function->function_define
function->function_definefunction
index:25 function_define->function_typeid(){block}
index:25 function_define->function_typeid(function_define_list){block}
index:7 function_type->type
index:7 function_type->void
index:24 function_define_list->typeid
index:24 function_define_list->function_define_list,typeid
index:28 function_call->id()
index:28 function_call->id(function_call_list)
index:27 function_call_list->list
index:27 function_call_list->list,function_call_list
index:4 list->E
S->function
index:7 type->int
index:7 type->double
index:7 type->char
index:7 block->sentence
block->sentenceblock
index:12 sentence->{block}
index:11 sentence->{}
index:11 sentence->E;
index:6 E->E+T
index:6 E->E-T
index:7 E->T
index:6 T->T*F
index:6 T->T/F
index:6 T->T%F
index:7 T->F
index:8 F->(E)
index:2 F->num
index:2 F->string
index:3 F->id
index:3 F->array[E]
index:5 F->function_call
index:26 sentence->returnE;
index:11 sentence->define
index:10 define->typeid_name=E;
index:1 define->typeid_name;
index:7 id_name->id
index:23 define->typearray[]={string};
index:22 define->typearray[num]={nums};
index:22 define->typearray[]={nums};
index:22 define->typearray[num];
index:21 nums->num,nums
index:7 nums->num
index:11 sentence->set_value;
index:9 set_value->id=E
index:9 set_value->array[E]=E
index:11 sentence->loop_expression
index:11 sentence->while_expression
index:20 loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence
index:19 while_expression->while1(bool_expression)whilesentence
index:11 while1->while
index:16 whilesentence->sentence
index:13 bool_expression->GopH
index:14 bool_expression->F
index:7 op->>=
index:7 op-><=
index:7 op-><
index:7 op->>
index:7 op->==
index:7 op->!=
index:7 H->E
index:7 G->E
index:11 forsentence->sentence
index:11 for_set_value->set_value
index:11 sentence->IncorDec;
index:11 IncorDec->Inc_expression
index:11 IncorDec->Dec_expression
index:18 Inc_expression->id++
index:18 Dec_expression->id--
index:11 sentence->if_expression
index:15 if_expression->if(bool_expression)sentence
index:17 if_expression->if(bool_expression)ifsentenceelsesentence
index:16 ifsentence->sentence
index:11 sentence->inout_expression
inout_expression->printf_expression
inout_expression->scanf_expression
index:31 printf_expression->printf(string);
index:31 printf_expression->printf(string,expressions);
expressions->getaddr,expressions
expressions->getaddr
index:32 scanf_expression->scanf(string,expressions);
index:32 scanf_expression->scanf(string);
index:29 getaddr->id
index:29 getaddr->&id
S'->S
项目集0:
S'->.S,#
type->.char,id
type->.double,id
type->.int,id
S->.function,#
function_type->.void,id
function_type->.type,id
function_define->.function_typeid(function_define_list){block},char
function_define->.function_typeid(function_define_list){block},double
function_define->.function_typeid(function_define_list){block},int
function_define->.function_typeid(function_define_list){block},void
function_define->.function_typeid(function_define_list){block},#
function_define->.function_typeid(){block},char
function_define->.function_typeid(){block},double
function_define->.function_typeid(){block},int
function_define->.function_typeid(){block},void
function_define->.function_typeid(){block},#
function->.function_definefunction,#
function->.function_define,#
项目集1:
S->function,#
项目集2:
type->.char,id
type->.double,id
type->.int,id
function_type->.void,id
function_type->.type,id
function_define->.function_typeid(function_define_list){block},char
function_define->.function_typeid(function_define_list){block},double
function_define->.function_typeid(function_define_list){block},int
function_define->.function_typeid(function_define_list){block},void
function_define->.function_typeid(function_define_list){block},#
function_define->.function_typeid(){block},char
function_define->.function_typeid(){block},double
function_define->.function_typeid(){block},int
function_define->.function_typeid(){block},void
function_define->.function_typeid(){block},#
function->function_define.function,#
function->.function_definefunction,#
function->function_define,#
function->.function_define,#
项目集3:
function_define->function_type.id(function_define_list){block},char
function_define->function_type.id(function_define_list){block},double
function_define->function_type.id(function_define_list){block},int
function_define->function_type.id(function_define_list){block},void
function_define->function_type.id(function_define_list){block},#
function_define->function_type.id(){block},char
function_define->function_type.id(){block},double
function_define->function_type.id(){block},int
function_define->function_type.id(){block},void
function_define->function_type.id(){block},#
项目集4:
function_type->type,id
项目集5:
function_type->void,id
项目集6:
S'->S,#
项目集7:
type->int,id
项目集8:
type->double,id
项目集9:
type->char,id
项目集10:
function->function_definefunction,#
项目集11:
function_define->function_typeid.(function_define_list){block},char
function_define->function_typeid.(function_define_list){block},double
function_define->function_typeid.(function_define_list){block},int
function_define->function_typeid.(function_define_list){block},void
function_define->function_typeid.(function_define_list){block},#
function_define->function_typeid.(){block},char
function_define->function_typeid.(){block},double
function_define->function_typeid.(){block},int
function_define->function_typeid.(){block},void
function_define->function_typeid.(){block},#
项目集12:
type->.char,id
type->.double,id
type->.int,id
function_define_list->.function_define_list,typeid,,
function_define_list->.function_define_list,typeid,)
function_define_list->.typeid,,
function_define_list->.typeid,)
function_define->function_typeid(.function_define_list){block},char
function_define->function_typeid(.function_define_list){block},double
function_define->function_typeid(.function_define_list){block},int
function_define->function_typeid(.function_define_list){block},void
function_define->function_typeid(.function_define_list){block},#
function_define->function_typeid(.){block},char
function_define->function_typeid(.){block},double
function_define->function_typeid(.){block},int
function_define->function_typeid(.){block},void
function_define->function_typeid(.){block},#
项目集13:
function_define->function_typeid().{block},char
function_define->function_typeid().{block},double
function_define->function_typeid().{block},int
function_define->function_typeid().{block},void
function_define->function_typeid().{block},#
项目集14:
function_define_list->function_define_list.,typeid,,
function_define_list->function_define_list.,typeid,)
function_define->function_typeid(function_define_list.){block},char
function_define->function_typeid(function_define_list.){block},double
function_define->function_typeid(function_define_list.){block},int
function_define->function_typeid(function_define_list.){block},void
function_define->function_typeid(function_define_list.){block},#
项目集15:
function_define_list->type.id,,
function_define_list->type.id,)
项目集16:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
function_define->function_typeid(){.block},char
function_define->function_typeid(){.block},double
function_define->function_typeid(){.block},int
function_define->function_typeid(){.block},void
function_define->function_typeid(){.block},#
项目集17:
function_define->function_typeid(function_define_list).{block},char
function_define->function_typeid(function_define_list).{block},double
function_define->function_typeid(function_define_list).{block},int
function_define->function_typeid(function_define_list).{block},void
function_define->function_typeid(function_define_list).{block},#
项目集18:
type->.char,id
type->.double,id
type->.int,id
function_define_list->function_define_list,.typeid,,
function_define_list->function_define_list,.typeid,)
项目集19:
function_define_list->typeid,,
function_define_list->typeid,)
项目集20:
Dec_expression->id.--,;
Inc_expression->id.++,;
set_value->id.=E,;
F->id,%
F->id,/
F->id,*
F->id,-
F->id,+
F->id,;
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目集21:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集22:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->{.},scanf
sentence->{.},printf
sentence->{.},if
sentence->{.},while
sentence->{.},for
sentence->{.},return
sentence->{.},array
sentence->{.},string
sentence->{.},num
sentence->{.},%
sentence->{.},/
sentence->{.},*
sentence->{.},-
sentence->{.},+
sentence->{.},char
sentence->{.},double
sentence->{.},int
sentence->{.},}
sentence->{.},{
sentence->{.},(
sentence->{.},id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->{.block},scanf
sentence->{.block},printf
sentence->{.block},if
sentence->{.block},while
sentence->{.block},for
sentence->{.block},return
sentence->{.block},array
sentence->{.block},string
sentence->{.block},num
sentence->{.block},%
sentence->{.block},/
sentence->{.block},*
sentence->{.block},-
sentence->{.block},+
sentence->{.block},char
sentence->{.block},double
sentence->{.block},int
sentence->{.block},}
sentence->{.block},{
sentence->{.block},(
sentence->{.block},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集23:
function_define->function_typeid(){block.},char
function_define->function_typeid(){block.},double
function_define->function_typeid(){block.},int
function_define->function_typeid(){block.},void
function_define->function_typeid(){block.},#
项目集24:
define->type.array[num];,scanf
define->type.array[num];,printf
define->type.array[num];,if
define->type.array[num];,while
define->type.array[num];,for
define->type.array[num];,return
define->type.array[num];,array
define->type.array[num];,string
define->type.array[num];,num
define->type.array[num];,%
define->type.array[num];,/
define->type.array[num];,*
define->type.array[num];,-
define->type.array[num];,+
define->type.array[num];,char
define->type.array[num];,double
define->type.array[num];,int
define->type.array[num];,}
define->type.array[num];,{
define->type.array[num];,(
define->type.array[num];,id
define->type.array[]={nums};,scanf
define->type.array[]={nums};,printf
define->type.array[]={nums};,if
define->type.array[]={nums};,while
define->type.array[]={nums};,for
define->type.array[]={nums};,return
define->type.array[]={nums};,array
define->type.array[]={nums};,string
define->type.array[]={nums};,num
define->type.array[]={nums};,%
define->type.array[]={nums};,/
define->type.array[]={nums};,*
define->type.array[]={nums};,-
define->type.array[]={nums};,+
define->type.array[]={nums};,char
define->type.array[]={nums};,double
define->type.array[]={nums};,int
define->type.array[]={nums};,}
define->type.array[]={nums};,{
define->type.array[]={nums};,(
define->type.array[]={nums};,id
define->type.array[num]={nums};,scanf
define->type.array[num]={nums};,printf
define->type.array[num]={nums};,if
define->type.array[num]={nums};,while
define->type.array[num]={nums};,for
define->type.array[num]={nums};,return
define->type.array[num]={nums};,array
define->type.array[num]={nums};,string
define->type.array[num]={nums};,num
define->type.array[num]={nums};,%
define->type.array[num]={nums};,/
define->type.array[num]={nums};,*
define->type.array[num]={nums};,-
define->type.array[num]={nums};,+
define->type.array[num]={nums};,char
define->type.array[num]={nums};,double
define->type.array[num]={nums};,int
define->type.array[num]={nums};,}
define->type.array[num]={nums};,{
define->type.array[num]={nums};,(
define->type.array[num]={nums};,id
define->type.array[]={string};,scanf
define->type.array[]={string};,printf
define->type.array[]={string};,if
define->type.array[]={string};,while
define->type.array[]={string};,for
define->type.array[]={string};,return
define->type.array[]={string};,array
define->type.array[]={string};,string
define->type.array[]={string};,num
define->type.array[]={string};,%
define->type.array[]={string};,/
define->type.array[]={string};,*
define->type.array[]={string};,-
define->type.array[]={string};,+
define->type.array[]={string};,char
define->type.array[]={string};,double
define->type.array[]={string};,int
define->type.array[]={string};,}
define->type.array[]={string};,{
define->type.array[]={string};,(
define->type.array[]={string};,id
id_name->.id,=
id_name->.id,;
define->type.id_name;,scanf
define->type.id_name;,printf
define->type.id_name;,if
define->type.id_name;,while
define->type.id_name;,for
define->type.id_name;,return
define->type.id_name;,array
define->type.id_name;,string
define->type.id_name;,num
define->type.id_name;,%
define->type.id_name;,/
define->type.id_name;,*
define->type.id_name;,-
define->type.id_name;,+
define->type.id_name;,char
define->type.id_name;,double
define->type.id_name;,int
define->type.id_name;,}
define->type.id_name;,{
define->type.id_name;,(
define->type.id_name;,id
define->type.id_name=E;,scanf
define->type.id_name=E;,printf
define->type.id_name=E;,if
define->type.id_name=E;,while
define->type.id_name=E;,for
define->type.id_name=E;,return
define->type.id_name=E;,array
define->type.id_name=E;,string
define->type.id_name=E;,num
define->type.id_name=E;,%
define->type.id_name=E;,/
define->type.id_name=E;,*
define->type.id_name=E;,-
define->type.id_name=E;,+
define->type.id_name=E;,char
define->type.id_name=E;,double
define->type.id_name=E;,int
define->type.id_name=E;,}
define->type.id_name=E;,{
define->type.id_name=E;,(
define->type.id_name=E;,id
项目集25:
F->function_call,%
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
F->function_call,;
项目集26:
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
sentence->E.;,scanf
sentence->E.;,printf
sentence->E.;,if
sentence->E.;,while
sentence->E.;,for
sentence->E.;,return
sentence->E.;,array
sentence->E.;,string
sentence->E.;,num
sentence->E.;,%
sentence->E.;,/
sentence->E.;,*
sentence->E.;,-
sentence->E.;,+
sentence->E.;,char
sentence->E.;,double
sentence->E.;,int
sentence->E.;,}
sentence->E.;,{
sentence->E.;,(
sentence->E.;,id
项目集27:
type->int,array
type->int,id
项目集28:
type->double,array
type->double,id
项目集29:
type->char,array
type->char,id
项目集30:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->sentence.block,}
block->.sentenceblock,}
block->sentence,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集31:
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,;
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->T,-
E->T,+
E->T,;
项目集32:
T->F,%
T->F,/
T->F,*
T->F,-
T->F,+
T->F,;
项目集33:
F->num,%
F->num,/
F->num,*
F->num,-
F->num,+
F->num,;
项目集34:
F->string,%
F->string,/
F->string,*
F->string,-
F->string,+
F->string,;
项目集35:
set_value->array.[E]=E,;
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目集36:
sentence->return.E;,scanf
sentence->return.E;,printf
sentence->return.E;,if
sentence->return.E;,while
sentence->return.E;,for
sentence->return.E;,return
sentence->return.E;,array
sentence->return.E;,string
sentence->return.E;,num
sentence->return.E;,%
sentence->return.E;,/
sentence->return.E;,*
sentence->return.E;,-
sentence->return.E;,+
sentence->return.E;,char
sentence->return.E;,double
sentence->return.E;,int
sentence->return.E;,}
sentence->return.E;,{
sentence->return.E;,(
sentence->return.E;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集37:
sentence->define,scanf
sentence->define,printf
sentence->define,if
sentence->define,while
sentence->define,for
sentence->define,return
sentence->define,array
sentence->define,string
sentence->define,num
sentence->define,%
sentence->define,/
sentence->define,*
sentence->define,-
sentence->define,+
sentence->define,char
sentence->define,double
sentence->define,int
sentence->define,}
sentence->define,{
sentence->define,(
sentence->define,id
项目集38:
sentence->set_value.;,scanf
sentence->set_value.;,printf
sentence->set_value.;,if
sentence->set_value.;,while
sentence->set_value.;,for
sentence->set_value.;,return
sentence->set_value.;,array
sentence->set_value.;,string
sentence->set_value.;,num
sentence->set_value.;,%
sentence->set_value.;,/
sentence->set_value.;,*
sentence->set_value.;,-
sentence->set_value.;,+
sentence->set_value.;,char
sentence->set_value.;,double
sentence->set_value.;,int
sentence->set_value.;,}
sentence->set_value.;,{
sentence->set_value.;,(
sentence->set_value.;,id
项目集39:
sentence->loop_expression,scanf
sentence->loop_expression,printf
sentence->loop_expression,if
sentence->loop_expression,while
sentence->loop_expression,for
sentence->loop_expression,return
sentence->loop_expression,array
sentence->loop_expression,string
sentence->loop_expression,num
sentence->loop_expression,%
sentence->loop_expression,/
sentence->loop_expression,*
sentence->loop_expression,-
sentence->loop_expression,+
sentence->loop_expression,char
sentence->loop_expression,double
sentence->loop_expression,int
sentence->loop_expression,}
sentence->loop_expression,{
sentence->loop_expression,(
sentence->loop_expression,id
项目集40:
sentence->while_expression,scanf
sentence->while_expression,printf
sentence->while_expression,if
sentence->while_expression,while
sentence->while_expression,for
sentence->while_expression,return
sentence->while_expression,array
sentence->while_expression,string
sentence->while_expression,num
sentence->while_expression,%
sentence->while_expression,/
sentence->while_expression,*
sentence->while_expression,-
sentence->while_expression,+
sentence->while_expression,char
sentence->while_expression,double
sentence->while_expression,int
sentence->while_expression,}
sentence->while_expression,{
sentence->while_expression,(
sentence->while_expression,id
项目集41:
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,id
项目集42:
sentence->IncorDec.;,scanf
sentence->IncorDec.;,printf
sentence->IncorDec.;,if
sentence->IncorDec.;,while
sentence->IncorDec.;,for
sentence->IncorDec.;,return
sentence->IncorDec.;,array
sentence->IncorDec.;,string
sentence->IncorDec.;,num
sentence->IncorDec.;,%
sentence->IncorDec.;,/
sentence->IncorDec.;,*
sentence->IncorDec.;,-
sentence->IncorDec.;,+
sentence->IncorDec.;,char
sentence->IncorDec.;,double
sentence->IncorDec.;,int
sentence->IncorDec.;,}
sentence->IncorDec.;,{
sentence->IncorDec.;,(
sentence->IncorDec.;,id
项目集43:
while_expression->while1.(bool_expression)whilesentence,scanf
while_expression->while1.(bool_expression)whilesentence,printf
while_expression->while1.(bool_expression)whilesentence,if
while_expression->while1.(bool_expression)whilesentence,while
while_expression->while1.(bool_expression)whilesentence,for
while_expression->while1.(bool_expression)whilesentence,return
while_expression->while1.(bool_expression)whilesentence,array
while_expression->while1.(bool_expression)whilesentence,string
while_expression->while1.(bool_expression)whilesentence,num
while_expression->while1.(bool_expression)whilesentence,%
while_expression->while1.(bool_expression)whilesentence,/
while_expression->while1.(bool_expression)whilesentence,*
while_expression->while1.(bool_expression)whilesentence,-
while_expression->while1.(bool_expression)whilesentence,+
while_expression->while1.(bool_expression)whilesentence,char
while_expression->while1.(bool_expression)whilesentence,double
while_expression->while1.(bool_expression)whilesentence,int
while_expression->while1.(bool_expression)whilesentence,}
while_expression->while1.(bool_expression)whilesentence,{
while_expression->while1.(bool_expression)whilesentence,(
while_expression->while1.(bool_expression)whilesentence,id
项目集44:
while1->while,(
项目集45:
IncorDec->Inc_expression,;
项目集46:
IncorDec->Dec_expression,;
项目集47:
sentence->if_expression,scanf
sentence->if_expression,printf
sentence->if_expression,if
sentence->if_expression,while
sentence->if_expression,for
sentence->if_expression,return
sentence->if_expression,array
sentence->if_expression,string
sentence->if_expression,num
sentence->if_expression,%
sentence->if_expression,/
sentence->if_expression,*
sentence->if_expression,-
sentence->if_expression,+
sentence->if_expression,char
sentence->if_expression,double
sentence->if_expression,int
sentence->if_expression,}
sentence->if_expression,{
sentence->if_expression,(
sentence->if_expression,id
项目集48:
if_expression->if.(bool_expression)ifsentenceelsesentence,scanf
if_expression->if.(bool_expression)ifsentenceelsesentence,printf
if_expression->if.(bool_expression)ifsentenceelsesentence,if
if_expression->if.(bool_expression)ifsentenceelsesentence,while
if_expression->if.(bool_expression)ifsentenceelsesentence,for
if_expression->if.(bool_expression)ifsentenceelsesentence,return
if_expression->if.(bool_expression)ifsentenceelsesentence,array
if_expression->if.(bool_expression)ifsentenceelsesentence,string
if_expression->if.(bool_expression)ifsentenceelsesentence,num
if_expression->if.(bool_expression)ifsentenceelsesentence,%
if_expression->if.(bool_expression)ifsentenceelsesentence,/
if_expression->if.(bool_expression)ifsentenceelsesentence,*
if_expression->if.(bool_expression)ifsentenceelsesentence,-
if_expression->if.(bool_expression)ifsentenceelsesentence,+
if_expression->if.(bool_expression)ifsentenceelsesentence,char
if_expression->if.(bool_expression)ifsentenceelsesentence,double
if_expression->if.(bool_expression)ifsentenceelsesentence,int
if_expression->if.(bool_expression)ifsentenceelsesentence,}
if_expression->if.(bool_expression)ifsentenceelsesentence,{
if_expression->if.(bool_expression)ifsentenceelsesentence,(
if_expression->if.(bool_expression)ifsentenceelsesentence,id
if_expression->if.(bool_expression)sentence,scanf
if_expression->if.(bool_expression)sentence,printf
if_expression->if.(bool_expression)sentence,if
if_expression->if.(bool_expression)sentence,while
if_expression->if.(bool_expression)sentence,for
if_expression->if.(bool_expression)sentence,return
if_expression->if.(bool_expression)sentence,array
if_expression->if.(bool_expression)sentence,string
if_expression->if.(bool_expression)sentence,num
if_expression->if.(bool_expression)sentence,%
if_expression->if.(bool_expression)sentence,/
if_expression->if.(bool_expression)sentence,*
if_expression->if.(bool_expression)sentence,-
if_expression->if.(bool_expression)sentence,+
if_expression->if.(bool_expression)sentence,char
if_expression->if.(bool_expression)sentence,double
if_expression->if.(bool_expression)sentence,int
if_expression->if.(bool_expression)sentence,}
if_expression->if.(bool_expression)sentence,{
if_expression->if.(bool_expression)sentence,(
if_expression->if.(bool_expression)sentence,id
项目集49:
sentence->inout_expression,scanf
sentence->inout_expression,printf
sentence->inout_expression,if
sentence->inout_expression,while
sentence->inout_expression,for
sentence->inout_expression,return
sentence->inout_expression,array
sentence->inout_expression,string
sentence->inout_expression,num
sentence->inout_expression,%
sentence->inout_expression,/
sentence->inout_expression,*
sentence->inout_expression,-
sentence->inout_expression,+
sentence->inout_expression,char
sentence->inout_expression,double
sentence->inout_expression,int
sentence->inout_expression,}
sentence->inout_expression,{
sentence->inout_expression,(
sentence->inout_expression,id
项目集50:
inout_expression->printf_expression,scanf
inout_expression->printf_expression,printf
inout_expression->printf_expression,if
inout_expression->printf_expression,while
inout_expression->printf_expression,for
inout_expression->printf_expression,return
inout_expression->printf_expression,array
inout_expression->printf_expression,string
inout_expression->printf_expression,num
inout_expression->printf_expression,%
inout_expression->printf_expression,/
inout_expression->printf_expression,*
inout_expression->printf_expression,-
inout_expression->printf_expression,+
inout_expression->printf_expression,char
inout_expression->printf_expression,double
inout_expression->printf_expression,int
inout_expression->printf_expression,}
inout_expression->printf_expression,{
inout_expression->printf_expression,(
inout_expression->printf_expression,id
项目集51:
inout_expression->scanf_expression,scanf
inout_expression->scanf_expression,printf
inout_expression->scanf_expression,if
inout_expression->scanf_expression,while
inout_expression->scanf_expression,for
inout_expression->scanf_expression,return
inout_expression->scanf_expression,array
inout_expression->scanf_expression,string
inout_expression->scanf_expression,num
inout_expression->scanf_expression,%
inout_expression->scanf_expression,/
inout_expression->scanf_expression,*
inout_expression->scanf_expression,-
inout_expression->scanf_expression,+
inout_expression->scanf_expression,char
inout_expression->scanf_expression,double
inout_expression->scanf_expression,int
inout_expression->scanf_expression,}
inout_expression->scanf_expression,{
inout_expression->scanf_expression,(
inout_expression->scanf_expression,id
项目集52:
printf_expression->printf.(string,expressions);,scanf
printf_expression->printf.(string,expressions);,printf
printf_expression->printf.(string,expressions);,if
printf_expression->printf.(string,expressions);,while
printf_expression->printf.(string,expressions);,for
printf_expression->printf.(string,expressions);,return
printf_expression->printf.(string,expressions);,array
printf_expression->printf.(string,expressions);,string
printf_expression->printf.(string,expressions);,num
printf_expression->printf.(string,expressions);,%
printf_expression->printf.(string,expressions);,/
printf_expression->printf.(string,expressions);,*
printf_expression->printf.(string,expressions);,-
printf_expression->printf.(string,expressions);,+
printf_expression->printf.(string,expressions);,char
printf_expression->printf.(string,expressions);,double
printf_expression->printf.(string,expressions);,int
printf_expression->printf.(string,expressions);,}
printf_expression->printf.(string,expressions);,{
printf_expression->printf.(string,expressions);,(
printf_expression->printf.(string,expressions);,id
printf_expression->printf.(string);,scanf
printf_expression->printf.(string);,printf
printf_expression->printf.(string);,if
printf_expression->printf.(string);,while
printf_expression->printf.(string);,for
printf_expression->printf.(string);,return
printf_expression->printf.(string);,array
printf_expression->printf.(string);,string
printf_expression->printf.(string);,num
printf_expression->printf.(string);,%
printf_expression->printf.(string);,/
printf_expression->printf.(string);,*
printf_expression->printf.(string);,-
printf_expression->printf.(string);,+
printf_expression->printf.(string);,char
printf_expression->printf.(string);,double
printf_expression->printf.(string);,int
printf_expression->printf.(string);,}
printf_expression->printf.(string);,{
printf_expression->printf.(string);,(
printf_expression->printf.(string);,id
项目集53:
scanf_expression->scanf.(string);,scanf
scanf_expression->scanf.(string);,printf
scanf_expression->scanf.(string);,if
scanf_expression->scanf.(string);,while
scanf_expression->scanf.(string);,for
scanf_expression->scanf.(string);,return
scanf_expression->scanf.(string);,array
scanf_expression->scanf.(string);,string
scanf_expression->scanf.(string);,num
scanf_expression->scanf.(string);,%
scanf_expression->scanf.(string);,/
scanf_expression->scanf.(string);,*
scanf_expression->scanf.(string);,-
scanf_expression->scanf.(string);,+
scanf_expression->scanf.(string);,char
scanf_expression->scanf.(string);,double
scanf_expression->scanf.(string);,int
scanf_expression->scanf.(string);,}
scanf_expression->scanf.(string);,{
scanf_expression->scanf.(string);,(
scanf_expression->scanf.(string);,id
scanf_expression->scanf.(string,expressions);,scanf
scanf_expression->scanf.(string,expressions);,printf
scanf_expression->scanf.(string,expressions);,if
scanf_expression->scanf.(string,expressions);,while
scanf_expression->scanf.(string,expressions);,for
scanf_expression->scanf.(string,expressions);,return
scanf_expression->scanf.(string,expressions);,array
scanf_expression->scanf.(string,expressions);,string
scanf_expression->scanf.(string,expressions);,num
scanf_expression->scanf.(string,expressions);,%
scanf_expression->scanf.(string,expressions);,/
scanf_expression->scanf.(string,expressions);,*
scanf_expression->scanf.(string,expressions);,-
scanf_expression->scanf.(string,expressions);,+
scanf_expression->scanf.(string,expressions);,char
scanf_expression->scanf.(string,expressions);,double
scanf_expression->scanf.(string,expressions);,int
scanf_expression->scanf.(string,expressions);,}
scanf_expression->scanf.(string,expressions);,{
scanf_expression->scanf.(string,expressions);,(
scanf_expression->scanf.(string,expressions);,id
项目集54:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
function_define->function_typeid(function_define_list){.block},char
function_define->function_typeid(function_define_list){.block},double
function_define->function_typeid(function_define_list){.block},int
function_define->function_typeid(function_define_list){.block},void
function_define->function_typeid(function_define_list){.block},#
项目集55:
function_define_list->function_define_list,type.id,,
function_define_list->function_define_list,type.id,)
项目集56:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集57:
set_value->id=.E,;
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集58:
Inc_expression->id++,;
项目集59:
Dec_expression->id--,;
项目集60:
F->id,%
F->id,/
F->id,*
F->id,-
F->id,+
F->id,)
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),)
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),)
项目集61:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集62:
F->function_call,%
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
F->function_call,)
项目集63:
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),;
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集64:
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,)
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->T,-
E->T,+
E->T,)
项目集65:
T->F,%
T->F,/
T->F,*
T->F,-
T->F,+
T->F,)
项目集66:
F->num,%
F->num,/
F->num,*
F->num,-
F->num,+
F->num,)
项目集67:
F->string,%
F->string,/
F->string,*
F->string,-
F->string,+
F->string,)
项目集68:
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],)
项目集69:
sentence->{block.},scanf
sentence->{block.},printf
sentence->{block.},if
sentence->{block.},while
sentence->{block.},for
sentence->{block.},return
sentence->{block.},array
sentence->{block.},string
sentence->{block.},num
sentence->{block.},%
sentence->{block.},/
sentence->{block.},*
sentence->{block.},-
sentence->{block.},+
sentence->{block.},char
sentence->{block.},double
sentence->{block.},int
sentence->{block.},}
sentence->{block.},{
sentence->{block.},(
sentence->{block.},id
项目集70:
sentence->{},scanf
sentence->{},printf
sentence->{},if
sentence->{},while
sentence->{},for
sentence->{},return
sentence->{},array
sentence->{},string
sentence->{},num
sentence->{},%
sentence->{},/
sentence->{},*
sentence->{},-
sentence->{},+
sentence->{},char
sentence->{},double
sentence->{},int
sentence->{},}
sentence->{},{
sentence->{},(
sentence->{},id
项目集71:
function_define->function_typeid(){block},char
function_define->function_typeid(){block},double
function_define->function_typeid(){block},int
function_define->function_typeid(){block},void
function_define->function_typeid(){block},#
项目集72:
id_name->id,=
id_name->id,;
项目集73:
define->typearray.[num];,scanf
define->typearray.[num];,printf
define->typearray.[num];,if
define->typearray.[num];,while
define->typearray.[num];,for
define->typearray.[num];,return
define->typearray.[num];,array
define->typearray.[num];,string
define->typearray.[num];,num
define->typearray.[num];,%
define->typearray.[num];,/
define->typearray.[num];,*
define->typearray.[num];,-
define->typearray.[num];,+
define->typearray.[num];,char
define->typearray.[num];,double
define->typearray.[num];,int
define->typearray.[num];,}
define->typearray.[num];,{
define->typearray.[num];,(
define->typearray.[num];,id
define->typearray.[]={nums};,scanf
define->typearray.[]={nums};,printf
define->typearray.[]={nums};,if
define->typearray.[]={nums};,while
define->typearray.[]={nums};,for
define->typearray.[]={nums};,return
define->typearray.[]={nums};,array
define->typearray.[]={nums};,string
define->typearray.[]={nums};,num
define->typearray.[]={nums};,%
define->typearray.[]={nums};,/
define->typearray.[]={nums};,*
define->typearray.[]={nums};,-
define->typearray.[]={nums};,+
define->typearray.[]={nums};,char
define->typearray.[]={nums};,double
define->typearray.[]={nums};,int
define->typearray.[]={nums};,}
define->typearray.[]={nums};,{
define->typearray.[]={nums};,(
define->typearray.[]={nums};,id
define->typearray.[num]={nums};,scanf
define->typearray.[num]={nums};,printf
define->typearray.[num]={nums};,if
define->typearray.[num]={nums};,while
define->typearray.[num]={nums};,for
define->typearray.[num]={nums};,return
define->typearray.[num]={nums};,array
define->typearray.[num]={nums};,string
define->typearray.[num]={nums};,num
define->typearray.[num]={nums};,%
define->typearray.[num]={nums};,/
define->typearray.[num]={nums};,*
define->typearray.[num]={nums};,-
define->typearray.[num]={nums};,+
define->typearray.[num]={nums};,char
define->typearray.[num]={nums};,double
define->typearray.[num]={nums};,int
define->typearray.[num]={nums};,}
define->typearray.[num]={nums};,{
define->typearray.[num]={nums};,(
define->typearray.[num]={nums};,id
define->typearray.[]={string};,scanf
define->typearray.[]={string};,printf
define->typearray.[]={string};,if
define->typearray.[]={string};,while
define->typearray.[]={string};,for
define->typearray.[]={string};,return
define->typearray.[]={string};,array
define->typearray.[]={string};,string
define->typearray.[]={string};,num
define->typearray.[]={string};,%
define->typearray.[]={string};,/
define->typearray.[]={string};,*
define->typearray.[]={string};,-
define->typearray.[]={string};,+
define->typearray.[]={string};,char
define->typearray.[]={string};,double
define->typearray.[]={string};,int
define->typearray.[]={string};,}
define->typearray.[]={string};,{
define->typearray.[]={string};,(
define->typearray.[]={string};,id
项目集74:
define->typeid_name.;,scanf
define->typeid_name.;,printf
define->typeid_name.;,if
define->typeid_name.;,while
define->typeid_name.;,for
define->typeid_name.;,return
define->typeid_name.;,array
define->typeid_name.;,string
define->typeid_name.;,num
define->typeid_name.;,%
define->typeid_name.;,/
define->typeid_name.;,*
define->typeid_name.;,-
define->typeid_name.;,+
define->typeid_name.;,char
define->typeid_name.;,double
define->typeid_name.;,int
define->typeid_name.;,}
define->typeid_name.;,{
define->typeid_name.;,(
define->typeid_name.;,id
define->typeid_name.=E;,scanf
define->typeid_name.=E;,printf
define->typeid_name.=E;,if
define->typeid_name.=E;,while
define->typeid_name.=E;,for
define->typeid_name.=E;,return
define->typeid_name.=E;,array
define->typeid_name.=E;,string
define->typeid_name.=E;,num
define->typeid_name.=E;,%
define->typeid_name.=E;,/
define->typeid_name.=E;,*
define->typeid_name.=E;,-
define->typeid_name.=E;,+
define->typeid_name.=E;,char
define->typeid_name.=E;,double
define->typeid_name.=E;,int
define->typeid_name.=E;,}
define->typeid_name.=E;,{
define->typeid_name.=E;,(
define->typeid_name.=E;,id
项目集75:
sentence->E;,scanf
sentence->E;,printf
sentence->E;,if
sentence->E;,while
sentence->E;,for
sentence->E;,return
sentence->E;,array
sentence->E;,string
sentence->E;,num
sentence->E;,%
sentence->E;,/
sentence->E;,*
sentence->E;,-
sentence->E;,+
sentence->E;,char
sentence->E;,double
sentence->E;,int
sentence->E;,}
sentence->E;,{
sentence->E;,(
sentence->E;,id
项目集76:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->E+.T,-
E->E+.T,+
E->E+.T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集77:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->E-.T,-
E->E-.T,+
E->E-.T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集78:
block->sentenceblock,}
项目集79:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集80:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集81:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
T->T%.F,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集82:
set_value->array[.E]=E,;
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集83:
F->id,%
F->id,/
F->id,*
F->id,-
F->id,+
F->id,;
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目集84:
sentence->returnE.;,scanf
sentence->returnE.;,printf
sentence->returnE.;,if
sentence->returnE.;,while
sentence->returnE.;,for
sentence->returnE.;,return
sentence->returnE.;,array
sentence->returnE.;,string
sentence->returnE.;,num
sentence->returnE.;,%
sentence->returnE.;,/
sentence->returnE.;,*
sentence->returnE.;,-
sentence->returnE.;,+
sentence->returnE.;,char
sentence->returnE.;,double
sentence->returnE.;,int
sentence->returnE.;,}
sentence->returnE.;,{
sentence->returnE.;,(
sentence->returnE.;,id
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集85:
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目集86:
sentence->set_value;,scanf
sentence->set_value;,printf
sentence->set_value;,if
sentence->set_value;,while
sentence->set_value;,for
sentence->set_value;,return
sentence->set_value;,array
sentence->set_value;,string
sentence->set_value;,num
sentence->set_value;,%
sentence->set_value;,/
sentence->set_value;,*
sentence->set_value;,-
sentence->set_value;,+
sentence->set_value;,char
sentence->set_value;,double
sentence->set_value;,int
sentence->set_value;,}
sentence->set_value;,{
sentence->set_value;,(
sentence->set_value;,id
项目集87:
for_set_value->.set_value,;
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,id
set_value->.array[E]=E,;
set_value->.id=E,;
项目集88:
sentence->IncorDec;,scanf
sentence->IncorDec;,printf
sentence->IncorDec;,if
sentence->IncorDec;,while
sentence->IncorDec;,for
sentence->IncorDec;,return
sentence->IncorDec;,array
sentence->IncorDec;,string
sentence->IncorDec;,num
sentence->IncorDec;,%
sentence->IncorDec;,/
sentence->IncorDec;,*
sentence->IncorDec;,-
sentence->IncorDec;,+
sentence->IncorDec;,char
sentence->IncorDec;,double
sentence->IncorDec;,int
sentence->IncorDec;,}
sentence->IncorDec;,{
sentence->IncorDec;,(
sentence->IncorDec;,id
项目集89:
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
while_expression->while1(.bool_expression)whilesentence,scanf
while_expression->while1(.bool_expression)whilesentence,printf
while_expression->while1(.bool_expression)whilesentence,if
while_expression->while1(.bool_expression)whilesentence,while
while_expression->while1(.bool_expression)whilesentence,for
while_expression->while1(.bool_expression)whilesentence,return
while_expression->while1(.bool_expression)whilesentence,array
while_expression->while1(.bool_expression)whilesentence,string
while_expression->while1(.bool_expression)whilesentence,num
while_expression->while1(.bool_expression)whilesentence,%
while_expression->while1(.bool_expression)whilesentence,/
while_expression->while1(.bool_expression)whilesentence,*
while_expression->while1(.bool_expression)whilesentence,-
while_expression->while1(.bool_expression)whilesentence,+
while_expression->while1(.bool_expression)whilesentence,char
while_expression->while1(.bool_expression)whilesentence,double
while_expression->while1(.bool_expression)whilesentence,int
while_expression->while1(.bool_expression)whilesentence,}
while_expression->while1(.bool_expression)whilesentence,{
while_expression->while1(.bool_expression)whilesentence,(
while_expression->while1(.bool_expression)whilesentence,id
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集90:
if_expression->if(.bool_expression)ifsentenceelsesentence,scanf
if_expression->if(.bool_expression)ifsentenceelsesentence,printf
if_expression->if(.bool_expression)ifsentenceelsesentence,if
if_expression->if(.bool_expression)ifsentenceelsesentence,while
if_expression->if(.bool_expression)ifsentenceelsesentence,for
if_expression->if(.bool_expression)ifsentenceelsesentence,return
if_expression->if(.bool_expression)ifsentenceelsesentence,array
if_expression->if(.bool_expression)ifsentenceelsesentence,string
if_expression->if(.bool_expression)ifsentenceelsesentence,num
if_expression->if(.bool_expression)ifsentenceelsesentence,%
if_expression->if(.bool_expression)ifsentenceelsesentence,/
if_expression->if(.bool_expression)ifsentenceelsesentence,*
if_expression->if(.bool_expression)ifsentenceelsesentence,-
if_expression->if(.bool_expression)ifsentenceelsesentence,+
if_expression->if(.bool_expression)ifsentenceelsesentence,char
if_expression->if(.bool_expression)ifsentenceelsesentence,double
if_expression->if(.bool_expression)ifsentenceelsesentence,int
if_expression->if(.bool_expression)ifsentenceelsesentence,}
if_expression->if(.bool_expression)ifsentenceelsesentence,{
if_expression->if(.bool_expression)ifsentenceelsesentence,(
if_expression->if(.bool_expression)ifsentenceelsesentence,id
if_expression->if(.bool_expression)sentence,scanf
if_expression->if(.bool_expression)sentence,printf
if_expression->if(.bool_expression)sentence,if
if_expression->if(.bool_expression)sentence,while
if_expression->if(.bool_expression)sentence,for
if_expression->if(.bool_expression)sentence,return
if_expression->if(.bool_expression)sentence,array
if_expression->if(.bool_expression)sentence,string
if_expression->if(.bool_expression)sentence,num
if_expression->if(.bool_expression)sentence,%
if_expression->if(.bool_expression)sentence,/
if_expression->if(.bool_expression)sentence,*
if_expression->if(.bool_expression)sentence,-
if_expression->if(.bool_expression)sentence,+
if_expression->if(.bool_expression)sentence,char
if_expression->if(.bool_expression)sentence,double
if_expression->if(.bool_expression)sentence,int
if_expression->if(.bool_expression)sentence,}
if_expression->if(.bool_expression)sentence,{
if_expression->if(.bool_expression)sentence,(
if_expression->if(.bool_expression)sentence,id
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集91:
printf_expression->printf(.string,expressions);,scanf
printf_expression->printf(.string,expressions);,printf
printf_expression->printf(.string,expressions);,if
printf_expression->printf(.string,expressions);,while
printf_expression->printf(.string,expressions);,for
printf_expression->printf(.string,expressions);,return
printf_expression->printf(.string,expressions);,array
printf_expression->printf(.string,expressions);,string
printf_expression->printf(.string,expressions);,num
printf_expression->printf(.string,expressions);,%
printf_expression->printf(.string,expressions);,/
printf_expression->printf(.string,expressions);,*
printf_expression->printf(.string,expressions);,-
printf_expression->printf(.string,expressions);,+
printf_expression->printf(.string,expressions);,char
printf_expression->printf(.string,expressions);,double
printf_expression->printf(.string,expressions);,int
printf_expression->printf(.string,expressions);,}
printf_expression->printf(.string,expressions);,{
printf_expression->printf(.string,expressions);,(
printf_expression->printf(.string,expressions);,id
printf_expression->printf(.string);,scanf
printf_expression->printf(.string);,printf
printf_expression->printf(.string);,if
printf_expression->printf(.string);,while
printf_expression->printf(.string);,for
printf_expression->printf(.string);,return
printf_expression->printf(.string);,array
printf_expression->printf(.string);,string
printf_expression->printf(.string);,num
printf_expression->printf(.string);,%
printf_expression->printf(.string);,/
printf_expression->printf(.string);,*
printf_expression->printf(.string);,-
printf_expression->printf(.string);,+
printf_expression->printf(.string);,char
printf_expression->printf(.string);,double
printf_expression->printf(.string);,int
printf_expression->printf(.string);,}
printf_expression->printf(.string);,{
printf_expression->printf(.string);,(
printf_expression->printf(.string);,id
项目集92:
scanf_expression->scanf(.string);,scanf
scanf_expression->scanf(.string);,printf
scanf_expression->scanf(.string);,if
scanf_expression->scanf(.string);,while
scanf_expression->scanf(.string);,for
scanf_expression->scanf(.string);,return
scanf_expression->scanf(.string);,array
scanf_expression->scanf(.string);,string
scanf_expression->scanf(.string);,num
scanf_expression->scanf(.string);,%
scanf_expression->scanf(.string);,/
scanf_expression->scanf(.string);,*
scanf_expression->scanf(.string);,-
scanf_expression->scanf(.string);,+
scanf_expression->scanf(.string);,char
scanf_expression->scanf(.string);,double
scanf_expression->scanf(.string);,int
scanf_expression->scanf(.string);,}
scanf_expression->scanf(.string);,{
scanf_expression->scanf(.string);,(
scanf_expression->scanf(.string);,id
scanf_expression->scanf(.string,expressions);,scanf
scanf_expression->scanf(.string,expressions);,printf
scanf_expression->scanf(.string,expressions);,if
scanf_expression->scanf(.string,expressions);,while
scanf_expression->scanf(.string,expressions);,for
scanf_expression->scanf(.string,expressions);,return
scanf_expression->scanf(.string,expressions);,array
scanf_expression->scanf(.string,expressions);,string
scanf_expression->scanf(.string,expressions);,num
scanf_expression->scanf(.string,expressions);,%
scanf_expression->scanf(.string,expressions);,/
scanf_expression->scanf(.string,expressions);,*
scanf_expression->scanf(.string,expressions);,-
scanf_expression->scanf(.string,expressions);,+
scanf_expression->scanf(.string,expressions);,char
scanf_expression->scanf(.string,expressions);,double
scanf_expression->scanf(.string,expressions);,int
scanf_expression->scanf(.string,expressions);,}
scanf_expression->scanf(.string,expressions);,{
scanf_expression->scanf(.string,expressions);,(
scanf_expression->scanf(.string,expressions);,id
项目集93:
function_define->function_typeid(function_define_list){block.},char
function_define->function_typeid(function_define_list){block.},double
function_define->function_typeid(function_define_list){block.},int
function_define->function_typeid(function_define_list){block.},void
function_define->function_typeid(function_define_list){block.},#
项目集94:
function_define_list->function_define_list,typeid,,
function_define_list->function_define_list,typeid,)
项目集95:
F->id,%
F->id,/
F->id,*
F->id,-
F->id,+
F->id,,
F->id,)
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),,
function_call->id.(function_call_list),)
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),,
function_call->id.(),)
项目集96:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),,
F->(.E),)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集97:
function_call->id(),%
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
function_call->id(),;
项目集98:
F->function_call,%
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
F->function_call,,
F->function_call,)
项目集99:
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),;
项目集100:
function_call_list->list.,function_call_list,)
function_call_list->list,)
项目集101:
E->E.-T,-
E->E.-T,+
E->E.-T,,
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,,
E->E.+T,)
list->E,,
list->E,)
项目集102:
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,,
T->T.%F,)
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,,
T->T./F,)
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,,
T->T.*F,)
E->T,-
E->T,+
E->T,,
E->T,)
项目集103:
T->F,%
T->F,/
T->F,*
T->F,-
T->F,+
T->F,,
T->F,)
项目集104:
F->num,%
F->num,/
F->num,*
F->num,-
F->num,+
F->num,,
F->num,)
项目集105:
F->string,%
F->string,/
F->string,*
F->string,-
F->string,+
F->string,,
F->string,)
项目集106:
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],,
F->array.[E],)
项目集107:
set_value->id=E,;
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集108:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集109:
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),)
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集110:
F->(E),%
F->(E),/
F->(E),*
F->(E),-
F->(E),+
F->(E),;
项目集111:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->E+.T,-
E->E+.T,+
E->E+.T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集112:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->E-.T,-
E->E-.T,+
E->E-.T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集113:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集114:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集115:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
T->T%.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集116:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],)
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集117:
sentence->{block},scanf
sentence->{block},printf
sentence->{block},if
sentence->{block},while
sentence->{block},for
sentence->{block},return
sentence->{block},array
sentence->{block},string
sentence->{block},num
sentence->{block},%
sentence->{block},/
sentence->{block},*
sentence->{block},-
sentence->{block},+
sentence->{block},char
sentence->{block},double
sentence->{block},int
sentence->{block},}
sentence->{block},{
sentence->{block},(
sentence->{block},id
项目集118:
define->typearray[.num];,scanf
define->typearray[.num];,printf
define->typearray[.num];,if
define->typearray[.num];,while
define->typearray[.num];,for
define->typearray[.num];,return
define->typearray[.num];,array
define->typearray[.num];,string
define->typearray[.num];,num
define->typearray[.num];,%
define->typearray[.num];,/
define->typearray[.num];,*
define->typearray[.num];,-
define->typearray[.num];,+
define->typearray[.num];,char
define->typearray[.num];,double
define->typearray[.num];,int
define->typearray[.num];,}
define->typearray[.num];,{
define->typearray[.num];,(
define->typearray[.num];,id
define->typearray[.]={nums};,scanf
define->typearray[.]={nums};,printf
define->typearray[.]={nums};,if
define->typearray[.]={nums};,while
define->typearray[.]={nums};,for
define->typearray[.]={nums};,return
define->typearray[.]={nums};,array
define->typearray[.]={nums};,string
define->typearray[.]={nums};,num
define->typearray[.]={nums};,%
define->typearray[.]={nums};,/
define->typearray[.]={nums};,*
define->typearray[.]={nums};,-
define->typearray[.]={nums};,+
define->typearray[.]={nums};,char
define->typearray[.]={nums};,double
define->typearray[.]={nums};,int
define->typearray[.]={nums};,}
define->typearray[.]={nums};,{
define->typearray[.]={nums};,(
define->typearray[.]={nums};,id
define->typearray[.num]={nums};,scanf
define->typearray[.num]={nums};,printf
define->typearray[.num]={nums};,if
define->typearray[.num]={nums};,while
define->typearray[.num]={nums};,for
define->typearray[.num]={nums};,return
define->typearray[.num]={nums};,array
define->typearray[.num]={nums};,string
define->typearray[.num]={nums};,num
define->typearray[.num]={nums};,%
define->typearray[.num]={nums};,/
define->typearray[.num]={nums};,*
define->typearray[.num]={nums};,-
define->typearray[.num]={nums};,+
define->typearray[.num]={nums};,char
define->typearray[.num]={nums};,double
define->typearray[.num]={nums};,int
define->typearray[.num]={nums};,}
define->typearray[.num]={nums};,{
define->typearray[.num]={nums};,(
define->typearray[.num]={nums};,id
define->typearray[.]={string};,scanf
define->typearray[.]={string};,printf
define->typearray[.]={string};,if
define->typearray[.]={string};,while
define->typearray[.]={string};,for
define->typearray[.]={string};,return
define->typearray[.]={string};,array
define->typearray[.]={string};,string
define->typearray[.]={string};,num
define->typearray[.]={string};,%
define->typearray[.]={string};,/
define->typearray[.]={string};,*
define->typearray[.]={string};,-
define->typearray[.]={string};,+
define->typearray[.]={string};,char
define->typearray[.]={string};,double
define->typearray[.]={string};,int
define->typearray[.]={string};,}
define->typearray[.]={string};,{
define->typearray[.]={string};,(
define->typearray[.]={string};,id
项目集119:
define->typeid_name;,scanf
define->typeid_name;,printf
define->typeid_name;,if
define->typeid_name;,while
define->typeid_name;,for
define->typeid_name;,return
define->typeid_name;,array
define->typeid_name;,string
define->typeid_name;,num
define->typeid_name;,%
define->typeid_name;,/
define->typeid_name;,*
define->typeid_name;,-
define->typeid_name;,+
define->typeid_name;,char
define->typeid_name;,double
define->typeid_name;,int
define->typeid_name;,}
define->typeid_name;,{
define->typeid_name;,(
define->typeid_name;,id
项目集120:
define->typeid_name=.E;,scanf
define->typeid_name=.E;,printf
define->typeid_name=.E;,if
define->typeid_name=.E;,while
define->typeid_name=.E;,for
define->typeid_name=.E;,return
define->typeid_name=.E;,array
define->typeid_name=.E;,string
define->typeid_name=.E;,num
define->typeid_name=.E;,%
define->typeid_name=.E;,/
define->typeid_name=.E;,*
define->typeid_name=.E;,-
define->typeid_name=.E;,+
define->typeid_name=.E;,char
define->typeid_name=.E;,double
define->typeid_name=.E;,int
define->typeid_name=.E;,}
define->typeid_name=.E;,{
define->typeid_name=.E;,(
define->typeid_name=.E;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集121:
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,;
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->E+T,-
E->E+T,+
E->E+T,;
项目集122:
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,;
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->E-T,-
E->E-T,+
E->E-T,;
项目集123:
T->T*F,%
T->T*F,/
T->T*F,*
T->T*F,-
T->T*F,+
T->T*F,;
项目集124:
T->T/F,%
T->T/F,/
T->T/F,*
T->T/F,-
T->T/F,+
T->T/F,;
项目集125:
T->T%F,%
T->T%F,/
T->T%F,*
T->T%F,-
T->T%F,+
T->T%F,;
项目集126:
F->id,]
F->id,%
F->id,/
F->id,*
F->id,-
F->id,+
function_call->id.(function_call_list),]
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(),]
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
项目集127:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),]
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集128:
F->function_call,]
F->function_call,%
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
项目集129:
set_value->array[E.]=E,;
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集130:
T->T.%F,]
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,]
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->T,]
E->T,-
E->T,+
项目集131:
T->F,]
T->F,%
T->F,/
T->F,*
T->F,-
T->F,+
项目集132:
F->num,]
F->num,%
F->num,/
F->num,*
F->num,-
F->num,+
项目集133:
F->string,]
F->string,%
F->string,/
F->string,*
F->string,-
F->string,+
项目集134:
F->array.[E],]
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
项目集135:
sentence->returnE;,scanf
sentence->returnE;,printf
sentence->returnE;,if
sentence->returnE;,while
sentence->returnE;,for
sentence->returnE;,return
sentence->returnE;,array
sentence->returnE;,string
sentence->returnE;,num
sentence->returnE;,%
sentence->returnE;,/
sentence->returnE;,*
sentence->returnE;,-
sentence->returnE;,+
sentence->returnE;,char
sentence->returnE;,double
sentence->returnE;,int
sentence->returnE;,}
sentence->returnE;,{
sentence->returnE;,(
sentence->returnE;,id
项目集136:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集137:
set_value->id.=E,;
项目集138:
set_value->array.[E]=E,;
项目集139:
for_set_value->set_value,;
项目集140:
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,id
项目集141:
F->id,!=
F->id,==
F->id,>
F->id,<
F->id,<=
F->id,>=
F->id,%
F->id,/
F->id,*
F->id,-
F->id,+
F->id,)
function_call->id.(function_call_list),!=
function_call->id.(function_call_list),==
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),)
function_call->id.(),!=
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),)
项目集142:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),!=
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集143:
F->function_call,!=
F->function_call,==
F->function_call,>
F->function_call,<
F->function_call,<=
F->function_call,>=
F->function_call,%
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
F->function_call,)
项目集144:
G->E,!=
G->E,==
G->E,>
G->E,<
G->E,<=
G->E,>=
E->E.-T,!=
E->E.-T,==
E->E.-T,>
E->E.-T,<
E->E.-T,<=
E->E.-T,>=
E->E.-T,-
E->E.-T,+
E->E.+T,!=
E->E.+T,==
E->E.+T,>
E->E.+T,<
E->E.+T,<=
E->E.+T,>=
E->E.+T,-
E->E.+T,+
项目集145:
T->T.%F,!=
T->T.%F,==
T->T.%F,>
T->T.%F,<
T->T.%F,<=
T->T.%F,>=
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,!=
T->T./F,==
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,!=
T->T.*F,==
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->T,!=
E->T,==
E->T,>
E->T,<
E->T,<=
E->T,>=
E->T,-
E->T,+
项目集146:
bool_expression->F,)
T->F,!=
T->F,==
T->F,>
T->F,<
T->F,<=
T->F,>=
T->F,%
T->F,/
T->F,*
T->F,-
T->F,+
项目集147:
F->num,!=
F->num,==
F->num,>
F->num,<
F->num,<=
F->num,>=
F->num,%
F->num,/
F->num,*
F->num,-
F->num,+
F->num,)
项目集148:
F->string,!=
F->string,==
F->string,>
F->string,<
F->string,<=
F->string,>=
F->string,%
F->string,/
F->string,*
F->string,-
F->string,+
F->string,)
项目集149:
F->array.[E],!=
F->array.[E],==
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],)
项目集150:
while_expression->while1(bool_expression.)whilesentence,scanf
while_expression->while1(bool_expression.)whilesentence,printf
while_expression->while1(bool_expression.)whilesentence,if
while_expression->while1(bool_expression.)whilesentence,while
while_expression->while1(bool_expression.)whilesentence,for
while_expression->while1(bool_expression.)whilesentence,return
while_expression->while1(bool_expression.)whilesentence,array
while_expression->while1(bool_expression.)whilesentence,string
while_expression->while1(bool_expression.)whilesentence,num
while_expression->while1(bool_expression.)whilesentence,%
while_expression->while1(bool_expression.)whilesentence,/
while_expression->while1(bool_expression.)whilesentence,*
while_expression->while1(bool_expression.)whilesentence,-
while_expression->while1(bool_expression.)whilesentence,+
while_expression->while1(bool_expression.)whilesentence,char
while_expression->while1(bool_expression.)whilesentence,double
while_expression->while1(bool_expression.)whilesentence,int
while_expression->while1(bool_expression.)whilesentence,}
while_expression->while1(bool_expression.)whilesentence,{
while_expression->while1(bool_expression.)whilesentence,(
while_expression->while1(bool_expression.)whilesentence,id
项目集151:
op->.!=,array
op->.!=,string
op->.!=,num
op->.!=,%
op->.!=,/
op->.!=,*
op->.!=,-
op->.!=,+
op->.!=,(
op->.!=,id
op->.==,array
op->.==,string
op->.==,num
op->.==,%
op->.==,/
op->.==,*
op->.==,-
op->.==,+
op->.==,(
op->.==,id
op->.>,array
op->.>,string
op->.>,num
op->.>,%
op->.>,/
op->.>,*
op->.>,-
op->.>,+
op->.>,(
op->.>,id
op->.<,array
op->.<,string
op->.<,num
op->.<,%
op->.<,/
op->.<,*
op->.<,-
op->.<,+
op->.<,(
op->.<,id
op->.<=,array
op->.<=,string
op->.<=,num
op->.<=,%
op->.<=,/
op->.<=,*
op->.<=,-
op->.<=,+
op->.<=,(
op->.<=,id
op->.>=,array
op->.>=,string
op->.>=,num
op->.>=,%
op->.>=,/
op->.>=,*
op->.>=,-
op->.>=,+
op->.>=,(
op->.>=,id
bool_expression->G.opH,)
项目集152:
if_expression->if(bool_expression.)ifsentenceelsesentence,scanf
if_expression->if(bool_expression.)ifsentenceelsesentence,printf
if_expression->if(bool_expression.)ifsentenceelsesentence,if
if_expression->if(bool_expression.)ifsentenceelsesentence,while
if_expression->if(bool_expression.)ifsentenceelsesentence,for
if_expression->if(bool_expression.)ifsentenceelsesentence,return
if_expression->if(bool_expression.)ifsentenceelsesentence,array
if_expression->if(bool_expression.)ifsentenceelsesentence,string
if_expression->if(bool_expression.)ifsentenceelsesentence,num
if_expression->if(bool_expression.)ifsentenceelsesentence,%
if_expression->if(bool_expression.)ifsentenceelsesentence,/
if_expression->if(bool_expression.)ifsentenceelsesentence,*
if_expression->if(bool_expression.)ifsentenceelsesentence,-
if_expression->if(bool_expression.)ifsentenceelsesentence,+
if_expression->if(bool_expression.)ifsentenceelsesentence,char
if_expression->if(bool_expression.)ifsentenceelsesentence,double
if_expression->if(bool_expression.)ifsentenceelsesentence,int
if_expression->if(bool_expression.)ifsentenceelsesentence,}
if_expression->if(bool_expression.)ifsentenceelsesentence,{
if_expression->if(bool_expression.)ifsentenceelsesentence,(
if_expression->if(bool_expression.)ifsentenceelsesentence,id
if_expression->if(bool_expression.)sentence,scanf
if_expression->if(bool_expression.)sentence,printf
if_expression->if(bool_expression.)sentence,if
if_expression->if(bool_expression.)sentence,while
if_expression->if(bool_expression.)sentence,for
if_expression->if(bool_expression.)sentence,return
if_expression->if(bool_expression.)sentence,array
if_expression->if(bool_expression.)sentence,string
if_expression->if(bool_expression.)sentence,num
if_expression->if(bool_expression.)sentence,%
if_expression->if(bool_expression.)sentence,/
if_expression->if(bool_expression.)sentence,*
if_expression->if(bool_expression.)sentence,-
if_expression->if(bool_expression.)sentence,+
if_expression->if(bool_expression.)sentence,char
if_expression->if(bool_expression.)sentence,double
if_expression->if(bool_expression.)sentence,int
if_expression->if(bool_expression.)sentence,}
if_expression->if(bool_expression.)sentence,{
if_expression->if(bool_expression.)sentence,(
if_expression->if(bool_expression.)sentence,id
项目集153:
printf_expression->printf(string.,expressions);,scanf
printf_expression->printf(string.,expressions);,printf
printf_expression->printf(string.,expressions);,if
printf_expression->printf(string.,expressions);,while
printf_expression->printf(string.,expressions);,for
printf_expression->printf(string.,expressions);,return
printf_expression->printf(string.,expressions);,array
printf_expression->printf(string.,expressions);,string
printf_expression->printf(string.,expressions);,num
printf_expression->printf(string.,expressions);,%
printf_expression->printf(string.,expressions);,/
printf_expression->printf(string.,expressions);,*
printf_expression->printf(string.,expressions);,-
printf_expression->printf(string.,expressions);,+
printf_expression->printf(string.,expressions);,char
printf_expression->printf(string.,expressions);,double
printf_expression->printf(string.,expressions);,int
printf_expression->printf(string.,expressions);,}
printf_expression->printf(string.,expressions);,{
printf_expression->printf(string.,expressions);,(
printf_expression->printf(string.,expressions);,id
printf_expression->printf(string.);,scanf
printf_expression->printf(string.);,printf
printf_expression->printf(string.);,if
printf_expression->printf(string.);,while
printf_expression->printf(string.);,for
printf_expression->printf(string.);,return
printf_expression->printf(string.);,array
printf_expression->printf(string.);,string
printf_expression->printf(string.);,num
printf_expression->printf(string.);,%
printf_expression->printf(string.);,/
printf_expression->printf(string.);,*
printf_expression->printf(string.);,-
printf_expression->printf(string.);,+
printf_expression->printf(string.);,char
printf_expression->printf(string.);,double
printf_expression->printf(string.);,int
printf_expression->printf(string.);,}
printf_expression->printf(string.);,{
printf_expression->printf(string.);,(
printf_expression->printf(string.);,id
项目集154:
scanf_expression->scanf(string.);,scanf
scanf_expression->scanf(string.);,printf
scanf_expression->scanf(string.);,if
scanf_expression->scanf(string.);,while
scanf_expression->scanf(string.);,for
scanf_expression->scanf(string.);,return
scanf_expression->scanf(string.);,array
scanf_expression->scanf(string.);,string
scanf_expression->scanf(string.);,num
scanf_expression->scanf(string.);,%
scanf_expression->scanf(string.);,/
scanf_expression->scanf(string.);,*
scanf_expression->scanf(string.);,-
scanf_expression->scanf(string.);,+
scanf_expression->scanf(string.);,char
scanf_expression->scanf(string.);,double
scanf_expression->scanf(string.);,int
scanf_expression->scanf(string.);,}
scanf_expression->scanf(string.);,{
scanf_expression->scanf(string.);,(
scanf_expression->scanf(string.);,id
scanf_expression->scanf(string.,expressions);,scanf
scanf_expression->scanf(string.,expressions);,printf
scanf_expression->scanf(string.,expressions);,if
scanf_expression->scanf(string.,expressions);,while
scanf_expression->scanf(string.,expressions);,for
scanf_expression->scanf(string.,expressions);,return
scanf_expression->scanf(string.,expressions);,array
scanf_expression->scanf(string.,expressions);,string
scanf_expression->scanf(string.,expressions);,num
scanf_expression->scanf(string.,expressions);,%
scanf_expression->scanf(string.,expressions);,/
scanf_expression->scanf(string.,expressions);,*
scanf_expression->scanf(string.,expressions);,-
scanf_expression->scanf(string.,expressions);,+
scanf_expression->scanf(string.,expressions);,char
scanf_expression->scanf(string.,expressions);,double
scanf_expression->scanf(string.,expressions);,int
scanf_expression->scanf(string.,expressions);,}
scanf_expression->scanf(string.,expressions);,{
scanf_expression->scanf(string.,expressions);,(
scanf_expression->scanf(string.,expressions);,id
项目集155:
function_define->function_typeid(function_define_list){block},char
function_define->function_typeid(function_define_list){block},double
function_define->function_typeid(function_define_list){block},int
function_define->function_typeid(function_define_list){block},void
function_define->function_typeid(function_define_list){block},#
项目集156:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),,
function_call->id(.function_call_list),)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),,
function_call->id(.),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集157:
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),,
F->(E.),)
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集158:
function_call->id(function_call_list),%
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
function_call->id(function_call_list),;
项目集159:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->list,.function_call_list,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集160:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->E+.T,-
E->E+.T,+
E->E+.T,,
E->E+.T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集161:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->E-.T,-
E->E-.T,+
E->E-.T,,
E->E-.T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集162:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,,
T->T*.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集163:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,,
T->T/.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集164:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
T->T%.F,,
T->T%.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集165:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],,
F->array[.E],)
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集166:
function_call->id(),%
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
function_call->id(),)
项目集167:
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),)
项目集168:
F->(E),%
F->(E),/
F->(E),*
F->(E),-
F->(E),+
F->(E),)
项目集169:
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,)
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->E+T,-
E->E+T,+
E->E+T,)
项目集170:
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,)
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->E-T,-
E->E-T,+
E->E-T,)
项目集171:
T->T*F,%
T->T*F,/
T->T*F,*
T->T*F,-
T->T*F,+
T->T*F,)
项目集172:
T->T/F,%
T->T/F,/
T->T/F,*
T->T/F,-
T->T/F,+
T->T/F,)
项目集173:
T->T%F,%
T->T%F,/
T->T%F,*
T->T%F,-
T->T%F,+
T->T%F,)
项目集174:
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],)
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集175:
define->typearray[num.];,scanf
define->typearray[num.];,printf
define->typearray[num.];,if
define->typearray[num.];,while
define->typearray[num.];,for
define->typearray[num.];,return
define->typearray[num.];,array
define->typearray[num.];,string
define->typearray[num.];,num
define->typearray[num.];,%
define->typearray[num.];,/
define->typearray[num.];,*
define->typearray[num.];,-
define->typearray[num.];,+
define->typearray[num.];,char
define->typearray[num.];,double
define->typearray[num.];,int
define->typearray[num.];,}
define->typearray[num.];,{
define->typearray[num.];,(
define->typearray[num.];,id
define->typearray[num.]={nums};,scanf
define->typearray[num.]={nums};,printf
define->typearray[num.]={nums};,if
define->typearray[num.]={nums};,while
define->typearray[num.]={nums};,for
define->typearray[num.]={nums};,return
define->typearray[num.]={nums};,array
define->typearray[num.]={nums};,string
define->typearray[num.]={nums};,num
define->typearray[num.]={nums};,%
define->typearray[num.]={nums};,/
define->typearray[num.]={nums};,*
define->typearray[num.]={nums};,-
define->typearray[num.]={nums};,+
define->typearray[num.]={nums};,char
define->typearray[num.]={nums};,double
define->typearray[num.]={nums};,int
define->typearray[num.]={nums};,}
define->typearray[num.]={nums};,{
define->typearray[num.]={nums};,(
define->typearray[num.]={nums};,id
项目集176:
define->typearray[].={nums};,scanf
define->typearray[].={nums};,printf
define->typearray[].={nums};,if
define->typearray[].={nums};,while
define->typearray[].={nums};,for
define->typearray[].={nums};,return
define->typearray[].={nums};,array
define->typearray[].={nums};,string
define->typearray[].={nums};,num
define->typearray[].={nums};,%
define->typearray[].={nums};,/
define->typearray[].={nums};,*
define->typearray[].={nums};,-
define->typearray[].={nums};,+
define->typearray[].={nums};,char
define->typearray[].={nums};,double
define->typearray[].={nums};,int
define->typearray[].={nums};,}
define->typearray[].={nums};,{
define->typearray[].={nums};,(
define->typearray[].={nums};,id
define->typearray[].={string};,scanf
define->typearray[].={string};,printf
define->typearray[].={string};,if
define->typearray[].={string};,while
define->typearray[].={string};,for
define->typearray[].={string};,return
define->typearray[].={string};,array
define->typearray[].={string};,string
define->typearray[].={string};,num
define->typearray[].={string};,%
define->typearray[].={string};,/
define->typearray[].={string};,*
define->typearray[].={string};,-
define->typearray[].={string};,+
define->typearray[].={string};,char
define->typearray[].={string};,double
define->typearray[].={string};,int
define->typearray[].={string};,}
define->typearray[].={string};,{
define->typearray[].={string};,(
define->typearray[].={string};,id
项目集177:
define->typeid_name=E.;,scanf
define->typeid_name=E.;,printf
define->typeid_name=E.;,if
define->typeid_name=E.;,while
define->typeid_name=E.;,for
define->typeid_name=E.;,return
define->typeid_name=E.;,array
define->typeid_name=E.;,string
define->typeid_name=E.;,num
define->typeid_name=E.;,%
define->typeid_name=E.;,/
define->typeid_name=E.;,*
define->typeid_name=E.;,-
define->typeid_name=E.;,+
define->typeid_name=E.;,char
define->typeid_name=E.;,double
define->typeid_name=E.;,int
define->typeid_name=E.;,}
define->typeid_name=E.;,{
define->typeid_name=E.;,(
define->typeid_name=E.;,id
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集178:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),]
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),]
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集179:
F->(E.),]
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集180:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E+.T,]
E->E+.T,-
E->E+.T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集181:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E-.T,]
E->E-.T,-
E->E-.T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集182:
set_value->array[E].=E,;
F->array[E],%
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],;
项目集183:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T*.F,]
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集184:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T/.F,]
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集185:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T%.F,]
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集186:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],]
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集187:
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集188:
set_value->array[.E]=E,;
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集189:
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,;
bool_expression->.GopH,;
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,id
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集190:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),!=
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),!=
function_call->id(.),==
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集191:
F->(E.),!=
F->(E.),==
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),)
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集192:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E+.T,!=
E->E+.T,==
E->E+.T,>
E->E+.T,<
E->E+.T,<=
E->E+.T,>=
E->E+.T,-
E->E+.T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集193:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E-.T,!=
E->E-.T,==
E->E-.T,>
E->E-.T,<
E->E-.T,<=
E->E-.T,>=
E->E-.T,-
E->E-.T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集194:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T*.F,!=
T->T*.F,==
T->T*.F,>
T->T*.F,<
T->T*.F,<=
T->T*.F,>=
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集195:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T/.F,!=
T->T/.F,==
T->T/.F,>
T->T/.F,<
T->T/.F,<=
T->T/.F,>=
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集196:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T%.F,!=
T->T%.F,==
T->T%.F,>
T->T%.F,<
T->T%.F,<=
T->T%.F,>=
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集197:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],!=
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],)
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集198:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
whilesentence->.sentence,scanf
whilesentence->.sentence,printf
whilesentence->.sentence,if
whilesentence->.sentence,while
whilesentence->.sentence,for
whilesentence->.sentence,return
whilesentence->.sentence,array
whilesentence->.sentence,string
whilesentence->.sentence,num
whilesentence->.sentence,%
whilesentence->.sentence,/
whilesentence->.sentence,*
whilesentence->.sentence,-
whilesentence->.sentence,+
whilesentence->.sentence,char
whilesentence->.sentence,double
whilesentence->.sentence,int
whilesentence->.sentence,}
whilesentence->.sentence,{
whilesentence->.sentence,(
whilesentence->.sentence,id
while1->.while,(
while_expression->while1(bool_expression).whilesentence,scanf
while_expression->while1(bool_expression).whilesentence,printf
while_expression->while1(bool_expression).whilesentence,if
while_expression->while1(bool_expression).whilesentence,while
while_expression->while1(bool_expression).whilesentence,for
while_expression->while1(bool_expression).whilesentence,return
while_expression->while1(bool_expression).whilesentence,array
while_expression->while1(bool_expression).whilesentence,string
while_expression->while1(bool_expression).whilesentence,num
while_expression->while1(bool_expression).whilesentence,%
while_expression->while1(bool_expression).whilesentence,/
while_expression->while1(bool_expression).whilesentence,*
while_expression->while1(bool_expression).whilesentence,-
while_expression->while1(bool_expression).whilesentence,+
while_expression->while1(bool_expression).whilesentence,char
while_expression->while1(bool_expression).whilesentence,double
while_expression->while1(bool_expression).whilesentence,int
while_expression->while1(bool_expression).whilesentence,}
while_expression->while1(bool_expression).whilesentence,{
while_expression->while1(bool_expression).whilesentence,(
while_expression->while1(bool_expression).whilesentence,id
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集199:
H->.E,)
bool_expression->Gop.H,)
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集200:
op->>=,array
op->>=,string
op->>=,num
op->>=,%
op->>=,/
op->>=,*
op->>=,-
op->>=,+
op->>=,(
op->>=,id
项目集201:
op-><=,array
op-><=,string
op-><=,num
op-><=,%
op-><=,/
op-><=,*
op-><=,-
op-><=,+
op-><=,(
op-><=,id
项目集202:
op-><,array
op-><,string
op-><,num
op-><,%
op-><,/
op-><,*
op-><,-
op-><,+
op-><,(
op-><,id
项目集203:
op->>,array
op->>,string
op->>,num
op->>,%
op->>,/
op->>,*
op->>,-
op->>,+
op->>,(
op->>,id
项目集204:
op->==,array
op->==,string
op->==,num
op->==,%
op->==,/
op->==,*
op->==,-
op->==,+
op->==,(
op->==,id
项目集205:
op->!=,array
op->!=,string
op->!=,num
op->!=,%
op->!=,/
op->!=,*
op->!=,-
op->!=,+
op->!=,(
op->!=,id
项目集206:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
ifsentence->.sentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,scanf
if_expression->if(bool_expression).ifsentenceelsesentence,printf
if_expression->if(bool_expression).ifsentenceelsesentence,if
if_expression->if(bool_expression).ifsentenceelsesentence,while
if_expression->if(bool_expression).ifsentenceelsesentence,for
if_expression->if(bool_expression).ifsentenceelsesentence,return
if_expression->if(bool_expression).ifsentenceelsesentence,array
if_expression->if(bool_expression).ifsentenceelsesentence,string
if_expression->if(bool_expression).ifsentenceelsesentence,num
if_expression->if(bool_expression).ifsentenceelsesentence,%
if_expression->if(bool_expression).ifsentenceelsesentence,/
if_expression->if(bool_expression).ifsentenceelsesentence,*
if_expression->if(bool_expression).ifsentenceelsesentence,-
if_expression->if(bool_expression).ifsentenceelsesentence,+
if_expression->if(bool_expression).ifsentenceelsesentence,char
if_expression->if(bool_expression).ifsentenceelsesentence,double
if_expression->if(bool_expression).ifsentenceelsesentence,int
if_expression->if(bool_expression).ifsentenceelsesentence,}
if_expression->if(bool_expression).ifsentenceelsesentence,{
if_expression->if(bool_expression).ifsentenceelsesentence,(
if_expression->if(bool_expression).ifsentenceelsesentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->if(bool_expression).sentence,scanf
if_expression->if(bool_expression).sentence,printf
if_expression->if(bool_expression).sentence,if
if_expression->if(bool_expression).sentence,while
if_expression->if(bool_expression).sentence,for
if_expression->if(bool_expression).sentence,return
if_expression->if(bool_expression).sentence,array
if_expression->if(bool_expression).sentence,string
if_expression->if(bool_expression).sentence,num
if_expression->if(bool_expression).sentence,%
if_expression->if(bool_expression).sentence,/
if_expression->if(bool_expression).sentence,*
if_expression->if(bool_expression).sentence,-
if_expression->if(bool_expression).sentence,+
if_expression->if(bool_expression).sentence,char
if_expression->if(bool_expression).sentence,double
if_expression->if(bool_expression).sentence,int
if_expression->if(bool_expression).sentence,}
if_expression->if(bool_expression).sentence,{
if_expression->if(bool_expression).sentence,(
if_expression->if(bool_expression).sentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集207:
printf_expression->printf(string).;,scanf
printf_expression->printf(string).;,printf
printf_expression->printf(string).;,if
printf_expression->printf(string).;,while
printf_expression->printf(string).;,for
printf_expression->printf(string).;,return
printf_expression->printf(string).;,array
printf_expression->printf(string).;,string
printf_expression->printf(string).;,num
printf_expression->printf(string).;,%
printf_expression->printf(string).;,/
printf_expression->printf(string).;,*
printf_expression->printf(string).;,-
printf_expression->printf(string).;,+
printf_expression->printf(string).;,char
printf_expression->printf(string).;,double
printf_expression->printf(string).;,int
printf_expression->printf(string).;,}
printf_expression->printf(string).;,{
printf_expression->printf(string).;,(
printf_expression->printf(string).;,id
项目集208:
getaddr->.&id,,
getaddr->.&id,)
getaddr->.id,,
getaddr->.id,)
expressions->.getaddr,)
expressions->.getaddr,expressions,)
printf_expression->printf(string,.expressions);,scanf
printf_expression->printf(string,.expressions);,printf
printf_expression->printf(string,.expressions);,if
printf_expression->printf(string,.expressions);,while
printf_expression->printf(string,.expressions);,for
printf_expression->printf(string,.expressions);,return
printf_expression->printf(string,.expressions);,array
printf_expression->printf(string,.expressions);,string
printf_expression->printf(string,.expressions);,num
printf_expression->printf(string,.expressions);,%
printf_expression->printf(string,.expressions);,/
printf_expression->printf(string,.expressions);,*
printf_expression->printf(string,.expressions);,-
printf_expression->printf(string,.expressions);,+
printf_expression->printf(string,.expressions);,char
printf_expression->printf(string,.expressions);,double
printf_expression->printf(string,.expressions);,int
printf_expression->printf(string,.expressions);,}
printf_expression->printf(string,.expressions);,{
printf_expression->printf(string,.expressions);,(
printf_expression->printf(string,.expressions);,id
项目集209:
scanf_expression->scanf(string).;,scanf
scanf_expression->scanf(string).;,printf
scanf_expression->scanf(string).;,if
scanf_expression->scanf(string).;,while
scanf_expression->scanf(string).;,for
scanf_expression->scanf(string).;,return
scanf_expression->scanf(string).;,array
scanf_expression->scanf(string).;,string
scanf_expression->scanf(string).;,num
scanf_expression->scanf(string).;,%
scanf_expression->scanf(string).;,/
scanf_expression->scanf(string).;,*
scanf_expression->scanf(string).;,-
scanf_expression->scanf(string).;,+
scanf_expression->scanf(string).;,char
scanf_expression->scanf(string).;,double
scanf_expression->scanf(string).;,int
scanf_expression->scanf(string).;,}
scanf_expression->scanf(string).;,{
scanf_expression->scanf(string).;,(
scanf_expression->scanf(string).;,id
项目集210:
getaddr->.&id,,
getaddr->.&id,)
getaddr->.id,,
getaddr->.id,)
scanf_expression->scanf(string,.expressions);,scanf
scanf_expression->scanf(string,.expressions);,printf
scanf_expression->scanf(string,.expressions);,if
scanf_expression->scanf(string,.expressions);,while
scanf_expression->scanf(string,.expressions);,for
scanf_expression->scanf(string,.expressions);,return
scanf_expression->scanf(string,.expressions);,array
scanf_expression->scanf(string,.expressions);,string
scanf_expression->scanf(string,.expressions);,num
scanf_expression->scanf(string,.expressions);,%
scanf_expression->scanf(string,.expressions);,/
scanf_expression->scanf(string,.expressions);,*
scanf_expression->scanf(string,.expressions);,-
scanf_expression->scanf(string,.expressions);,+
scanf_expression->scanf(string,.expressions);,char
scanf_expression->scanf(string,.expressions);,double
scanf_expression->scanf(string,.expressions);,int
scanf_expression->scanf(string,.expressions);,}
scanf_expression->scanf(string,.expressions);,{
scanf_expression->scanf(string,.expressions);,(
scanf_expression->scanf(string,.expressions);,id
expressions->.getaddr,)
expressions->.getaddr,expressions,)
项目集211:
function_call->id(),%
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
function_call->id(),,
function_call->id(),)
项目集212:
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),,
function_call->id(function_call_list.),)
项目集213:
F->(E),%
F->(E),/
F->(E),*
F->(E),-
F->(E),+
F->(E),,
F->(E),)
项目集214:
function_call_list->list,function_call_list,)
项目集215:
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,,
T->T.%F,)
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,,
T->T./F,)
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,,
T->T.*F,)
E->E+T,-
E->E+T,+
E->E+T,,
E->E+T,)
项目集216:
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,,
T->T.%F,)
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,,
T->T./F,)
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,,
T->T.*F,)
E->E-T,-
E->E-T,+
E->E-T,,
E->E-T,)
项目集217:
T->T*F,%
T->T*F,/
T->T*F,*
T->T*F,-
T->T*F,+
T->T*F,,
T->T*F,)
项目集218:
T->T/F,%
T->T/F,/
T->T/F,*
T->T/F,-
T->T/F,+
T->T/F,,
T->T/F,)
项目集219:
T->T%F,%
T->T%F,/
T->T%F,*
T->T%F,-
T->T%F,+
T->T%F,,
T->T%F,)
项目集220:
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],,
F->array[E.],)
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集221:
function_call->id(function_call_list),%
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
function_call->id(function_call_list),)
项目集222:
F->array[E],%
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],)
项目集223:
define->typearray[num].;,scanf
define->typearray[num].;,printf
define->typearray[num].;,if
define->typearray[num].;,while
define->typearray[num].;,for
define->typearray[num].;,return
define->typearray[num].;,array
define->typearray[num].;,string
define->typearray[num].;,num
define->typearray[num].;,%
define->typearray[num].;,/
define->typearray[num].;,*
define->typearray[num].;,-
define->typearray[num].;,+
define->typearray[num].;,char
define->typearray[num].;,double
define->typearray[num].;,int
define->typearray[num].;,}
define->typearray[num].;,{
define->typearray[num].;,(
define->typearray[num].;,id
define->typearray[num].={nums};,scanf
define->typearray[num].={nums};,printf
define->typearray[num].={nums};,if
define->typearray[num].={nums};,while
define->typearray[num].={nums};,for
define->typearray[num].={nums};,return
define->typearray[num].={nums};,array
define->typearray[num].={nums};,string
define->typearray[num].={nums};,num
define->typearray[num].={nums};,%
define->typearray[num].={nums};,/
define->typearray[num].={nums};,*
define->typearray[num].={nums};,-
define->typearray[num].={nums};,+
define->typearray[num].={nums};,char
define->typearray[num].={nums};,double
define->typearray[num].={nums};,int
define->typearray[num].={nums};,}
define->typearray[num].={nums};,{
define->typearray[num].={nums};,(
define->typearray[num].={nums};,id
项目集224:
define->typearray[]=.{nums};,scanf
define->typearray[]=.{nums};,printf
define->typearray[]=.{nums};,if
define->typearray[]=.{nums};,while
define->typearray[]=.{nums};,for
define->typearray[]=.{nums};,return
define->typearray[]=.{nums};,array
define->typearray[]=.{nums};,string
define->typearray[]=.{nums};,num
define->typearray[]=.{nums};,%
define->typearray[]=.{nums};,/
define->typearray[]=.{nums};,*
define->typearray[]=.{nums};,-
define->typearray[]=.{nums};,+
define->typearray[]=.{nums};,char
define->typearray[]=.{nums};,double
define->typearray[]=.{nums};,int
define->typearray[]=.{nums};,}
define->typearray[]=.{nums};,{
define->typearray[]=.{nums};,(
define->typearray[]=.{nums};,id
define->typearray[]=.{string};,scanf
define->typearray[]=.{string};,printf
define->typearray[]=.{string};,if
define->typearray[]=.{string};,while
define->typearray[]=.{string};,for
define->typearray[]=.{string};,return
define->typearray[]=.{string};,array
define->typearray[]=.{string};,string
define->typearray[]=.{string};,num
define->typearray[]=.{string};,%
define->typearray[]=.{string};,/
define->typearray[]=.{string};,*
define->typearray[]=.{string};,-
define->typearray[]=.{string};,+
define->typearray[]=.{string};,char
define->typearray[]=.{string};,double
define->typearray[]=.{string};,int
define->typearray[]=.{string};,}
define->typearray[]=.{string};,{
define->typearray[]=.{string};,(
define->typearray[]=.{string};,id
项目集225:
define->typeid_name=E;,scanf
define->typeid_name=E;,printf
define->typeid_name=E;,if
define->typeid_name=E;,while
define->typeid_name=E;,for
define->typeid_name=E;,return
define->typeid_name=E;,array
define->typeid_name=E;,string
define->typeid_name=E;,num
define->typeid_name=E;,%
define->typeid_name=E;,/
define->typeid_name=E;,*
define->typeid_name=E;,-
define->typeid_name=E;,+
define->typeid_name=E;,char
define->typeid_name=E;,double
define->typeid_name=E;,int
define->typeid_name=E;,}
define->typeid_name=E;,{
define->typeid_name=E;,(
define->typeid_name=E;,id
项目集226:
function_call->id(),]
function_call->id(),%
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
项目集227:
function_call->id(function_call_list.),]
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
项目集228:
F->(E),]
F->(E),%
F->(E),/
F->(E),*
F->(E),-
F->(E),+
项目集229:
T->T.%F,]
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,]
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E+T,]
E->E+T,-
E->E+T,+
项目集230:
T->T.%F,]
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,]
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E-T,]
E->E-T,-
E->E-T,+
项目集231:
set_value->array[E]=.E,;
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集232:
T->T*F,]
T->T*F,%
T->T*F,/
T->T*F,*
T->T*F,-
T->T*F,+
项目集233:
T->T/F,]
T->T/F,%
T->T/F,/
T->T/F,*
T->T/F,-
T->T/F,+
项目集234:
T->T%F,]
T->T%F,%
T->T%F,/
T->T%F,*
T->T%F,-
T->T%F,+
项目集235:
F->array[E.],]
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集236:
F->array[E],%
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],;
项目集237:
set_value->array[E.]=E,;
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集238:
F->id,!=
F->id,==
F->id,>
F->id,<
F->id,<=
F->id,>=
F->id,%
F->id,/
F->id,*
F->id,-
F->id,+
F->id,;
function_call->id.(function_call_list),!=
function_call->id.(function_call_list),==
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),!=
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目集239:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),!=
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集240:
F->function_call,!=
F->function_call,==
F->function_call,>
F->function_call,<
F->function_call,<=
F->function_call,>=
F->function_call,%
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
F->function_call,;
项目集241:
bool_expression->F,;
T->F,!=
T->F,==
T->F,>
T->F,<
T->F,<=
T->F,>=
T->F,%
T->F,/
T->F,*
T->F,-
T->F,+
项目集242:
F->num,!=
F->num,==
F->num,>
F->num,<
F->num,<=
F->num,>=
F->num,%
F->num,/
F->num,*
F->num,-
F->num,+
F->num,;
项目集243:
F->string,!=
F->string,==
F->string,>
F->string,<
F->string,<=
F->string,>=
F->string,%
F->string,/
F->string,*
F->string,-
F->string,+
F->string,;
项目集244:
F->array.[E],!=
F->array.[E],==
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目集245:
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,id
项目集246:
op->.!=,array
op->.!=,string
op->.!=,num
op->.!=,%
op->.!=,/
op->.!=,*
op->.!=,-
op->.!=,+
op->.!=,(
op->.!=,id
op->.==,array
op->.==,string
op->.==,num
op->.==,%
op->.==,/
op->.==,*
op->.==,-
op->.==,+
op->.==,(
op->.==,id
op->.>,array
op->.>,string
op->.>,num
op->.>,%
op->.>,/
op->.>,*
op->.>,-
op->.>,+
op->.>,(
op->.>,id
op->.<,array
op->.<,string
op->.<,num
op->.<,%
op->.<,/
op->.<,*
op->.<,-
op->.<,+
op->.<,(
op->.<,id
op->.<=,array
op->.<=,string
op->.<=,num
op->.<=,%
op->.<=,/
op->.<=,*
op->.<=,-
op->.<=,+
op->.<=,(
op->.<=,id
op->.>=,array
op->.>=,string
op->.>=,num
op->.>=,%
op->.>=,/
op->.>=,*
op->.>=,-
op->.>=,+
op->.>=,(
op->.>=,id
bool_expression->G.opH,;
项目集247:
function_call->id(),!=
function_call->id(),==
function_call->id(),>
function_call->id(),<
function_call->id(),<=
function_call->id(),>=
function_call->id(),%
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
function_call->id(),)
项目集248:
function_call->id(function_call_list.),!=
function_call->id(function_call_list.),==
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),)
项目集249:
F->(E),!=
F->(E),==
F->(E),>
F->(E),<
F->(E),<=
F->(E),>=
F->(E),%
F->(E),/
F->(E),*
F->(E),-
F->(E),+
F->(E),)
项目集250:
F->id,!=
F->id,==
F->id,>
F->id,<
F->id,<=
F->id,>=
F->id,%
F->id,/
F->id,*
F->id,-
F->id,+
function_call->id.(function_call_list),!=
function_call->id.(function_call_list),==
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(),!=
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
项目集251:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),!=
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集252:
F->function_call,!=
F->function_call,==
F->function_call,>
F->function_call,<
F->function_call,<=
F->function_call,>=
F->function_call,%
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
项目集253:
T->T.%F,!=
T->T.%F,==
T->T.%F,>
T->T.%F,<
T->T.%F,<=
T->T.%F,>=
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,!=
T->T./F,==
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,!=
T->T.*F,==
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E+T,!=
E->E+T,==
E->E+T,>
E->E+T,<
E->E+T,<=
E->E+T,>=
E->E+T,-
E->E+T,+
项目集254:
T->F,!=
T->F,==
T->F,>
T->F,<
T->F,<=
T->F,>=
T->F,%
T->F,/
T->F,*
T->F,-
T->F,+
项目集255:
F->num,!=
F->num,==
F->num,>
F->num,<
F->num,<=
F->num,>=
F->num,%
F->num,/
F->num,*
F->num,-
F->num,+
项目集256:
F->string,!=
F->string,==
F->string,>
F->string,<
F->string,<=
F->string,>=
F->string,%
F->string,/
F->string,*
F->string,-
F->string,+
项目集257:
F->array.[E],!=
F->array.[E],==
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
项目集258:
T->T.%F,!=
T->T.%F,==
T->T.%F,>
T->T.%F,<
T->T.%F,<=
T->T.%F,>=
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,!=
T->T./F,==
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,!=
T->T.*F,==
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E-T,!=
E->E-T,==
E->E-T,>
E->E-T,<
E->E-T,<=
E->E-T,>=
E->E-T,-
E->E-T,+
项目集259:
T->T*F,!=
T->T*F,==
T->T*F,>
T->T*F,<
T->T*F,<=
T->T*F,>=
T->T*F,%
T->T*F,/
T->T*F,*
T->T*F,-
T->T*F,+
项目集260:
T->T/F,!=
T->T/F,==
T->T/F,>
T->T/F,<
T->T/F,<=
T->T/F,>=
T->T/F,%
T->T/F,/
T->T/F,*
T->T/F,-
T->T/F,+
项目集261:
T->T%F,!=
T->T%F,==
T->T%F,>
T->T%F,<
T->T%F,<=
T->T%F,>=
T->T%F,%
T->T%F,/
T->T%F,*
T->T%F,-
T->T%F,+
项目集262:
F->array[E.],!=
F->array[E.],==
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],)
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集263:
whilesentence->sentence,scanf
whilesentence->sentence,printf
whilesentence->sentence,if
whilesentence->sentence,while
whilesentence->sentence,for
whilesentence->sentence,return
whilesentence->sentence,array
whilesentence->sentence,string
whilesentence->sentence,num
whilesentence->sentence,%
whilesentence->sentence,/
whilesentence->sentence,*
whilesentence->sentence,-
whilesentence->sentence,+
whilesentence->sentence,char
whilesentence->sentence,double
whilesentence->sentence,int
whilesentence->sentence,}
whilesentence->sentence,{
whilesentence->sentence,(
whilesentence->sentence,id
项目集264:
while_expression->while1(bool_expression)whilesentence,scanf
while_expression->while1(bool_expression)whilesentence,printf
while_expression->while1(bool_expression)whilesentence,if
while_expression->while1(bool_expression)whilesentence,while
while_expression->while1(bool_expression)whilesentence,for
while_expression->while1(bool_expression)whilesentence,return
while_expression->while1(bool_expression)whilesentence,array
while_expression->while1(bool_expression)whilesentence,string
while_expression->while1(bool_expression)whilesentence,num
while_expression->while1(bool_expression)whilesentence,%
while_expression->while1(bool_expression)whilesentence,/
while_expression->while1(bool_expression)whilesentence,*
while_expression->while1(bool_expression)whilesentence,-
while_expression->while1(bool_expression)whilesentence,+
while_expression->while1(bool_expression)whilesentence,char
while_expression->while1(bool_expression)whilesentence,double
while_expression->while1(bool_expression)whilesentence,int
while_expression->while1(bool_expression)whilesentence,}
while_expression->while1(bool_expression)whilesentence,{
while_expression->while1(bool_expression)whilesentence,(
while_expression->while1(bool_expression)whilesentence,id
项目集265:
H->E,)
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集266:
bool_expression->GopH,)
项目集267:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->{.},scanf
sentence->{.},printf
sentence->{.},else
sentence->{.},if
sentence->{.},while
sentence->{.},for
sentence->{.},return
sentence->{.},array
sentence->{.},string
sentence->{.},num
sentence->{.},%
sentence->{.},/
sentence->{.},*
sentence->{.},-
sentence->{.},+
sentence->{.},char
sentence->{.},double
sentence->{.},int
sentence->{.},}
sentence->{.},{
sentence->{.},(
sentence->{.},id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->{.block},scanf
sentence->{.block},printf
sentence->{.block},else
sentence->{.block},if
sentence->{.block},while
sentence->{.block},for
sentence->{.block},return
sentence->{.block},array
sentence->{.block},string
sentence->{.block},num
sentence->{.block},%
sentence->{.block},/
sentence->{.block},*
sentence->{.block},-
sentence->{.block},+
sentence->{.block},char
sentence->{.block},double
sentence->{.block},int
sentence->{.block},}
sentence->{.block},{
sentence->{.block},(
sentence->{.block},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集268:
define->type.array[num];,scanf
define->type.array[num];,printf
define->type.array[num];,else
define->type.array[num];,if
define->type.array[num];,while
define->type.array[num];,for
define->type.array[num];,return
define->type.array[num];,array
define->type.array[num];,string
define->type.array[num];,num
define->type.array[num];,%
define->type.array[num];,/
define->type.array[num];,*
define->type.array[num];,-
define->type.array[num];,+
define->type.array[num];,char
define->type.array[num];,double
define->type.array[num];,int
define->type.array[num];,}
define->type.array[num];,{
define->type.array[num];,(
define->type.array[num];,id
define->type.array[]={nums};,scanf
define->type.array[]={nums};,printf
define->type.array[]={nums};,else
define->type.array[]={nums};,if
define->type.array[]={nums};,while
define->type.array[]={nums};,for
define->type.array[]={nums};,return
define->type.array[]={nums};,array
define->type.array[]={nums};,string
define->type.array[]={nums};,num
define->type.array[]={nums};,%
define->type.array[]={nums};,/
define->type.array[]={nums};,*
define->type.array[]={nums};,-
define->type.array[]={nums};,+
define->type.array[]={nums};,char
define->type.array[]={nums};,double
define->type.array[]={nums};,int
define->type.array[]={nums};,}
define->type.array[]={nums};,{
define->type.array[]={nums};,(
define->type.array[]={nums};,id
define->type.array[num]={nums};,scanf
define->type.array[num]={nums};,printf
define->type.array[num]={nums};,else
define->type.array[num]={nums};,if
define->type.array[num]={nums};,while
define->type.array[num]={nums};,for
define->type.array[num]={nums};,return
define->type.array[num]={nums};,array
define->type.array[num]={nums};,string
define->type.array[num]={nums};,num
define->type.array[num]={nums};,%
define->type.array[num]={nums};,/
define->type.array[num]={nums};,*
define->type.array[num]={nums};,-
define->type.array[num]={nums};,+
define->type.array[num]={nums};,char
define->type.array[num]={nums};,double
define->type.array[num]={nums};,int
define->type.array[num]={nums};,}
define->type.array[num]={nums};,{
define->type.array[num]={nums};,(
define->type.array[num]={nums};,id
define->type.array[]={string};,scanf
define->type.array[]={string};,printf
define->type.array[]={string};,else
define->type.array[]={string};,if
define->type.array[]={string};,while
define->type.array[]={string};,for
define->type.array[]={string};,return
define->type.array[]={string};,array
define->type.array[]={string};,string
define->type.array[]={string};,num
define->type.array[]={string};,%
define->type.array[]={string};,/
define->type.array[]={string};,*
define->type.array[]={string};,-
define->type.array[]={string};,+
define->type.array[]={string};,char
define->type.array[]={string};,double
define->type.array[]={string};,int
define->type.array[]={string};,}
define->type.array[]={string};,{
define->type.array[]={string};,(
define->type.array[]={string};,id
id_name->.id,=
id_name->.id,;
define->type.id_name;,scanf
define->type.id_name;,printf
define->type.id_name;,else
define->type.id_name;,if
define->type.id_name;,while
define->type.id_name;,for
define->type.id_name;,return
define->type.id_name;,array
define->type.id_name;,string
define->type.id_name;,num
define->type.id_name;,%
define->type.id_name;,/
define->type.id_name;,*
define->type.id_name;,-
define->type.id_name;,+
define->type.id_name;,char
define->type.id_name;,double
define->type.id_name;,int
define->type.id_name;,}
define->type.id_name;,{
define->type.id_name;,(
define->type.id_name;,id
define->type.id_name=E;,scanf
define->type.id_name=E;,printf
define->type.id_name=E;,else
define->type.id_name=E;,if
define->type.id_name=E;,while
define->type.id_name=E;,for
define->type.id_name=E;,return
define->type.id_name=E;,array
define->type.id_name=E;,string
define->type.id_name=E;,num
define->type.id_name=E;,%
define->type.id_name=E;,/
define->type.id_name=E;,*
define->type.id_name=E;,-
define->type.id_name=E;,+
define->type.id_name=E;,char
define->type.id_name=E;,double
define->type.id_name=E;,int
define->type.id_name=E;,}
define->type.id_name=E;,{
define->type.id_name=E;,(
define->type.id_name=E;,id
项目集269:
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
sentence->E.;,scanf
sentence->E.;,printf
sentence->E.;,else
sentence->E.;,if
sentence->E.;,while
sentence->E.;,for
sentence->E.;,return
sentence->E.;,array
sentence->E.;,string
sentence->E.;,num
sentence->E.;,%
sentence->E.;,/
sentence->E.;,*
sentence->E.;,-
sentence->E.;,+
sentence->E.;,char
sentence->E.;,double
sentence->E.;,int
sentence->E.;,}
sentence->E.;,{
sentence->E.;,(
sentence->E.;,id
项目集270:
ifsentence->sentence,else
if_expression->if(bool_expression)sentence,scanf
if_expression->if(bool_expression)sentence,printf
if_expression->if(bool_expression)sentence,if
if_expression->if(bool_expression)sentence,while
if_expression->if(bool_expression)sentence,for
if_expression->if(bool_expression)sentence,return
if_expression->if(bool_expression)sentence,array
if_expression->if(bool_expression)sentence,string
if_expression->if(bool_expression)sentence,num
if_expression->if(bool_expression)sentence,%
if_expression->if(bool_expression)sentence,/
if_expression->if(bool_expression)sentence,*
if_expression->if(bool_expression)sentence,-
if_expression->if(bool_expression)sentence,+
if_expression->if(bool_expression)sentence,char
if_expression->if(bool_expression)sentence,double
if_expression->if(bool_expression)sentence,int
if_expression->if(bool_expression)sentence,}
if_expression->if(bool_expression)sentence,{
if_expression->if(bool_expression)sentence,(
if_expression->if(bool_expression)sentence,id
项目集271:
sentence->return.E;,scanf
sentence->return.E;,printf
sentence->return.E;,else
sentence->return.E;,if
sentence->return.E;,while
sentence->return.E;,for
sentence->return.E;,return
sentence->return.E;,array
sentence->return.E;,string
sentence->return.E;,num
sentence->return.E;,%
sentence->return.E;,/
sentence->return.E;,*
sentence->return.E;,-
sentence->return.E;,+
sentence->return.E;,char
sentence->return.E;,double
sentence->return.E;,int
sentence->return.E;,}
sentence->return.E;,{
sentence->return.E;,(
sentence->return.E;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集272:
sentence->define,scanf
sentence->define,printf
sentence->define,else
sentence->define,if
sentence->define,while
sentence->define,for
sentence->define,return
sentence->define,array
sentence->define,string
sentence->define,num
sentence->define,%
sentence->define,/
sentence->define,*
sentence->define,-
sentence->define,+
sentence->define,char
sentence->define,double
sentence->define,int
sentence->define,}
sentence->define,{
sentence->define,(
sentence->define,id
项目集273:
sentence->set_value.;,scanf
sentence->set_value.;,printf
sentence->set_value.;,else
sentence->set_value.;,if
sentence->set_value.;,while
sentence->set_value.;,for
sentence->set_value.;,return
sentence->set_value.;,array
sentence->set_value.;,string
sentence->set_value.;,num
sentence->set_value.;,%
sentence->set_value.;,/
sentence->set_value.;,*
sentence->set_value.;,-
sentence->set_value.;,+
sentence->set_value.;,char
sentence->set_value.;,double
sentence->set_value.;,int
sentence->set_value.;,}
sentence->set_value.;,{
sentence->set_value.;,(
sentence->set_value.;,id
项目集274:
sentence->loop_expression,scanf
sentence->loop_expression,printf
sentence->loop_expression,else
sentence->loop_expression,if
sentence->loop_expression,while
sentence->loop_expression,for
sentence->loop_expression,return
sentence->loop_expression,array
sentence->loop_expression,string
sentence->loop_expression,num
sentence->loop_expression,%
sentence->loop_expression,/
sentence->loop_expression,*
sentence->loop_expression,-
sentence->loop_expression,+
sentence->loop_expression,char
sentence->loop_expression,double
sentence->loop_expression,int
sentence->loop_expression,}
sentence->loop_expression,{
sentence->loop_expression,(
sentence->loop_expression,id
项目集275:
sentence->while_expression,scanf
sentence->while_expression,printf
sentence->while_expression,else
sentence->while_expression,if
sentence->while_expression,while
sentence->while_expression,for
sentence->while_expression,return
sentence->while_expression,array
sentence->while_expression,string
sentence->while_expression,num
sentence->while_expression,%
sentence->while_expression,/
sentence->while_expression,*
sentence->while_expression,-
sentence->while_expression,+
sentence->while_expression,char
sentence->while_expression,double
sentence->while_expression,int
sentence->while_expression,}
sentence->while_expression,{
sentence->while_expression,(
sentence->while_expression,id
项目集276:
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,id
项目集277:
sentence->IncorDec.;,scanf
sentence->IncorDec.;,printf
sentence->IncorDec.;,else
sentence->IncorDec.;,if
sentence->IncorDec.;,while
sentence->IncorDec.;,for
sentence->IncorDec.;,return
sentence->IncorDec.;,array
sentence->IncorDec.;,string
sentence->IncorDec.;,num
sentence->IncorDec.;,%
sentence->IncorDec.;,/
sentence->IncorDec.;,*
sentence->IncorDec.;,-
sentence->IncorDec.;,+
sentence->IncorDec.;,char
sentence->IncorDec.;,double
sentence->IncorDec.;,int
sentence->IncorDec.;,}
sentence->IncorDec.;,{
sentence->IncorDec.;,(
sentence->IncorDec.;,id
项目集278:
while_expression->while1.(bool_expression)whilesentence,scanf
while_expression->while1.(bool_expression)whilesentence,printf
while_expression->while1.(bool_expression)whilesentence,else
while_expression->while1.(bool_expression)whilesentence,if
while_expression->while1.(bool_expression)whilesentence,while
while_expression->while1.(bool_expression)whilesentence,for
while_expression->while1.(bool_expression)whilesentence,return
while_expression->while1.(bool_expression)whilesentence,array
while_expression->while1.(bool_expression)whilesentence,string
while_expression->while1.(bool_expression)whilesentence,num
while_expression->while1.(bool_expression)whilesentence,%
while_expression->while1.(bool_expression)whilesentence,/
while_expression->while1.(bool_expression)whilesentence,*
while_expression->while1.(bool_expression)whilesentence,-
while_expression->while1.(bool_expression)whilesentence,+
while_expression->while1.(bool_expression)whilesentence,char
while_expression->while1.(bool_expression)whilesentence,double
while_expression->while1.(bool_expression)whilesentence,int
while_expression->while1.(bool_expression)whilesentence,}
while_expression->while1.(bool_expression)whilesentence,{
while_expression->while1.(bool_expression)whilesentence,(
while_expression->while1.(bool_expression)whilesentence,id
项目集279:
sentence->if_expression,scanf
sentence->if_expression,printf
sentence->if_expression,else
sentence->if_expression,if
sentence->if_expression,while
sentence->if_expression,for
sentence->if_expression,return
sentence->if_expression,array
sentence->if_expression,string
sentence->if_expression,num
sentence->if_expression,%
sentence->if_expression,/
sentence->if_expression,*
sentence->if_expression,-
sentence->if_expression,+
sentence->if_expression,char
sentence->if_expression,double
sentence->if_expression,int
sentence->if_expression,}
sentence->if_expression,{
sentence->if_expression,(
sentence->if_expression,id
项目集280:
if_expression->if.(bool_expression)ifsentenceelsesentence,scanf
if_expression->if.(bool_expression)ifsentenceelsesentence,printf
if_expression->if.(bool_expression)ifsentenceelsesentence,else
if_expression->if.(bool_expression)ifsentenceelsesentence,if
if_expression->if.(bool_expression)ifsentenceelsesentence,while
if_expression->if.(bool_expression)ifsentenceelsesentence,for
if_expression->if.(bool_expression)ifsentenceelsesentence,return
if_expression->if.(bool_expression)ifsentenceelsesentence,array
if_expression->if.(bool_expression)ifsentenceelsesentence,string
if_expression->if.(bool_expression)ifsentenceelsesentence,num
if_expression->if.(bool_expression)ifsentenceelsesentence,%
if_expression->if.(bool_expression)ifsentenceelsesentence,/
if_expression->if.(bool_expression)ifsentenceelsesentence,*
if_expression->if.(bool_expression)ifsentenceelsesentence,-
if_expression->if.(bool_expression)ifsentenceelsesentence,+
if_expression->if.(bool_expression)ifsentenceelsesentence,char
if_expression->if.(bool_expression)ifsentenceelsesentence,double
if_expression->if.(bool_expression)ifsentenceelsesentence,int
if_expression->if.(bool_expression)ifsentenceelsesentence,}
if_expression->if.(bool_expression)ifsentenceelsesentence,{
if_expression->if.(bool_expression)ifsentenceelsesentence,(
if_expression->if.(bool_expression)ifsentenceelsesentence,id
if_expression->if.(bool_expression)sentence,scanf
if_expression->if.(bool_expression)sentence,printf
if_expression->if.(bool_expression)sentence,else
if_expression->if.(bool_expression)sentence,if
if_expression->if.(bool_expression)sentence,while
if_expression->if.(bool_expression)sentence,for
if_expression->if.(bool_expression)sentence,return
if_expression->if.(bool_expression)sentence,array
if_expression->if.(bool_expression)sentence,string
if_expression->if.(bool_expression)sentence,num
if_expression->if.(bool_expression)sentence,%
if_expression->if.(bool_expression)sentence,/
if_expression->if.(bool_expression)sentence,*
if_expression->if.(bool_expression)sentence,-
if_expression->if.(bool_expression)sentence,+
if_expression->if.(bool_expression)sentence,char
if_expression->if.(bool_expression)sentence,double
if_expression->if.(bool_expression)sentence,int
if_expression->if.(bool_expression)sentence,}
if_expression->if.(bool_expression)sentence,{
if_expression->if.(bool_expression)sentence,(
if_expression->if.(bool_expression)sentence,id
项目集281:
if_expression->if(bool_expression)ifsentence.elsesentence,scanf
if_expression->if(bool_expression)ifsentence.elsesentence,printf
if_expression->if(bool_expression)ifsentence.elsesentence,if
if_expression->if(bool_expression)ifsentence.elsesentence,while
if_expression->if(bool_expression)ifsentence.elsesentence,for
if_expression->if(bool_expression)ifsentence.elsesentence,return
if_expression->if(bool_expression)ifsentence.elsesentence,array
if_expression->if(bool_expression)ifsentence.elsesentence,string
if_expression->if(bool_expression)ifsentence.elsesentence,num
if_expression->if(bool_expression)ifsentence.elsesentence,%
if_expression->if(bool_expression)ifsentence.elsesentence,/
if_expression->if(bool_expression)ifsentence.elsesentence,*
if_expression->if(bool_expression)ifsentence.elsesentence,-
if_expression->if(bool_expression)ifsentence.elsesentence,+
if_expression->if(bool_expression)ifsentence.elsesentence,char
if_expression->if(bool_expression)ifsentence.elsesentence,double
if_expression->if(bool_expression)ifsentence.elsesentence,int
if_expression->if(bool_expression)ifsentence.elsesentence,}
if_expression->if(bool_expression)ifsentence.elsesentence,{
if_expression->if(bool_expression)ifsentence.elsesentence,(
if_expression->if(bool_expression)ifsentence.elsesentence,id
项目集282:
sentence->inout_expression,scanf
sentence->inout_expression,printf
sentence->inout_expression,else
sentence->inout_expression,if
sentence->inout_expression,while
sentence->inout_expression,for
sentence->inout_expression,return
sentence->inout_expression,array
sentence->inout_expression,string
sentence->inout_expression,num
sentence->inout_expression,%
sentence->inout_expression,/
sentence->inout_expression,*
sentence->inout_expression,-
sentence->inout_expression,+
sentence->inout_expression,char
sentence->inout_expression,double
sentence->inout_expression,int
sentence->inout_expression,}
sentence->inout_expression,{
sentence->inout_expression,(
sentence->inout_expression,id
项目集283:
inout_expression->printf_expression,scanf
inout_expression->printf_expression,printf
inout_expression->printf_expression,else
inout_expression->printf_expression,if
inout_expression->printf_expression,while
inout_expression->printf_expression,for
inout_expression->printf_expression,return
inout_expression->printf_expression,array
inout_expression->printf_expression,string
inout_expression->printf_expression,num
inout_expression->printf_expression,%
inout_expression->printf_expression,/
inout_expression->printf_expression,*
inout_expression->printf_expression,-
inout_expression->printf_expression,+
inout_expression->printf_expression,char
inout_expression->printf_expression,double
inout_expression->printf_expression,int
inout_expression->printf_expression,}
inout_expression->printf_expression,{
inout_expression->printf_expression,(
inout_expression->printf_expression,id
项目集284:
inout_expression->scanf_expression,scanf
inout_expression->scanf_expression,printf
inout_expression->scanf_expression,else
inout_expression->scanf_expression,if
inout_expression->scanf_expression,while
inout_expression->scanf_expression,for
inout_expression->scanf_expression,return
inout_expression->scanf_expression,array
inout_expression->scanf_expression,string
inout_expression->scanf_expression,num
inout_expression->scanf_expression,%
inout_expression->scanf_expression,/
inout_expression->scanf_expression,*
inout_expression->scanf_expression,-
inout_expression->scanf_expression,+
inout_expression->scanf_expression,char
inout_expression->scanf_expression,double
inout_expression->scanf_expression,int
inout_expression->scanf_expression,}
inout_expression->scanf_expression,{
inout_expression->scanf_expression,(
inout_expression->scanf_expression,id
项目集285:
printf_expression->printf.(string,expressions);,scanf
printf_expression->printf.(string,expressions);,printf
printf_expression->printf.(string,expressions);,else
printf_expression->printf.(string,expressions);,if
printf_expression->printf.(string,expressions);,while
printf_expression->printf.(string,expressions);,for
printf_expression->printf.(string,expressions);,return
printf_expression->printf.(string,expressions);,array
printf_expression->printf.(string,expressions);,string
printf_expression->printf.(string,expressions);,num
printf_expression->printf.(string,expressions);,%
printf_expression->printf.(string,expressions);,/
printf_expression->printf.(string,expressions);,*
printf_expression->printf.(string,expressions);,-
printf_expression->printf.(string,expressions);,+
printf_expression->printf.(string,expressions);,char
printf_expression->printf.(string,expressions);,double
printf_expression->printf.(string,expressions);,int
printf_expression->printf.(string,expressions);,}
printf_expression->printf.(string,expressions);,{
printf_expression->printf.(string,expressions);,(
printf_expression->printf.(string,expressions);,id
printf_expression->printf.(string);,scanf
printf_expression->printf.(string);,printf
printf_expression->printf.(string);,else
printf_expression->printf.(string);,if
printf_expression->printf.(string);,while
printf_expression->printf.(string);,for
printf_expression->printf.(string);,return
printf_expression->printf.(string);,array
printf_expression->printf.(string);,string
printf_expression->printf.(string);,num
printf_expression->printf.(string);,%
printf_expression->printf.(string);,/
printf_expression->printf.(string);,*
printf_expression->printf.(string);,-
printf_expression->printf.(string);,+
printf_expression->printf.(string);,char
printf_expression->printf.(string);,double
printf_expression->printf.(string);,int
printf_expression->printf.(string);,}
printf_expression->printf.(string);,{
printf_expression->printf.(string);,(
printf_expression->printf.(string);,id
项目集286:
scanf_expression->scanf.(string);,scanf
scanf_expression->scanf.(string);,printf
scanf_expression->scanf.(string);,else
scanf_expression->scanf.(string);,if
scanf_expression->scanf.(string);,while
scanf_expression->scanf.(string);,for
scanf_expression->scanf.(string);,return
scanf_expression->scanf.(string);,array
scanf_expression->scanf.(string);,string
scanf_expression->scanf.(string);,num
scanf_expression->scanf.(string);,%
scanf_expression->scanf.(string);,/
scanf_expression->scanf.(string);,*
scanf_expression->scanf.(string);,-
scanf_expression->scanf.(string);,+
scanf_expression->scanf.(string);,char
scanf_expression->scanf.(string);,double
scanf_expression->scanf.(string);,int
scanf_expression->scanf.(string);,}
scanf_expression->scanf.(string);,{
scanf_expression->scanf.(string);,(
scanf_expression->scanf.(string);,id
scanf_expression->scanf.(string,expressions);,scanf
scanf_expression->scanf.(string,expressions);,printf
scanf_expression->scanf.(string,expressions);,else
scanf_expression->scanf.(string,expressions);,if
scanf_expression->scanf.(string,expressions);,while
scanf_expression->scanf.(string,expressions);,for
scanf_expression->scanf.(string,expressions);,return
scanf_expression->scanf.(string,expressions);,array
scanf_expression->scanf.(string,expressions);,string
scanf_expression->scanf.(string,expressions);,num
scanf_expression->scanf.(string,expressions);,%
scanf_expression->scanf.(string,expressions);,/
scanf_expression->scanf.(string,expressions);,*
scanf_expression->scanf.(string,expressions);,-
scanf_expression->scanf.(string,expressions);,+
scanf_expression->scanf.(string,expressions);,char
scanf_expression->scanf.(string,expressions);,double
scanf_expression->scanf.(string,expressions);,int
scanf_expression->scanf.(string,expressions);,}
scanf_expression->scanf.(string,expressions);,{
scanf_expression->scanf.(string,expressions);,(
scanf_expression->scanf.(string,expressions);,id
项目集287:
printf_expression->printf(string);,scanf
printf_expression->printf(string);,printf
printf_expression->printf(string);,if
printf_expression->printf(string);,while
printf_expression->printf(string);,for
printf_expression->printf(string);,return
printf_expression->printf(string);,array
printf_expression->printf(string);,string
printf_expression->printf(string);,num
printf_expression->printf(string);,%
printf_expression->printf(string);,/
printf_expression->printf(string);,*
printf_expression->printf(string);,-
printf_expression->printf(string);,+
printf_expression->printf(string);,char
printf_expression->printf(string);,double
printf_expression->printf(string);,int
printf_expression->printf(string);,}
printf_expression->printf(string);,{
printf_expression->printf(string);,(
printf_expression->printf(string);,id
项目集288:
getaddr->id,,
getaddr->id,)
项目集289:
printf_expression->printf(string,expressions.);,scanf
printf_expression->printf(string,expressions.);,printf
printf_expression->printf(string,expressions.);,if
printf_expression->printf(string,expressions.);,while
printf_expression->printf(string,expressions.);,for
printf_expression->printf(string,expressions.);,return
printf_expression->printf(string,expressions.);,array
printf_expression->printf(string,expressions.);,string
printf_expression->printf(string,expressions.);,num
printf_expression->printf(string,expressions.);,%
printf_expression->printf(string,expressions.);,/
printf_expression->printf(string,expressions.);,*
printf_expression->printf(string,expressions.);,-
printf_expression->printf(string,expressions.);,+
printf_expression->printf(string,expressions.);,char
printf_expression->printf(string,expressions.);,double
printf_expression->printf(string,expressions.);,int
printf_expression->printf(string,expressions.);,}
printf_expression->printf(string,expressions.);,{
printf_expression->printf(string,expressions.);,(
printf_expression->printf(string,expressions.);,id
项目集290:
expressions->getaddr,)
expressions->getaddr.,expressions,)
项目集291:
getaddr->&.id,,
getaddr->&.id,)
项目集292:
scanf_expression->scanf(string);,scanf
scanf_expression->scanf(string);,printf
scanf_expression->scanf(string);,if
scanf_expression->scanf(string);,while
scanf_expression->scanf(string);,for
scanf_expression->scanf(string);,return
scanf_expression->scanf(string);,array
scanf_expression->scanf(string);,string
scanf_expression->scanf(string);,num
scanf_expression->scanf(string);,%
scanf_expression->scanf(string);,/
scanf_expression->scanf(string);,*
scanf_expression->scanf(string);,-
scanf_expression->scanf(string);,+
scanf_expression->scanf(string);,char
scanf_expression->scanf(string);,double
scanf_expression->scanf(string);,int
scanf_expression->scanf(string);,}
scanf_expression->scanf(string);,{
scanf_expression->scanf(string);,(
scanf_expression->scanf(string);,id
项目集293:
scanf_expression->scanf(string,expressions.);,scanf
scanf_expression->scanf(string,expressions.);,printf
scanf_expression->scanf(string,expressions.);,if
scanf_expression->scanf(string,expressions.);,while
scanf_expression->scanf(string,expressions.);,for
scanf_expression->scanf(string,expressions.);,return
scanf_expression->scanf(string,expressions.);,array
scanf_expression->scanf(string,expressions.);,string
scanf_expression->scanf(string,expressions.);,num
scanf_expression->scanf(string,expressions.);,%
scanf_expression->scanf(string,expressions.);,/
scanf_expression->scanf(string,expressions.);,*
scanf_expression->scanf(string,expressions.);,-
scanf_expression->scanf(string,expressions.);,+
scanf_expression->scanf(string,expressions.);,char
scanf_expression->scanf(string,expressions.);,double
scanf_expression->scanf(string,expressions.);,int
scanf_expression->scanf(string,expressions.);,}
scanf_expression->scanf(string,expressions.);,{
scanf_expression->scanf(string,expressions.);,(
scanf_expression->scanf(string,expressions.);,id
项目集294:
function_call->id(function_call_list),%
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
function_call->id(function_call_list),,
function_call->id(function_call_list),)
项目集295:
F->array[E],%
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],,
F->array[E],)
项目集296:
define->typearray[num];,scanf
define->typearray[num];,printf
define->typearray[num];,if
define->typearray[num];,while
define->typearray[num];,for
define->typearray[num];,return
define->typearray[num];,array
define->typearray[num];,string
define->typearray[num];,num
define->typearray[num];,%
define->typearray[num];,/
define->typearray[num];,*
define->typearray[num];,-
define->typearray[num];,+
define->typearray[num];,char
define->typearray[num];,double
define->typearray[num];,int
define->typearray[num];,}
define->typearray[num];,{
define->typearray[num];,(
define->typearray[num];,id
项目集297:
define->typearray[num]=.{nums};,scanf
define->typearray[num]=.{nums};,printf
define->typearray[num]=.{nums};,if
define->typearray[num]=.{nums};,while
define->typearray[num]=.{nums};,for
define->typearray[num]=.{nums};,return
define->typearray[num]=.{nums};,array
define->typearray[num]=.{nums};,string
define->typearray[num]=.{nums};,num
define->typearray[num]=.{nums};,%
define->typearray[num]=.{nums};,/
define->typearray[num]=.{nums};,*
define->typearray[num]=.{nums};,-
define->typearray[num]=.{nums};,+
define->typearray[num]=.{nums};,char
define->typearray[num]=.{nums};,double
define->typearray[num]=.{nums};,int
define->typearray[num]=.{nums};,}
define->typearray[num]=.{nums};,{
define->typearray[num]=.{nums};,(
define->typearray[num]=.{nums};,id
项目集298:
nums->.num,}
nums->.num,nums,}
define->typearray[]={.nums};,scanf
define->typearray[]={.nums};,printf
define->typearray[]={.nums};,if
define->typearray[]={.nums};,while
define->typearray[]={.nums};,for
define->typearray[]={.nums};,return
define->typearray[]={.nums};,array
define->typearray[]={.nums};,string
define->typearray[]={.nums};,num
define->typearray[]={.nums};,%
define->typearray[]={.nums};,/
define->typearray[]={.nums};,*
define->typearray[]={.nums};,-
define->typearray[]={.nums};,+
define->typearray[]={.nums};,char
define->typearray[]={.nums};,double
define->typearray[]={.nums};,int
define->typearray[]={.nums};,}
define->typearray[]={.nums};,{
define->typearray[]={.nums};,(
define->typearray[]={.nums};,id
define->typearray[]={.string};,scanf
define->typearray[]={.string};,printf
define->typearray[]={.string};,if
define->typearray[]={.string};,while
define->typearray[]={.string};,for
define->typearray[]={.string};,return
define->typearray[]={.string};,array
define->typearray[]={.string};,string
define->typearray[]={.string};,num
define->typearray[]={.string};,%
define->typearray[]={.string};,/
define->typearray[]={.string};,*
define->typearray[]={.string};,-
define->typearray[]={.string};,+
define->typearray[]={.string};,char
define->typearray[]={.string};,double
define->typearray[]={.string};,int
define->typearray[]={.string};,}
define->typearray[]={.string};,{
define->typearray[]={.string};,(
define->typearray[]={.string};,id
项目集299:
function_call->id(function_call_list),]
function_call->id(function_call_list),%
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
项目集300:
set_value->array[E]=E,;
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集301:
F->array[E],]
F->array[E],%
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
项目集302:
set_value->array[E].=E,;
项目集303:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),!=
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),!=
function_call->id(.),==
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集304:
F->(E.),!=
F->(E.),==
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),;
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集305:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],!=
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集306:
Dec_expression->.id--,)
Inc_expression->.id++,)
IncorDec->.Dec_expression,)
IncorDec->.Inc_expression,)
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,id
项目集307:
H->.E,;
bool_expression->Gop.H,;
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集308:
function_call->id(function_call_list),!=
function_call->id(function_call_list),==
function_call->id(function_call_list),>
function_call->id(function_call_list),<
function_call->id(function_call_list),<=
function_call->id(function_call_list),>=
function_call->id(function_call_list),%
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
function_call->id(function_call_list),)
项目集309:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),!=
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),!=
function_call->id(.),==
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目集310:
F->(E.),!=
F->(E.),==
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集311:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],!=
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->.array[E],]
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集312:
F->array[E],!=
F->array[E],==
F->array[E],>
F->array[E],<
F->array[E],<=
F->array[E],>=
F->array[E],%
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],)
项目集313:
sentence->{block.},scanf
sentence->{block.},printf
sentence->{block.},else
sentence->{block.},if
sentence->{block.},while
sentence->{block.},for
sentence->{block.},return
sentence->{block.},array
sentence->{block.},string
sentence->{block.},num
sentence->{block.},%
sentence->{block.},/
sentence->{block.},*
sentence->{block.},-
sentence->{block.},+
sentence->{block.},char
sentence->{block.},double
sentence->{block.},int
sentence->{block.},}
sentence->{block.},{
sentence->{block.},(
sentence->{block.},id
项目集314:
sentence->{},scanf
sentence->{},printf
sentence->{},else
sentence->{},if
sentence->{},while
sentence->{},for
sentence->{},return
sentence->{},array
sentence->{},string
sentence->{},num
sentence->{},%
sentence->{},/
sentence->{},*
sentence->{},-
sentence->{},+
sentence->{},char
sentence->{},double
sentence->{},int
sentence->{},}
sentence->{},{
sentence->{},(
sentence->{},id
项目集315:
define->typearray.[num];,scanf
define->typearray.[num];,printf
define->typearray.[num];,else
define->typearray.[num];,if
define->typearray.[num];,while
define->typearray.[num];,for
define->typearray.[num];,return
define->typearray.[num];,array
define->typearray.[num];,string
define->typearray.[num];,num
define->typearray.[num];,%
define->typearray.[num];,/
define->typearray.[num];,*
define->typearray.[num];,-
define->typearray.[num];,+
define->typearray.[num];,char
define->typearray.[num];,double
define->typearray.[num];,int
define->typearray.[num];,}
define->typearray.[num];,{
define->typearray.[num];,(
define->typearray.[num];,id
define->typearray.[]={nums};,scanf
define->typearray.[]={nums};,printf
define->typearray.[]={nums};,else
define->typearray.[]={nums};,if
define->typearray.[]={nums};,while
define->typearray.[]={nums};,for
define->typearray.[]={nums};,return
define->typearray.[]={nums};,array
define->typearray.[]={nums};,string
define->typearray.[]={nums};,num
define->typearray.[]={nums};,%
define->typearray.[]={nums};,/
define->typearray.[]={nums};,*
define->typearray.[]={nums};,-
define->typearray.[]={nums};,+
define->typearray.[]={nums};,char
define->typearray.[]={nums};,double
define->typearray.[]={nums};,int
define->typearray.[]={nums};,}
define->typearray.[]={nums};,{
define->typearray.[]={nums};,(
define->typearray.[]={nums};,id
define->typearray.[num]={nums};,scanf
define->typearray.[num]={nums};,printf
define->typearray.[num]={nums};,else
define->typearray.[num]={nums};,if
define->typearray.[num]={nums};,while
define->typearray.[num]={nums};,for
define->typearray.[num]={nums};,return
define->typearray.[num]={nums};,array
define->typearray.[num]={nums};,string
define->typearray.[num]={nums};,num
define->typearray.[num]={nums};,%
define->typearray.[num]={nums};,/
define->typearray.[num]={nums};,*
define->typearray.[num]={nums};,-
define->typearray.[num]={nums};,+
define->typearray.[num]={nums};,char
define->typearray.[num]={nums};,double
define->typearray.[num]={nums};,int
define->typearray.[num]={nums};,}
define->typearray.[num]={nums};,{
define->typearray.[num]={nums};,(
define->typearray.[num]={nums};,id
define->typearray.[]={string};,scanf
define->typearray.[]={string};,printf
define->typearray.[]={string};,else
define->typearray.[]={string};,if
define->typearray.[]={string};,while
define->typearray.[]={string};,for
define->typearray.[]={string};,return
define->typearray.[]={string};,array
define->typearray.[]={string};,string
define->typearray.[]={string};,num
define->typearray.[]={string};,%
define->typearray.[]={string};,/
define->typearray.[]={string};,*
define->typearray.[]={string};,-
define->typearray.[]={string};,+
define->typearray.[]={string};,char
define->typearray.[]={string};,double
define->typearray.[]={string};,int
define->typearray.[]={string};,}
define->typearray.[]={string};,{
define->typearray.[]={string};,(
define->typearray.[]={string};,id
项目集316:
define->typeid_name.;,scanf
define->typeid_name.;,printf
define->typeid_name.;,else
define->typeid_name.;,if
define->typeid_name.;,while
define->typeid_name.;,for
define->typeid_name.;,return
define->typeid_name.;,array
define->typeid_name.;,string
define->typeid_name.;,num
define->typeid_name.;,%
define->typeid_name.;,/
define->typeid_name.;,*
define->typeid_name.;,-
define->typeid_name.;,+
define->typeid_name.;,char
define->typeid_name.;,double
define->typeid_name.;,int
define->typeid_name.;,}
define->typeid_name.;,{
define->typeid_name.;,(
define->typeid_name.;,id
define->typeid_name.=E;,scanf
define->typeid_name.=E;,printf
define->typeid_name.=E;,else
define->typeid_name.=E;,if
define->typeid_name.=E;,while
define->typeid_name.=E;,for
define->typeid_name.=E;,return
define->typeid_name.=E;,array
define->typeid_name.=E;,string
define->typeid_name.=E;,num
define->typeid_name.=E;,%
define->typeid_name.=E;,/
define->typeid_name.=E;,*
define->typeid_name.=E;,-
define->typeid_name.=E;,+
define->typeid_name.=E;,char
define->typeid_name.=E;,double
define->typeid_name.=E;,int
define->typeid_name.=E;,}
define->typeid_name.=E;,{
define->typeid_name.=E;,(
define->typeid_name.=E;,id
项目集317:
sentence->E;,scanf
sentence->E;,printf
sentence->E;,else
sentence->E;,if
sentence->E;,while
sentence->E;,for
sentence->E;,return
sentence->E;,array
sentence->E;,string
sentence->E;,num
sentence->E;,%
sentence->E;,/
sentence->E;,*
sentence->E;,-
sentence->E;,+
sentence->E;,char
sentence->E;,double
sentence->E;,int
sentence->E;,}
sentence->E;,{
sentence->E;,(
sentence->E;,id
项目集318:
sentence->returnE.;,scanf
sentence->returnE.;,printf
sentence->returnE.;,else
sentence->returnE.;,if
sentence->returnE.;,while
sentence->returnE.;,for
sentence->returnE.;,return
sentence->returnE.;,array
sentence->returnE.;,string
sentence->returnE.;,num
sentence->returnE.;,%
sentence->returnE.;,/
sentence->returnE.;,*
sentence->returnE.;,-
sentence->returnE.;,+
sentence->returnE.;,char
sentence->returnE.;,double
sentence->returnE.;,int
sentence->returnE.;,}
sentence->returnE.;,{
sentence->returnE.;,(
sentence->returnE.;,id
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集319:
sentence->set_value;,scanf
sentence->set_value;,printf
sentence->set_value;,else
sentence->set_value;,if
sentence->set_value;,while
sentence->set_value;,for
sentence->set_value;,return
sentence->set_value;,array
sentence->set_value;,string
sentence->set_value;,num
sentence->set_value;,%
sentence->set_value;,/
sentence->set_value;,*
sentence->set_value;,-
sentence->set_value;,+
sentence->set_value;,char
sentence->set_value;,double
sentence->set_value;,int
sentence->set_value;,}
sentence->set_value;,{
sentence->set_value;,(
sentence->set_value;,id
项目集320:
for_set_value->.set_value,;
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,id
set_value->.array[E]=E,;
set_value->.id=E,;
项目集321:
sentence->IncorDec;,scanf
sentence->IncorDec;,printf
sentence->IncorDec;,else
sentence->IncorDec;,if
sentence->IncorDec;,while
sentence->IncorDec;,for
sentence->IncorDec;,return
sentence->IncorDec;,array
sentence->IncorDec;,string
sentence->IncorDec;,num
sentence->IncorDec;,%
sentence->IncorDec;,/
sentence->IncorDec;,*
sentence->IncorDec;,-
sentence->IncorDec;,+
sentence->IncorDec;,char
sentence->IncorDec;,double
sentence->IncorDec;,int
sentence->IncorDec;,}
sentence->IncorDec;,{
sentence->IncorDec;,(
sentence->IncorDec;,id
项目集322:
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
while_expression->while1(.bool_expression)whilesentence,scanf
while_expression->while1(.bool_expression)whilesentence,printf
while_expression->while1(.bool_expression)whilesentence,else
while_expression->while1(.bool_expression)whilesentence,if
while_expression->while1(.bool_expression)whilesentence,while
while_expression->while1(.bool_expression)whilesentence,for
while_expression->while1(.bool_expression)whilesentence,return
while_expression->while1(.bool_expression)whilesentence,array
while_expression->while1(.bool_expression)whilesentence,string
while_expression->while1(.bool_expression)whilesentence,num
while_expression->while1(.bool_expression)whilesentence,%
while_expression->while1(.bool_expression)whilesentence,/
while_expression->while1(.bool_expression)whilesentence,*
while_expression->while1(.bool_expression)whilesentence,-
while_expression->while1(.bool_expression)whilesentence,+
while_expression->while1(.bool_expression)whilesentence,char
while_expression->while1(.bool_expression)whilesentence,double
while_expression->while1(.bool_expression)whilesentence,int
while_expression->while1(.bool_expression)whilesentence,}
while_expression->while1(.bool_expression)whilesentence,{
while_expression->while1(.bool_expression)whilesentence,(
while_expression->while1(.bool_expression)whilesentence,id
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集323:
if_expression->if(.bool_expression)ifsentenceelsesentence,scanf
if_expression->if(.bool_expression)ifsentenceelsesentence,printf
if_expression->if(.bool_expression)ifsentenceelsesentence,else
if_expression->if(.bool_expression)ifsentenceelsesentence,if
if_expression->if(.bool_expression)ifsentenceelsesentence,while
if_expression->if(.bool_expression)ifsentenceelsesentence,for
if_expression->if(.bool_expression)ifsentenceelsesentence,return
if_expression->if(.bool_expression)ifsentenceelsesentence,array
if_expression->if(.bool_expression)ifsentenceelsesentence,string
if_expression->if(.bool_expression)ifsentenceelsesentence,num
if_expression->if(.bool_expression)ifsentenceelsesentence,%
if_expression->if(.bool_expression)ifsentenceelsesentence,/
if_expression->if(.bool_expression)ifsentenceelsesentence,*
if_expression->if(.bool_expression)ifsentenceelsesentence,-
if_expression->if(.bool_expression)ifsentenceelsesentence,+
if_expression->if(.bool_expression)ifsentenceelsesentence,char
if_expression->if(.bool_expression)ifsentenceelsesentence,double
if_expression->if(.bool_expression)ifsentenceelsesentence,int
if_expression->if(.bool_expression)ifsentenceelsesentence,}
if_expression->if(.bool_expression)ifsentenceelsesentence,{
if_expression->if(.bool_expression)ifsentenceelsesentence,(
if_expression->if(.bool_expression)ifsentenceelsesentence,id
if_expression->if(.bool_expression)sentence,scanf
if_expression->if(.bool_expression)sentence,printf
if_expression->if(.bool_expression)sentence,else
if_expression->if(.bool_expression)sentence,if
if_expression->if(.bool_expression)sentence,while
if_expression->if(.bool_expression)sentence,for
if_expression->if(.bool_expression)sentence,return
if_expression->if(.bool_expression)sentence,array
if_expression->if(.bool_expression)sentence,string
if_expression->if(.bool_expression)sentence,num
if_expression->if(.bool_expression)sentence,%
if_expression->if(.bool_expression)sentence,/
if_expression->if(.bool_expression)sentence,*
if_expression->if(.bool_expression)sentence,-
if_expression->if(.bool_expression)sentence,+
if_expression->if(.bool_expression)sentence,char
if_expression->if(.bool_expression)sentence,double
if_expression->if(.bool_expression)sentence,int
if_expression->if(.bool_expression)sentence,}
if_expression->if(.bool_expression)sentence,{
if_expression->if(.bool_expression)sentence,(
if_expression->if(.bool_expression)sentence,id
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集324:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->if(bool_expression)ifsentenceelse.sentence,scanf
if_expression->if(bool_expression)ifsentenceelse.sentence,printf
if_expression->if(bool_expression)ifsentenceelse.sentence,if
if_expression->if(bool_expression)ifsentenceelse.sentence,while
if_expression->if(bool_expression)ifsentenceelse.sentence,for
if_expression->if(bool_expression)ifsentenceelse.sentence,return
if_expression->if(bool_expression)ifsentenceelse.sentence,array
if_expression->if(bool_expression)ifsentenceelse.sentence,string
if_expression->if(bool_expression)ifsentenceelse.sentence,num
if_expression->if(bool_expression)ifsentenceelse.sentence,%
if_expression->if(bool_expression)ifsentenceelse.sentence,/
if_expression->if(bool_expression)ifsentenceelse.sentence,*
if_expression->if(bool_expression)ifsentenceelse.sentence,-
if_expression->if(bool_expression)ifsentenceelse.sentence,+
if_expression->if(bool_expression)ifsentenceelse.sentence,char
if_expression->if(bool_expression)ifsentenceelse.sentence,double
if_expression->if(bool_expression)ifsentenceelse.sentence,int
if_expression->if(bool_expression)ifsentenceelse.sentence,}
if_expression->if(bool_expression)ifsentenceelse.sentence,{
if_expression->if(bool_expression)ifsentenceelse.sentence,(
if_expression->if(bool_expression)ifsentenceelse.sentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集325:
printf_expression->printf(.string,expressions);,scanf
printf_expression->printf(.string,expressions);,printf
printf_expression->printf(.string,expressions);,else
printf_expression->printf(.string,expressions);,if
printf_expression->printf(.string,expressions);,while
printf_expression->printf(.string,expressions);,for
printf_expression->printf(.string,expressions);,return
printf_expression->printf(.string,expressions);,array
printf_expression->printf(.string,expressions);,string
printf_expression->printf(.string,expressions);,num
printf_expression->printf(.string,expressions);,%
printf_expression->printf(.string,expressions);,/
printf_expression->printf(.string,expressions);,*
printf_expression->printf(.string,expressions);,-
printf_expression->printf(.string,expressions);,+
printf_expression->printf(.string,expressions);,char
printf_expression->printf(.string,expressions);,double
printf_expression->printf(.string,expressions);,int
printf_expression->printf(.string,expressions);,}
printf_expression->printf(.string,expressions);,{
printf_expression->printf(.string,expressions);,(
printf_expression->printf(.string,expressions);,id
printf_expression->printf(.string);,scanf
printf_expression->printf(.string);,printf
printf_expression->printf(.string);,else
printf_expression->printf(.string);,if
printf_expression->printf(.string);,while
printf_expression->printf(.string);,for
printf_expression->printf(.string);,return
printf_expression->printf(.string);,array
printf_expression->printf(.string);,string
printf_expression->printf(.string);,num
printf_expression->printf(.string);,%
printf_expression->printf(.string);,/
printf_expression->printf(.string);,*
printf_expression->printf(.string);,-
printf_expression->printf(.string);,+
printf_expression->printf(.string);,char
printf_expression->printf(.string);,double
printf_expression->printf(.string);,int
printf_expression->printf(.string);,}
printf_expression->printf(.string);,{
printf_expression->printf(.string);,(
printf_expression->printf(.string);,id
项目集326:
scanf_expression->scanf(.string);,scanf
scanf_expression->scanf(.string);,printf
scanf_expression->scanf(.string);,else
scanf_expression->scanf(.string);,if
scanf_expression->scanf(.string);,while
scanf_expression->scanf(.string);,for
scanf_expression->scanf(.string);,return
scanf_expression->scanf(.string);,array
scanf_expression->scanf(.string);,string
scanf_expression->scanf(.string);,num
scanf_expression->scanf(.string);,%
scanf_expression->scanf(.string);,/
scanf_expression->scanf(.string);,*
scanf_expression->scanf(.string);,-
scanf_expression->scanf(.string);,+
scanf_expression->scanf(.string);,char
scanf_expression->scanf(.string);,double
scanf_expression->scanf(.string);,int
scanf_expression->scanf(.string);,}
scanf_expression->scanf(.string);,{
scanf_expression->scanf(.string);,(
scanf_expression->scanf(.string);,id
scanf_expression->scanf(.string,expressions);,scanf
scanf_expression->scanf(.string,expressions);,printf
scanf_expression->scanf(.string,expressions);,else
scanf_expression->scanf(.string,expressions);,if
scanf_expression->scanf(.string,expressions);,while
scanf_expression->scanf(.string,expressions);,for
scanf_expression->scanf(.string,expressions);,return
scanf_expression->scanf(.string,expressions);,array
scanf_expression->scanf(.string,expressions);,string
scanf_expression->scanf(.string,expressions);,num
scanf_expression->scanf(.string,expressions);,%
scanf_expression->scanf(.string,expressions);,/
scanf_expression->scanf(.string,expressions);,*
scanf_expression->scanf(.string,expressions);,-
scanf_expression->scanf(.string,expressions);,+
scanf_expression->scanf(.string,expressions);,char
scanf_expression->scanf(.string,expressions);,double
scanf_expression->scanf(.string,expressions);,int
scanf_expression->scanf(.string,expressions);,}
scanf_expression->scanf(.string,expressions);,{
scanf_expression->scanf(.string,expressions);,(
scanf_expression->scanf(.string,expressions);,id
项目集327:
printf_expression->printf(string,expressions).;,scanf
printf_expression->printf(string,expressions).;,printf
printf_expression->printf(string,expressions).;,if
printf_expression->printf(string,expressions).;,while
printf_expression->printf(string,expressions).;,for
printf_expression->printf(string,expressions).;,return
printf_expression->printf(string,expressions).;,array
printf_expression->printf(string,expressions).;,string
printf_expression->printf(string,expressions).;,num
printf_expression->printf(string,expressions).;,%
printf_expression->printf(string,expressions).;,/
printf_expression->printf(string,expressions).;,*
printf_expression->printf(string,expressions).;,-
printf_expression->printf(string,expressions).;,+
printf_expression->printf(string,expressions).;,char
printf_expression->printf(string,expressions).;,double
printf_expression->printf(string,expressions).;,int
printf_expression->printf(string,expressions).;,}
printf_expression->printf(string,expressions).;,{
printf_expression->printf(string,expressions).;,(
printf_expression->printf(string,expressions).;,id
项目集328:
getaddr->.&id,,
getaddr->.&id,)
getaddr->.id,,
getaddr->.id,)
expressions->.getaddr,)
expressions->getaddr,.expressions,)
expressions->.getaddr,expressions,)
项目集329:
getaddr->&id,,
getaddr->&id,)
项目集330:
scanf_expression->scanf(string,expressions).;,scanf
scanf_expression->scanf(string,expressions).;,printf
scanf_expression->scanf(string,expressions).;,if
scanf_expression->scanf(string,expressions).;,while
scanf_expression->scanf(string,expressions).;,for
scanf_expression->scanf(string,expressions).;,return
scanf_expression->scanf(string,expressions).;,array
scanf_expression->scanf(string,expressions).;,string
scanf_expression->scanf(string,expressions).;,num
scanf_expression->scanf(string,expressions).;,%
scanf_expression->scanf(string,expressions).;,/
scanf_expression->scanf(string,expressions).;,*
scanf_expression->scanf(string,expressions).;,-
scanf_expression->scanf(string,expressions).;,+
scanf_expression->scanf(string,expressions).;,char
scanf_expression->scanf(string,expressions).;,double
scanf_expression->scanf(string,expressions).;,int
scanf_expression->scanf(string,expressions).;,}
scanf_expression->scanf(string,expressions).;,{
scanf_expression->scanf(string,expressions).;,(
scanf_expression->scanf(string,expressions).;,id
项目集331:
nums->.num,}
nums->.num,nums,}
define->typearray[num]={.nums};,scanf
define->typearray[num]={.nums};,printf
define->typearray[num]={.nums};,if
define->typearray[num]={.nums};,while
define->typearray[num]={.nums};,for
define->typearray[num]={.nums};,return
define->typearray[num]={.nums};,array
define->typearray[num]={.nums};,string
define->typearray[num]={.nums};,num
define->typearray[num]={.nums};,%
define->typearray[num]={.nums};,/
define->typearray[num]={.nums};,*
define->typearray[num]={.nums};,-
define->typearray[num]={.nums};,+
define->typearray[num]={.nums};,char
define->typearray[num]={.nums};,double
define->typearray[num]={.nums};,int
define->typearray[num]={.nums};,}
define->typearray[num]={.nums};,{
define->typearray[num]={.nums};,(
define->typearray[num]={.nums};,id
项目集332:
nums->num,}
nums->num.,nums,}
项目集333:
define->typearray[]={string.};,scanf
define->typearray[]={string.};,printf
define->typearray[]={string.};,if
define->typearray[]={string.};,while
define->typearray[]={string.};,for
define->typearray[]={string.};,return
define->typearray[]={string.};,array
define->typearray[]={string.};,string
define->typearray[]={string.};,num
define->typearray[]={string.};,%
define->typearray[]={string.};,/
define->typearray[]={string.};,*
define->typearray[]={string.};,-
define->typearray[]={string.};,+
define->typearray[]={string.};,char
define->typearray[]={string.};,double
define->typearray[]={string.};,int
define->typearray[]={string.};,}
define->typearray[]={string.};,{
define->typearray[]={string.};,(
define->typearray[]={string.};,id
项目集334:
define->typearray[]={nums.};,scanf
define->typearray[]={nums.};,printf
define->typearray[]={nums.};,if
define->typearray[]={nums.};,while
define->typearray[]={nums.};,for
define->typearray[]={nums.};,return
define->typearray[]={nums.};,array
define->typearray[]={nums.};,string
define->typearray[]={nums.};,num
define->typearray[]={nums.};,%
define->typearray[]={nums.};,/
define->typearray[]={nums.};,*
define->typearray[]={nums.};,-
define->typearray[]={nums.};,+
define->typearray[]={nums.};,char
define->typearray[]={nums.};,double
define->typearray[]={nums.};,int
define->typearray[]={nums.};,}
define->typearray[]={nums.};,{
define->typearray[]={nums.};,(
define->typearray[]={nums.};,id
项目集335:
function_call->id(),!=
function_call->id(),==
function_call->id(),>
function_call->id(),<
function_call->id(),<=
function_call->id(),>=
function_call->id(),%
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
function_call->id(),;
项目集336:
function_call->id(function_call_list.),!=
function_call->id(function_call_list.),==
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),;
项目集337:
F->(E),!=
F->(E),==
F->(E),>
F->(E),<
F->(E),<=
F->(E),>=
F->(E),%
F->(E),/
F->(E),*
F->(E),-
F->(E),+
F->(E),;
项目集338:
F->array[E.],!=
F->array[E.],==
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集339:
Dec_expression->id.--,)
Inc_expression->id.++,)
项目集340:
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,id
项目集341:
IncorDec->Inc_expression,)
项目集342:
IncorDec->Dec_expression,)
项目集343:
H->E,;
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集344:
bool_expression->GopH,;
项目集345:
function_call->id(),!=
function_call->id(),==
function_call->id(),>
function_call->id(),<
function_call->id(),<=
function_call->id(),>=
function_call->id(),%
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
项目集346:
function_call->id(function_call_list.),!=
function_call->id(function_call_list.),==
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
项目集347:
F->(E),!=
F->(E),==
F->(E),>
F->(E),<
F->(E),<=
F->(E),>=
F->(E),%
F->(E),/
F->(E),*
F->(E),-
F->(E),+
项目集348:
F->array[E.],!=
F->array[E.],==
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集349:
sentence->{block},scanf
sentence->{block},printf
sentence->{block},else
sentence->{block},if
sentence->{block},while
sentence->{block},for
sentence->{block},return
sentence->{block},array
sentence->{block},string
sentence->{block},num
sentence->{block},%
sentence->{block},/
sentence->{block},*
sentence->{block},-
sentence->{block},+
sentence->{block},char
sentence->{block},double
sentence->{block},int
sentence->{block},}
sentence->{block},{
sentence->{block},(
sentence->{block},id
项目集350:
define->typearray[.num];,scanf
define->typearray[.num];,printf
define->typearray[.num];,else
define->typearray[.num];,if
define->typearray[.num];,while
define->typearray[.num];,for
define->typearray[.num];,return
define->typearray[.num];,array
define->typearray[.num];,string
define->typearray[.num];,num
define->typearray[.num];,%
define->typearray[.num];,/
define->typearray[.num];,*
define->typearray[.num];,-
define->typearray[.num];,+
define->typearray[.num];,char
define->typearray[.num];,double
define->typearray[.num];,int
define->typearray[.num];,}
define->typearray[.num];,{
define->typearray[.num];,(
define->typearray[.num];,id
define->typearray[.]={nums};,scanf
define->typearray[.]={nums};,printf
define->typearray[.]={nums};,else
define->typearray[.]={nums};,if
define->typearray[.]={nums};,while
define->typearray[.]={nums};,for
define->typearray[.]={nums};,return
define->typearray[.]={nums};,array
define->typearray[.]={nums};,string
define->typearray[.]={nums};,num
define->typearray[.]={nums};,%
define->typearray[.]={nums};,/
define->typearray[.]={nums};,*
define->typearray[.]={nums};,-
define->typearray[.]={nums};,+
define->typearray[.]={nums};,char
define->typearray[.]={nums};,double
define->typearray[.]={nums};,int
define->typearray[.]={nums};,}
define->typearray[.]={nums};,{
define->typearray[.]={nums};,(
define->typearray[.]={nums};,id
define->typearray[.num]={nums};,scanf
define->typearray[.num]={nums};,printf
define->typearray[.num]={nums};,else
define->typearray[.num]={nums};,if
define->typearray[.num]={nums};,while
define->typearray[.num]={nums};,for
define->typearray[.num]={nums};,return
define->typearray[.num]={nums};,array
define->typearray[.num]={nums};,string
define->typearray[.num]={nums};,num
define->typearray[.num]={nums};,%
define->typearray[.num]={nums};,/
define->typearray[.num]={nums};,*
define->typearray[.num]={nums};,-
define->typearray[.num]={nums};,+
define->typearray[.num]={nums};,char
define->typearray[.num]={nums};,double
define->typearray[.num]={nums};,int
define->typearray[.num]={nums};,}
define->typearray[.num]={nums};,{
define->typearray[.num]={nums};,(
define->typearray[.num]={nums};,id
define->typearray[.]={string};,scanf
define->typearray[.]={string};,printf
define->typearray[.]={string};,else
define->typearray[.]={string};,if
define->typearray[.]={string};,while
define->typearray[.]={string};,for
define->typearray[.]={string};,return
define->typearray[.]={string};,array
define->typearray[.]={string};,string
define->typearray[.]={string};,num
define->typearray[.]={string};,%
define->typearray[.]={string};,/
define->typearray[.]={string};,*
define->typearray[.]={string};,-
define->typearray[.]={string};,+
define->typearray[.]={string};,char
define->typearray[.]={string};,double
define->typearray[.]={string};,int
define->typearray[.]={string};,}
define->typearray[.]={string};,{
define->typearray[.]={string};,(
define->typearray[.]={string};,id
项目集351:
define->typeid_name;,scanf
define->typeid_name;,printf
define->typeid_name;,else
define->typeid_name;,if
define->typeid_name;,while
define->typeid_name;,for
define->typeid_name;,return
define->typeid_name;,array
define->typeid_name;,string
define->typeid_name;,num
define->typeid_name;,%
define->typeid_name;,/
define->typeid_name;,*
define->typeid_name;,-
define->typeid_name;,+
define->typeid_name;,char
define->typeid_name;,double
define->typeid_name;,int
define->typeid_name;,}
define->typeid_name;,{
define->typeid_name;,(
define->typeid_name;,id
项目集352:
define->typeid_name=.E;,scanf
define->typeid_name=.E;,printf
define->typeid_name=.E;,else
define->typeid_name=.E;,if
define->typeid_name=.E;,while
define->typeid_name=.E;,for
define->typeid_name=.E;,return
define->typeid_name=.E;,array
define->typeid_name=.E;,string
define->typeid_name=.E;,num
define->typeid_name=.E;,%
define->typeid_name=.E;,/
define->typeid_name=.E;,*
define->typeid_name=.E;,-
define->typeid_name=.E;,+
define->typeid_name=.E;,char
define->typeid_name=.E;,double
define->typeid_name=.E;,int
define->typeid_name=.E;,}
define->typeid_name=.E;,{
define->typeid_name=.E;,(
define->typeid_name=.E;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集353:
sentence->returnE;,scanf
sentence->returnE;,printf
sentence->returnE;,else
sentence->returnE;,if
sentence->returnE;,while
sentence->returnE;,for
sentence->returnE;,return
sentence->returnE;,array
sentence->returnE;,string
sentence->returnE;,num
sentence->returnE;,%
sentence->returnE;,/
sentence->returnE;,*
sentence->returnE;,-
sentence->returnE;,+
sentence->returnE;,char
sentence->returnE;,double
sentence->returnE;,int
sentence->returnE;,}
sentence->returnE;,{
sentence->returnE;,(
sentence->returnE;,id
项目集354:
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,id
项目集355:
while_expression->while1(bool_expression.)whilesentence,scanf
while_expression->while1(bool_expression.)whilesentence,printf
while_expression->while1(bool_expression.)whilesentence,else
while_expression->while1(bool_expression.)whilesentence,if
while_expression->while1(bool_expression.)whilesentence,while
while_expression->while1(bool_expression.)whilesentence,for
while_expression->while1(bool_expression.)whilesentence,return
while_expression->while1(bool_expression.)whilesentence,array
while_expression->while1(bool_expression.)whilesentence,string
while_expression->while1(bool_expression.)whilesentence,num
while_expression->while1(bool_expression.)whilesentence,%
while_expression->while1(bool_expression.)whilesentence,/
while_expression->while1(bool_expression.)whilesentence,*
while_expression->while1(bool_expression.)whilesentence,-
while_expression->while1(bool_expression.)whilesentence,+
while_expression->while1(bool_expression.)whilesentence,char
while_expression->while1(bool_expression.)whilesentence,double
while_expression->while1(bool_expression.)whilesentence,int
while_expression->while1(bool_expression.)whilesentence,}
while_expression->while1(bool_expression.)whilesentence,{
while_expression->while1(bool_expression.)whilesentence,(
while_expression->while1(bool_expression.)whilesentence,id
项目集356:
if_expression->if(bool_expression.)ifsentenceelsesentence,scanf
if_expression->if(bool_expression.)ifsentenceelsesentence,printf
if_expression->if(bool_expression.)ifsentenceelsesentence,else
if_expression->if(bool_expression.)ifsentenceelsesentence,if
if_expression->if(bool_expression.)ifsentenceelsesentence,while
if_expression->if(bool_expression.)ifsentenceelsesentence,for
if_expression->if(bool_expression.)ifsentenceelsesentence,return
if_expression->if(bool_expression.)ifsentenceelsesentence,array
if_expression->if(bool_expression.)ifsentenceelsesentence,string
if_expression->if(bool_expression.)ifsentenceelsesentence,num
if_expression->if(bool_expression.)ifsentenceelsesentence,%
if_expression->if(bool_expression.)ifsentenceelsesentence,/
if_expression->if(bool_expression.)ifsentenceelsesentence,*
if_expression->if(bool_expression.)ifsentenceelsesentence,-
if_expression->if(bool_expression.)ifsentenceelsesentence,+
if_expression->if(bool_expression.)ifsentenceelsesentence,char
if_expression->if(bool_expression.)ifsentenceelsesentence,double
if_expression->if(bool_expression.)ifsentenceelsesentence,int
if_expression->if(bool_expression.)ifsentenceelsesentence,}
if_expression->if(bool_expression.)ifsentenceelsesentence,{
if_expression->if(bool_expression.)ifsentenceelsesentence,(
if_expression->if(bool_expression.)ifsentenceelsesentence,id
if_expression->if(bool_expression.)sentence,scanf
if_expression->if(bool_expression.)sentence,printf
if_expression->if(bool_expression.)sentence,else
if_expression->if(bool_expression.)sentence,if
if_expression->if(bool_expression.)sentence,while
if_expression->if(bool_expression.)sentence,for
if_expression->if(bool_expression.)sentence,return
if_expression->if(bool_expression.)sentence,array
if_expression->if(bool_expression.)sentence,string
if_expression->if(bool_expression.)sentence,num
if_expression->if(bool_expression.)sentence,%
if_expression->if(bool_expression.)sentence,/
if_expression->if(bool_expression.)sentence,*
if_expression->if(bool_expression.)sentence,-
if_expression->if(bool_expression.)sentence,+
if_expression->if(bool_expression.)sentence,char
if_expression->if(bool_expression.)sentence,double
if_expression->if(bool_expression.)sentence,int
if_expression->if(bool_expression.)sentence,}
if_expression->if(bool_expression.)sentence,{
if_expression->if(bool_expression.)sentence,(
if_expression->if(bool_expression.)sentence,id
项目集357:
if_expression->if(bool_expression)ifsentenceelsesentence,scanf
if_expression->if(bool_expression)ifsentenceelsesentence,printf
if_expression->if(bool_expression)ifsentenceelsesentence,if
if_expression->if(bool_expression)ifsentenceelsesentence,while
if_expression->if(bool_expression)ifsentenceelsesentence,for
if_expression->if(bool_expression)ifsentenceelsesentence,return
if_expression->if(bool_expression)ifsentenceelsesentence,array
if_expression->if(bool_expression)ifsentenceelsesentence,string
if_expression->if(bool_expression)ifsentenceelsesentence,num
if_expression->if(bool_expression)ifsentenceelsesentence,%
if_expression->if(bool_expression)ifsentenceelsesentence,/
if_expression->if(bool_expression)ifsentenceelsesentence,*
if_expression->if(bool_expression)ifsentenceelsesentence,-
if_expression->if(bool_expression)ifsentenceelsesentence,+
if_expression->if(bool_expression)ifsentenceelsesentence,char
if_expression->if(bool_expression)ifsentenceelsesentence,double
if_expression->if(bool_expression)ifsentenceelsesentence,int
if_expression->if(bool_expression)ifsentenceelsesentence,}
if_expression->if(bool_expression)ifsentenceelsesentence,{
if_expression->if(bool_expression)ifsentenceelsesentence,(
if_expression->if(bool_expression)ifsentenceelsesentence,id
项目集358:
printf_expression->printf(string.,expressions);,scanf
printf_expression->printf(string.,expressions);,printf
printf_expression->printf(string.,expressions);,else
printf_expression->printf(string.,expressions);,if
printf_expression->printf(string.,expressions);,while
printf_expression->printf(string.,expressions);,for
printf_expression->printf(string.,expressions);,return
printf_expression->printf(string.,expressions);,array
printf_expression->printf(string.,expressions);,string
printf_expression->printf(string.,expressions);,num
printf_expression->printf(string.,expressions);,%
printf_expression->printf(string.,expressions);,/
printf_expression->printf(string.,expressions);,*
printf_expression->printf(string.,expressions);,-
printf_expression->printf(string.,expressions);,+
printf_expression->printf(string.,expressions);,char
printf_expression->printf(string.,expressions);,double
printf_expression->printf(string.,expressions);,int
printf_expression->printf(string.,expressions);,}
printf_expression->printf(string.,expressions);,{
printf_expression->printf(string.,expressions);,(
printf_expression->printf(string.,expressions);,id
printf_expression->printf(string.);,scanf
printf_expression->printf(string.);,printf
printf_expression->printf(string.);,else
printf_expression->printf(string.);,if
printf_expression->printf(string.);,while
printf_expression->printf(string.);,for
printf_expression->printf(string.);,return
printf_expression->printf(string.);,array
printf_expression->printf(string.);,string
printf_expression->printf(string.);,num
printf_expression->printf(string.);,%
printf_expression->printf(string.);,/
printf_expression->printf(string.);,*
printf_expression->printf(string.);,-
printf_expression->printf(string.);,+
printf_expression->printf(string.);,char
printf_expression->printf(string.);,double
printf_expression->printf(string.);,int
printf_expression->printf(string.);,}
printf_expression->printf(string.);,{
printf_expression->printf(string.);,(
printf_expression->printf(string.);,id
项目集359:
scanf_expression->scanf(string.);,scanf
scanf_expression->scanf(string.);,printf
scanf_expression->scanf(string.);,else
scanf_expression->scanf(string.);,if
scanf_expression->scanf(string.);,while
scanf_expression->scanf(string.);,for
scanf_expression->scanf(string.);,return
scanf_expression->scanf(string.);,array
scanf_expression->scanf(string.);,string
scanf_expression->scanf(string.);,num
scanf_expression->scanf(string.);,%
scanf_expression->scanf(string.);,/
scanf_expression->scanf(string.);,*
scanf_expression->scanf(string.);,-
scanf_expression->scanf(string.);,+
scanf_expression->scanf(string.);,char
scanf_expression->scanf(string.);,double
scanf_expression->scanf(string.);,int
scanf_expression->scanf(string.);,}
scanf_expression->scanf(string.);,{
scanf_expression->scanf(string.);,(
scanf_expression->scanf(string.);,id
scanf_expression->scanf(string.,expressions);,scanf
scanf_expression->scanf(string.,expressions);,printf
scanf_expression->scanf(string.,expressions);,else
scanf_expression->scanf(string.,expressions);,if
scanf_expression->scanf(string.,expressions);,while
scanf_expression->scanf(string.,expressions);,for
scanf_expression->scanf(string.,expressions);,return
scanf_expression->scanf(string.,expressions);,array
scanf_expression->scanf(string.,expressions);,string
scanf_expression->scanf(string.,expressions);,num
scanf_expression->scanf(string.,expressions);,%
scanf_expression->scanf(string.,expressions);,/
scanf_expression->scanf(string.,expressions);,*
scanf_expression->scanf(string.,expressions);,-
scanf_expression->scanf(string.,expressions);,+
scanf_expression->scanf(string.,expressions);,char
scanf_expression->scanf(string.,expressions);,double
scanf_expression->scanf(string.,expressions);,int
scanf_expression->scanf(string.,expressions);,}
scanf_expression->scanf(string.,expressions);,{
scanf_expression->scanf(string.,expressions);,(
scanf_expression->scanf(string.,expressions);,id
项目集360:
printf_expression->printf(string,expressions);,scanf
printf_expression->printf(string,expressions);,printf
printf_expression->printf(string,expressions);,if
printf_expression->printf(string,expressions);,while
printf_expression->printf(string,expressions);,for
printf_expression->printf(string,expressions);,return
printf_expression->printf(string,expressions);,array
printf_expression->printf(string,expressions);,string
printf_expression->printf(string,expressions);,num
printf_expression->printf(string,expressions);,%
printf_expression->printf(string,expressions);,/
printf_expression->printf(string,expressions);,*
printf_expression->printf(string,expressions);,-
printf_expression->printf(string,expressions);,+
printf_expression->printf(string,expressions);,char
printf_expression->printf(string,expressions);,double
printf_expression->printf(string,expressions);,int
printf_expression->printf(string,expressions);,}
printf_expression->printf(string,expressions);,{
printf_expression->printf(string,expressions);,(
printf_expression->printf(string,expressions);,id
项目集361:
expressions->getaddr,expressions,)
项目集362:
scanf_expression->scanf(string,expressions);,scanf
scanf_expression->scanf(string,expressions);,printf
scanf_expression->scanf(string,expressions);,if
scanf_expression->scanf(string,expressions);,while
scanf_expression->scanf(string,expressions);,for
scanf_expression->scanf(string,expressions);,return
scanf_expression->scanf(string,expressions);,array
scanf_expression->scanf(string,expressions);,string
scanf_expression->scanf(string,expressions);,num
scanf_expression->scanf(string,expressions);,%
scanf_expression->scanf(string,expressions);,/
scanf_expression->scanf(string,expressions);,*
scanf_expression->scanf(string,expressions);,-
scanf_expression->scanf(string,expressions);,+
scanf_expression->scanf(string,expressions);,char
scanf_expression->scanf(string,expressions);,double
scanf_expression->scanf(string,expressions);,int
scanf_expression->scanf(string,expressions);,}
scanf_expression->scanf(string,expressions);,{
scanf_expression->scanf(string,expressions);,(
scanf_expression->scanf(string,expressions);,id
项目集363:
define->typearray[num]={nums.};,scanf
define->typearray[num]={nums.};,printf
define->typearray[num]={nums.};,if
define->typearray[num]={nums.};,while
define->typearray[num]={nums.};,for
define->typearray[num]={nums.};,return
define->typearray[num]={nums.};,array
define->typearray[num]={nums.};,string
define->typearray[num]={nums.};,num
define->typearray[num]={nums.};,%
define->typearray[num]={nums.};,/
define->typearray[num]={nums.};,*
define->typearray[num]={nums.};,-
define->typearray[num]={nums.};,+
define->typearray[num]={nums.};,char
define->typearray[num]={nums.};,double
define->typearray[num]={nums.};,int
define->typearray[num]={nums.};,}
define->typearray[num]={nums.};,{
define->typearray[num]={nums.};,(
define->typearray[num]={nums.};,id
项目集364:
nums->.num,}
nums->num,.nums,}
nums->.num,nums,}
项目集365:
define->typearray[]={string}.;,scanf
define->typearray[]={string}.;,printf
define->typearray[]={string}.;,if
define->typearray[]={string}.;,while
define->typearray[]={string}.;,for
define->typearray[]={string}.;,return
define->typearray[]={string}.;,array
define->typearray[]={string}.;,string
define->typearray[]={string}.;,num
define->typearray[]={string}.;,%
define->typearray[]={string}.;,/
define->typearray[]={string}.;,*
define->typearray[]={string}.;,-
define->typearray[]={string}.;,+
define->typearray[]={string}.;,char
define->typearray[]={string}.;,double
define->typearray[]={string}.;,int
define->typearray[]={string}.;,}
define->typearray[]={string}.;,{
define->typearray[]={string}.;,(
define->typearray[]={string}.;,id
项目集366:
define->typearray[]={nums}.;,scanf
define->typearray[]={nums}.;,printf
define->typearray[]={nums}.;,if
define->typearray[]={nums}.;,while
define->typearray[]={nums}.;,for
define->typearray[]={nums}.;,return
define->typearray[]={nums}.;,array
define->typearray[]={nums}.;,string
define->typearray[]={nums}.;,num
define->typearray[]={nums}.;,%
define->typearray[]={nums}.;,/
define->typearray[]={nums}.;,*
define->typearray[]={nums}.;,-
define->typearray[]={nums}.;,+
define->typearray[]={nums}.;,char
define->typearray[]={nums}.;,double
define->typearray[]={nums}.;,int
define->typearray[]={nums}.;,}
define->typearray[]={nums}.;,{
define->typearray[]={nums}.;,(
define->typearray[]={nums}.;,id
项目集367:
function_call->id(function_call_list),!=
function_call->id(function_call_list),==
function_call->id(function_call_list),>
function_call->id(function_call_list),<
function_call->id(function_call_list),<=
function_call->id(function_call_list),>=
function_call->id(function_call_list),%
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
function_call->id(function_call_list),;
项目集368:
F->array[E],!=
F->array[E],==
F->array[E],>
F->array[E],<
F->array[E],<=
F->array[E],>=
F->array[E],%
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],;
项目集369:
Inc_expression->id++,)
项目集370:
Dec_expression->id--,)
项目集371:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
forsentence->.sentence,scanf
forsentence->.sentence,printf
forsentence->.sentence,if
forsentence->.sentence,while
forsentence->.sentence,for
forsentence->.sentence,return
forsentence->.sentence,array
forsentence->.sentence,string
forsentence->.sentence,num
forsentence->.sentence,%
forsentence->.sentence,/
forsentence->.sentence,*
forsentence->.sentence,-
forsentence->.sentence,+
forsentence->.sentence,char
forsentence->.sentence,double
forsentence->.sentence,int
forsentence->.sentence,}
forsentence->.sentence,{
forsentence->.sentence,(
forsentence->.sentence,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集372:
function_call->id(function_call_list),!=
function_call->id(function_call_list),==
function_call->id(function_call_list),>
function_call->id(function_call_list),<
function_call->id(function_call_list),<=
function_call->id(function_call_list),>=
function_call->id(function_call_list),%
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
项目集373:
F->array[E],!=
F->array[E],==
F->array[E],>
F->array[E],<
F->array[E],<=
F->array[E],>=
F->array[E],%
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
项目集374:
define->typearray[num.];,scanf
define->typearray[num.];,printf
define->typearray[num.];,else
define->typearray[num.];,if
define->typearray[num.];,while
define->typearray[num.];,for
define->typearray[num.];,return
define->typearray[num.];,array
define->typearray[num.];,string
define->typearray[num.];,num
define->typearray[num.];,%
define->typearray[num.];,/
define->typearray[num.];,*
define->typearray[num.];,-
define->typearray[num.];,+
define->typearray[num.];,char
define->typearray[num.];,double
define->typearray[num.];,int
define->typearray[num.];,}
define->typearray[num.];,{
define->typearray[num.];,(
define->typearray[num.];,id
define->typearray[num.]={nums};,scanf
define->typearray[num.]={nums};,printf
define->typearray[num.]={nums};,else
define->typearray[num.]={nums};,if
define->typearray[num.]={nums};,while
define->typearray[num.]={nums};,for
define->typearray[num.]={nums};,return
define->typearray[num.]={nums};,array
define->typearray[num.]={nums};,string
define->typearray[num.]={nums};,num
define->typearray[num.]={nums};,%
define->typearray[num.]={nums};,/
define->typearray[num.]={nums};,*
define->typearray[num.]={nums};,-
define->typearray[num.]={nums};,+
define->typearray[num.]={nums};,char
define->typearray[num.]={nums};,double
define->typearray[num.]={nums};,int
define->typearray[num.]={nums};,}
define->typearray[num.]={nums};,{
define->typearray[num.]={nums};,(
define->typearray[num.]={nums};,id
项目集375:
define->typearray[].={nums};,scanf
define->typearray[].={nums};,printf
define->typearray[].={nums};,else
define->typearray[].={nums};,if
define->typearray[].={nums};,while
define->typearray[].={nums};,for
define->typearray[].={nums};,return
define->typearray[].={nums};,array
define->typearray[].={nums};,string
define->typearray[].={nums};,num
define->typearray[].={nums};,%
define->typearray[].={nums};,/
define->typearray[].={nums};,*
define->typearray[].={nums};,-
define->typearray[].={nums};,+
define->typearray[].={nums};,char
define->typearray[].={nums};,double
define->typearray[].={nums};,int
define->typearray[].={nums};,}
define->typearray[].={nums};,{
define->typearray[].={nums};,(
define->typearray[].={nums};,id
define->typearray[].={string};,scanf
define->typearray[].={string};,printf
define->typearray[].={string};,else
define->typearray[].={string};,if
define->typearray[].={string};,while
define->typearray[].={string};,for
define->typearray[].={string};,return
define->typearray[].={string};,array
define->typearray[].={string};,string
define->typearray[].={string};,num
define->typearray[].={string};,%
define->typearray[].={string};,/
define->typearray[].={string};,*
define->typearray[].={string};,-
define->typearray[].={string};,+
define->typearray[].={string};,char
define->typearray[].={string};,double
define->typearray[].={string};,int
define->typearray[].={string};,}
define->typearray[].={string};,{
define->typearray[].={string};,(
define->typearray[].={string};,id
项目集376:
define->typeid_name=E.;,scanf
define->typeid_name=E.;,printf
define->typeid_name=E.;,else
define->typeid_name=E.;,if
define->typeid_name=E.;,while
define->typeid_name=E.;,for
define->typeid_name=E.;,return
define->typeid_name=E.;,array
define->typeid_name=E.;,string
define->typeid_name=E.;,num
define->typeid_name=E.;,%
define->typeid_name=E.;,/
define->typeid_name=E.;,*
define->typeid_name=E.;,-
define->typeid_name=E.;,+
define->typeid_name=E.;,char
define->typeid_name=E.;,double
define->typeid_name=E.;,int
define->typeid_name=E.;,}
define->typeid_name=E.;,{
define->typeid_name=E.;,(
define->typeid_name=E.;,id
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集377:
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,;
bool_expression->.GopH,;
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,id
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],!=
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,!=
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,!=
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,!=
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),!=
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集378:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
whilesentence->.sentence,scanf
whilesentence->.sentence,printf
whilesentence->.sentence,else
whilesentence->.sentence,if
whilesentence->.sentence,while
whilesentence->.sentence,for
whilesentence->.sentence,return
whilesentence->.sentence,array
whilesentence->.sentence,string
whilesentence->.sentence,num
whilesentence->.sentence,%
whilesentence->.sentence,/
whilesentence->.sentence,*
whilesentence->.sentence,-
whilesentence->.sentence,+
whilesentence->.sentence,char
whilesentence->.sentence,double
whilesentence->.sentence,int
whilesentence->.sentence,}
whilesentence->.sentence,{
whilesentence->.sentence,(
whilesentence->.sentence,id
while1->.while,(
while_expression->while1(bool_expression).whilesentence,scanf
while_expression->while1(bool_expression).whilesentence,printf
while_expression->while1(bool_expression).whilesentence,else
while_expression->while1(bool_expression).whilesentence,if
while_expression->while1(bool_expression).whilesentence,while
while_expression->while1(bool_expression).whilesentence,for
while_expression->while1(bool_expression).whilesentence,return
while_expression->while1(bool_expression).whilesentence,array
while_expression->while1(bool_expression).whilesentence,string
while_expression->while1(bool_expression).whilesentence,num
while_expression->while1(bool_expression).whilesentence,%
while_expression->while1(bool_expression).whilesentence,/
while_expression->while1(bool_expression).whilesentence,*
while_expression->while1(bool_expression).whilesentence,-
while_expression->while1(bool_expression).whilesentence,+
while_expression->while1(bool_expression).whilesentence,char
while_expression->while1(bool_expression).whilesentence,double
while_expression->while1(bool_expression).whilesentence,int
while_expression->while1(bool_expression).whilesentence,}
while_expression->while1(bool_expression).whilesentence,{
while_expression->while1(bool_expression).whilesentence,(
while_expression->while1(bool_expression).whilesentence,id
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集379:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
ifsentence->.sentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,scanf
if_expression->if(bool_expression).ifsentenceelsesentence,printf
if_expression->if(bool_expression).ifsentenceelsesentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,if
if_expression->if(bool_expression).ifsentenceelsesentence,while
if_expression->if(bool_expression).ifsentenceelsesentence,for
if_expression->if(bool_expression).ifsentenceelsesentence,return
if_expression->if(bool_expression).ifsentenceelsesentence,array
if_expression->if(bool_expression).ifsentenceelsesentence,string
if_expression->if(bool_expression).ifsentenceelsesentence,num
if_expression->if(bool_expression).ifsentenceelsesentence,%
if_expression->if(bool_expression).ifsentenceelsesentence,/
if_expression->if(bool_expression).ifsentenceelsesentence,*
if_expression->if(bool_expression).ifsentenceelsesentence,-
if_expression->if(bool_expression).ifsentenceelsesentence,+
if_expression->if(bool_expression).ifsentenceelsesentence,char
if_expression->if(bool_expression).ifsentenceelsesentence,double
if_expression->if(bool_expression).ifsentenceelsesentence,int
if_expression->if(bool_expression).ifsentenceelsesentence,}
if_expression->if(bool_expression).ifsentenceelsesentence,{
if_expression->if(bool_expression).ifsentenceelsesentence,(
if_expression->if(bool_expression).ifsentenceelsesentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->if(bool_expression).sentence,scanf
if_expression->if(bool_expression).sentence,printf
if_expression->if(bool_expression).sentence,else
if_expression->if(bool_expression).sentence,if
if_expression->if(bool_expression).sentence,while
if_expression->if(bool_expression).sentence,for
if_expression->if(bool_expression).sentence,return
if_expression->if(bool_expression).sentence,array
if_expression->if(bool_expression).sentence,string
if_expression->if(bool_expression).sentence,num
if_expression->if(bool_expression).sentence,%
if_expression->if(bool_expression).sentence,/
if_expression->if(bool_expression).sentence,*
if_expression->if(bool_expression).sentence,-
if_expression->if(bool_expression).sentence,+
if_expression->if(bool_expression).sentence,char
if_expression->if(bool_expression).sentence,double
if_expression->if(bool_expression).sentence,int
if_expression->if(bool_expression).sentence,}
if_expression->if(bool_expression).sentence,{
if_expression->if(bool_expression).sentence,(
if_expression->if(bool_expression).sentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集380:
printf_expression->printf(string).;,scanf
printf_expression->printf(string).;,printf
printf_expression->printf(string).;,else
printf_expression->printf(string).;,if
printf_expression->printf(string).;,while
printf_expression->printf(string).;,for
printf_expression->printf(string).;,return
printf_expression->printf(string).;,array
printf_expression->printf(string).;,string
printf_expression->printf(string).;,num
printf_expression->printf(string).;,%
printf_expression->printf(string).;,/
printf_expression->printf(string).;,*
printf_expression->printf(string).;,-
printf_expression->printf(string).;,+
printf_expression->printf(string).;,char
printf_expression->printf(string).;,double
printf_expression->printf(string).;,int
printf_expression->printf(string).;,}
printf_expression->printf(string).;,{
printf_expression->printf(string).;,(
printf_expression->printf(string).;,id
项目集381:
getaddr->.&id,,
getaddr->.&id,)
getaddr->.id,,
getaddr->.id,)
expressions->.getaddr,)
expressions->.getaddr,expressions,)
printf_expression->printf(string,.expressions);,scanf
printf_expression->printf(string,.expressions);,printf
printf_expression->printf(string,.expressions);,else
printf_expression->printf(string,.expressions);,if
printf_expression->printf(string,.expressions);,while
printf_expression->printf(string,.expressions);,for
printf_expression->printf(string,.expressions);,return
printf_expression->printf(string,.expressions);,array
printf_expression->printf(string,.expressions);,string
printf_expression->printf(string,.expressions);,num
printf_expression->printf(string,.expressions);,%
printf_expression->printf(string,.expressions);,/
printf_expression->printf(string,.expressions);,*
printf_expression->printf(string,.expressions);,-
printf_expression->printf(string,.expressions);,+
printf_expression->printf(string,.expressions);,char
printf_expression->printf(string,.expressions);,double
printf_expression->printf(string,.expressions);,int
printf_expression->printf(string,.expressions);,}
printf_expression->printf(string,.expressions);,{
printf_expression->printf(string,.expressions);,(
printf_expression->printf(string,.expressions);,id
项目集382:
scanf_expression->scanf(string).;,scanf
scanf_expression->scanf(string).;,printf
scanf_expression->scanf(string).;,else
scanf_expression->scanf(string).;,if
scanf_expression->scanf(string).;,while
scanf_expression->scanf(string).;,for
scanf_expression->scanf(string).;,return
scanf_expression->scanf(string).;,array
scanf_expression->scanf(string).;,string
scanf_expression->scanf(string).;,num
scanf_expression->scanf(string).;,%
scanf_expression->scanf(string).;,/
scanf_expression->scanf(string).;,*
scanf_expression->scanf(string).;,-
scanf_expression->scanf(string).;,+
scanf_expression->scanf(string).;,char
scanf_expression->scanf(string).;,double
scanf_expression->scanf(string).;,int
scanf_expression->scanf(string).;,}
scanf_expression->scanf(string).;,{
scanf_expression->scanf(string).;,(
scanf_expression->scanf(string).;,id
项目集383:
getaddr->.&id,,
getaddr->.&id,)
getaddr->.id,,
getaddr->.id,)
scanf_expression->scanf(string,.expressions);,scanf
scanf_expression->scanf(string,.expressions);,printf
scanf_expression->scanf(string,.expressions);,else
scanf_expression->scanf(string,.expressions);,if
scanf_expression->scanf(string,.expressions);,while
scanf_expression->scanf(string,.expressions);,for
scanf_expression->scanf(string,.expressions);,return
scanf_expression->scanf(string,.expressions);,array
scanf_expression->scanf(string,.expressions);,string
scanf_expression->scanf(string,.expressions);,num
scanf_expression->scanf(string,.expressions);,%
scanf_expression->scanf(string,.expressions);,/
scanf_expression->scanf(string,.expressions);,*
scanf_expression->scanf(string,.expressions);,-
scanf_expression->scanf(string,.expressions);,+
scanf_expression->scanf(string,.expressions);,char
scanf_expression->scanf(string,.expressions);,double
scanf_expression->scanf(string,.expressions);,int
scanf_expression->scanf(string,.expressions);,}
scanf_expression->scanf(string,.expressions);,{
scanf_expression->scanf(string,.expressions);,(
scanf_expression->scanf(string,.expressions);,id
expressions->.getaddr,)
expressions->.getaddr,expressions,)
项目集384:
define->typearray[num]={nums}.;,scanf
define->typearray[num]={nums}.;,printf
define->typearray[num]={nums}.;,if
define->typearray[num]={nums}.;,while
define->typearray[num]={nums}.;,for
define->typearray[num]={nums}.;,return
define->typearray[num]={nums}.;,array
define->typearray[num]={nums}.;,string
define->typearray[num]={nums}.;,num
define->typearray[num]={nums}.;,%
define->typearray[num]={nums}.;,/
define->typearray[num]={nums}.;,*
define->typearray[num]={nums}.;,-
define->typearray[num]={nums}.;,+
define->typearray[num]={nums}.;,char
define->typearray[num]={nums}.;,double
define->typearray[num]={nums}.;,int
define->typearray[num]={nums}.;,}
define->typearray[num]={nums}.;,{
define->typearray[num]={nums}.;,(
define->typearray[num]={nums}.;,id
项目集385:
nums->num,nums,}
项目集386:
define->typearray[]={string};,scanf
define->typearray[]={string};,printf
define->typearray[]={string};,if
define->typearray[]={string};,while
define->typearray[]={string};,for
define->typearray[]={string};,return
define->typearray[]={string};,array
define->typearray[]={string};,string
define->typearray[]={string};,num
define->typearray[]={string};,%
define->typearray[]={string};,/
define->typearray[]={string};,*
define->typearray[]={string};,-
define->typearray[]={string};,+
define->typearray[]={string};,char
define->typearray[]={string};,double
define->typearray[]={string};,int
define->typearray[]={string};,}
define->typearray[]={string};,{
define->typearray[]={string};,(
define->typearray[]={string};,id
项目集387:
define->typearray[]={nums};,scanf
define->typearray[]={nums};,printf
define->typearray[]={nums};,if
define->typearray[]={nums};,while
define->typearray[]={nums};,for
define->typearray[]={nums};,return
define->typearray[]={nums};,array
define->typearray[]={nums};,string
define->typearray[]={nums};,num
define->typearray[]={nums};,%
define->typearray[]={nums};,/
define->typearray[]={nums};,*
define->typearray[]={nums};,-
define->typearray[]={nums};,+
define->typearray[]={nums};,char
define->typearray[]={nums};,double
define->typearray[]={nums};,int
define->typearray[]={nums};,}
define->typearray[]={nums};,{
define->typearray[]={nums};,(
define->typearray[]={nums};,id
项目集388:
forsentence->sentence,scanf
forsentence->sentence,printf
forsentence->sentence,if
forsentence->sentence,while
forsentence->sentence,for
forsentence->sentence,return
forsentence->sentence,array
forsentence->sentence,string
forsentence->sentence,num
forsentence->sentence,%
forsentence->sentence,/
forsentence->sentence,*
forsentence->sentence,-
forsentence->sentence,+
forsentence->sentence,char
forsentence->sentence,double
forsentence->sentence,int
forsentence->sentence,}
forsentence->sentence,{
forsentence->sentence,(
forsentence->sentence,id
项目集389:
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,id
项目集390:
define->typearray[num].;,scanf
define->typearray[num].;,printf
define->typearray[num].;,else
define->typearray[num].;,if
define->typearray[num].;,while
define->typearray[num].;,for
define->typearray[num].;,return
define->typearray[num].;,array
define->typearray[num].;,string
define->typearray[num].;,num
define->typearray[num].;,%
define->typearray[num].;,/
define->typearray[num].;,*
define->typearray[num].;,-
define->typearray[num].;,+
define->typearray[num].;,char
define->typearray[num].;,double
define->typearray[num].;,int
define->typearray[num].;,}
define->typearray[num].;,{
define->typearray[num].;,(
define->typearray[num].;,id
define->typearray[num].={nums};,scanf
define->typearray[num].={nums};,printf
define->typearray[num].={nums};,else
define->typearray[num].={nums};,if
define->typearray[num].={nums};,while
define->typearray[num].={nums};,for
define->typearray[num].={nums};,return
define->typearray[num].={nums};,array
define->typearray[num].={nums};,string
define->typearray[num].={nums};,num
define->typearray[num].={nums};,%
define->typearray[num].={nums};,/
define->typearray[num].={nums};,*
define->typearray[num].={nums};,-
define->typearray[num].={nums};,+
define->typearray[num].={nums};,char
define->typearray[num].={nums};,double
define->typearray[num].={nums};,int
define->typearray[num].={nums};,}
define->typearray[num].={nums};,{
define->typearray[num].={nums};,(
define->typearray[num].={nums};,id
项目集391:
define->typearray[]=.{nums};,scanf
define->typearray[]=.{nums};,printf
define->typearray[]=.{nums};,else
define->typearray[]=.{nums};,if
define->typearray[]=.{nums};,while
define->typearray[]=.{nums};,for
define->typearray[]=.{nums};,return
define->typearray[]=.{nums};,array
define->typearray[]=.{nums};,string
define->typearray[]=.{nums};,num
define->typearray[]=.{nums};,%
define->typearray[]=.{nums};,/
define->typearray[]=.{nums};,*
define->typearray[]=.{nums};,-
define->typearray[]=.{nums};,+
define->typearray[]=.{nums};,char
define->typearray[]=.{nums};,double
define->typearray[]=.{nums};,int
define->typearray[]=.{nums};,}
define->typearray[]=.{nums};,{
define->typearray[]=.{nums};,(
define->typearray[]=.{nums};,id
define->typearray[]=.{string};,scanf
define->typearray[]=.{string};,printf
define->typearray[]=.{string};,else
define->typearray[]=.{string};,if
define->typearray[]=.{string};,while
define->typearray[]=.{string};,for
define->typearray[]=.{string};,return
define->typearray[]=.{string};,array
define->typearray[]=.{string};,string
define->typearray[]=.{string};,num
define->typearray[]=.{string};,%
define->typearray[]=.{string};,/
define->typearray[]=.{string};,*
define->typearray[]=.{string};,-
define->typearray[]=.{string};,+
define->typearray[]=.{string};,char
define->typearray[]=.{string};,double
define->typearray[]=.{string};,int
define->typearray[]=.{string};,}
define->typearray[]=.{string};,{
define->typearray[]=.{string};,(
define->typearray[]=.{string};,id
项目集392:
define->typeid_name=E;,scanf
define->typeid_name=E;,printf
define->typeid_name=E;,else
define->typeid_name=E;,if
define->typeid_name=E;,while
define->typeid_name=E;,for
define->typeid_name=E;,return
define->typeid_name=E;,array
define->typeid_name=E;,string
define->typeid_name=E;,num
define->typeid_name=E;,%
define->typeid_name=E;,/
define->typeid_name=E;,*
define->typeid_name=E;,-
define->typeid_name=E;,+
define->typeid_name=E;,char
define->typeid_name=E;,double
define->typeid_name=E;,int
define->typeid_name=E;,}
define->typeid_name=E;,{
define->typeid_name=E;,(
define->typeid_name=E;,id
项目集393:
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,id
项目集394:
whilesentence->sentence,scanf
whilesentence->sentence,printf
whilesentence->sentence,else
whilesentence->sentence,if
whilesentence->sentence,while
whilesentence->sentence,for
whilesentence->sentence,return
whilesentence->sentence,array
whilesentence->sentence,string
whilesentence->sentence,num
whilesentence->sentence,%
whilesentence->sentence,/
whilesentence->sentence,*
whilesentence->sentence,-
whilesentence->sentence,+
whilesentence->sentence,char
whilesentence->sentence,double
whilesentence->sentence,int
whilesentence->sentence,}
whilesentence->sentence,{
whilesentence->sentence,(
whilesentence->sentence,id
项目集395:
while_expression->while1(bool_expression)whilesentence,scanf
while_expression->while1(bool_expression)whilesentence,printf
while_expression->while1(bool_expression)whilesentence,else
while_expression->while1(bool_expression)whilesentence,if
while_expression->while1(bool_expression)whilesentence,while
while_expression->while1(bool_expression)whilesentence,for
while_expression->while1(bool_expression)whilesentence,return
while_expression->while1(bool_expression)whilesentence,array
while_expression->while1(bool_expression)whilesentence,string
while_expression->while1(bool_expression)whilesentence,num
while_expression->while1(bool_expression)whilesentence,%
while_expression->while1(bool_expression)whilesentence,/
while_expression->while1(bool_expression)whilesentence,*
while_expression->while1(bool_expression)whilesentence,-
while_expression->while1(bool_expression)whilesentence,+
while_expression->while1(bool_expression)whilesentence,char
while_expression->while1(bool_expression)whilesentence,double
while_expression->while1(bool_expression)whilesentence,int
while_expression->while1(bool_expression)whilesentence,}
while_expression->while1(bool_expression)whilesentence,{
while_expression->while1(bool_expression)whilesentence,(
while_expression->while1(bool_expression)whilesentence,id
项目集396:
ifsentence->sentence,else
if_expression->if(bool_expression)sentence,scanf
if_expression->if(bool_expression)sentence,printf
if_expression->if(bool_expression)sentence,else
if_expression->if(bool_expression)sentence,if
if_expression->if(bool_expression)sentence,while
if_expression->if(bool_expression)sentence,for
if_expression->if(bool_expression)sentence,return
if_expression->if(bool_expression)sentence,array
if_expression->if(bool_expression)sentence,string
if_expression->if(bool_expression)sentence,num
if_expression->if(bool_expression)sentence,%
if_expression->if(bool_expression)sentence,/
if_expression->if(bool_expression)sentence,*
if_expression->if(bool_expression)sentence,-
if_expression->if(bool_expression)sentence,+
if_expression->if(bool_expression)sentence,char
if_expression->if(bool_expression)sentence,double
if_expression->if(bool_expression)sentence,int
if_expression->if(bool_expression)sentence,}
if_expression->if(bool_expression)sentence,{
if_expression->if(bool_expression)sentence,(
if_expression->if(bool_expression)sentence,id
项目集397:
if_expression->if(bool_expression)ifsentence.elsesentence,scanf
if_expression->if(bool_expression)ifsentence.elsesentence,printf
if_expression->if(bool_expression)ifsentence.elsesentence,else
if_expression->if(bool_expression)ifsentence.elsesentence,if
if_expression->if(bool_expression)ifsentence.elsesentence,while
if_expression->if(bool_expression)ifsentence.elsesentence,for
if_expression->if(bool_expression)ifsentence.elsesentence,return
if_expression->if(bool_expression)ifsentence.elsesentence,array
if_expression->if(bool_expression)ifsentence.elsesentence,string
if_expression->if(bool_expression)ifsentence.elsesentence,num
if_expression->if(bool_expression)ifsentence.elsesentence,%
if_expression->if(bool_expression)ifsentence.elsesentence,/
if_expression->if(bool_expression)ifsentence.elsesentence,*
if_expression->if(bool_expression)ifsentence.elsesentence,-
if_expression->if(bool_expression)ifsentence.elsesentence,+
if_expression->if(bool_expression)ifsentence.elsesentence,char
if_expression->if(bool_expression)ifsentence.elsesentence,double
if_expression->if(bool_expression)ifsentence.elsesentence,int
if_expression->if(bool_expression)ifsentence.elsesentence,}
if_expression->if(bool_expression)ifsentence.elsesentence,{
if_expression->if(bool_expression)ifsentence.elsesentence,(
if_expression->if(bool_expression)ifsentence.elsesentence,id
项目集398:
printf_expression->printf(string);,scanf
printf_expression->printf(string);,printf
printf_expression->printf(string);,else
printf_expression->printf(string);,if
printf_expression->printf(string);,while
printf_expression->printf(string);,for
printf_expression->printf(string);,return
printf_expression->printf(string);,array
printf_expression->printf(string);,string
printf_expression->printf(string);,num
printf_expression->printf(string);,%
printf_expression->printf(string);,/
printf_expression->printf(string);,*
printf_expression->printf(string);,-
printf_expression->printf(string);,+
printf_expression->printf(string);,char
printf_expression->printf(string);,double
printf_expression->printf(string);,int
printf_expression->printf(string);,}
printf_expression->printf(string);,{
printf_expression->printf(string);,(
printf_expression->printf(string);,id
项目集399:
printf_expression->printf(string,expressions.);,scanf
printf_expression->printf(string,expressions.);,printf
printf_expression->printf(string,expressions.);,else
printf_expression->printf(string,expressions.);,if
printf_expression->printf(string,expressions.);,while
printf_expression->printf(string,expressions.);,for
printf_expression->printf(string,expressions.);,return
printf_expression->printf(string,expressions.);,array
printf_expression->printf(string,expressions.);,string
printf_expression->printf(string,expressions.);,num
printf_expression->printf(string,expressions.);,%
printf_expression->printf(string,expressions.);,/
printf_expression->printf(string,expressions.);,*
printf_expression->printf(string,expressions.);,-
printf_expression->printf(string,expressions.);,+
printf_expression->printf(string,expressions.);,char
printf_expression->printf(string,expressions.);,double
printf_expression->printf(string,expressions.);,int
printf_expression->printf(string,expressions.);,}
printf_expression->printf(string,expressions.);,{
printf_expression->printf(string,expressions.);,(
printf_expression->printf(string,expressions.);,id
项目集400:
scanf_expression->scanf(string);,scanf
scanf_expression->scanf(string);,printf
scanf_expression->scanf(string);,else
scanf_expression->scanf(string);,if
scanf_expression->scanf(string);,while
scanf_expression->scanf(string);,for
scanf_expression->scanf(string);,return
scanf_expression->scanf(string);,array
scanf_expression->scanf(string);,string
scanf_expression->scanf(string);,num
scanf_expression->scanf(string);,%
scanf_expression->scanf(string);,/
scanf_expression->scanf(string);,*
scanf_expression->scanf(string);,-
scanf_expression->scanf(string);,+
scanf_expression->scanf(string);,char
scanf_expression->scanf(string);,double
scanf_expression->scanf(string);,int
scanf_expression->scanf(string);,}
scanf_expression->scanf(string);,{
scanf_expression->scanf(string);,(
scanf_expression->scanf(string);,id
项目集401:
scanf_expression->scanf(string,expressions.);,scanf
scanf_expression->scanf(string,expressions.);,printf
scanf_expression->scanf(string,expressions.);,else
scanf_expression->scanf(string,expressions.);,if
scanf_expression->scanf(string,expressions.);,while
scanf_expression->scanf(string,expressions.);,for
scanf_expression->scanf(string,expressions.);,return
scanf_expression->scanf(string,expressions.);,array
scanf_expression->scanf(string,expressions.);,string
scanf_expression->scanf(string,expressions.);,num
scanf_expression->scanf(string,expressions.);,%
scanf_expression->scanf(string,expressions.);,/
scanf_expression->scanf(string,expressions.);,*
scanf_expression->scanf(string,expressions.);,-
scanf_expression->scanf(string,expressions.);,+
scanf_expression->scanf(string,expressions.);,char
scanf_expression->scanf(string,expressions.);,double
scanf_expression->scanf(string,expressions.);,int
scanf_expression->scanf(string,expressions.);,}
scanf_expression->scanf(string,expressions.);,{
scanf_expression->scanf(string,expressions.);,(
scanf_expression->scanf(string,expressions.);,id
项目集402:
define->typearray[num]={nums};,scanf
define->typearray[num]={nums};,printf
define->typearray[num]={nums};,if
define->typearray[num]={nums};,while
define->typearray[num]={nums};,for
define->typearray[num]={nums};,return
define->typearray[num]={nums};,array
define->typearray[num]={nums};,string
define->typearray[num]={nums};,num
define->typearray[num]={nums};,%
define->typearray[num]={nums};,/
define->typearray[num]={nums};,*
define->typearray[num]={nums};,-
define->typearray[num]={nums};,+
define->typearray[num]={nums};,char
define->typearray[num]={nums};,double
define->typearray[num]={nums};,int
define->typearray[num]={nums};,}
define->typearray[num]={nums};,{
define->typearray[num]={nums};,(
define->typearray[num]={nums};,id
项目集403:
define->typearray[num];,scanf
define->typearray[num];,printf
define->typearray[num];,else
define->typearray[num];,if
define->typearray[num];,while
define->typearray[num];,for
define->typearray[num];,return
define->typearray[num];,array
define->typearray[num];,string
define->typearray[num];,num
define->typearray[num];,%
define->typearray[num];,/
define->typearray[num];,*
define->typearray[num];,-
define->typearray[num];,+
define->typearray[num];,char
define->typearray[num];,double
define->typearray[num];,int
define->typearray[num];,}
define->typearray[num];,{
define->typearray[num];,(
define->typearray[num];,id
项目集404:
define->typearray[num]=.{nums};,scanf
define->typearray[num]=.{nums};,printf
define->typearray[num]=.{nums};,else
define->typearray[num]=.{nums};,if
define->typearray[num]=.{nums};,while
define->typearray[num]=.{nums};,for
define->typearray[num]=.{nums};,return
define->typearray[num]=.{nums};,array
define->typearray[num]=.{nums};,string
define->typearray[num]=.{nums};,num
define->typearray[num]=.{nums};,%
define->typearray[num]=.{nums};,/
define->typearray[num]=.{nums};,*
define->typearray[num]=.{nums};,-
define->typearray[num]=.{nums};,+
define->typearray[num]=.{nums};,char
define->typearray[num]=.{nums};,double
define->typearray[num]=.{nums};,int
define->typearray[num]=.{nums};,}
define->typearray[num]=.{nums};,{
define->typearray[num]=.{nums};,(
define->typearray[num]=.{nums};,id
项目集405:
nums->.num,}
nums->.num,nums,}
define->typearray[]={.nums};,scanf
define->typearray[]={.nums};,printf
define->typearray[]={.nums};,else
define->typearray[]={.nums};,if
define->typearray[]={.nums};,while
define->typearray[]={.nums};,for
define->typearray[]={.nums};,return
define->typearray[]={.nums};,array
define->typearray[]={.nums};,string
define->typearray[]={.nums};,num
define->typearray[]={.nums};,%
define->typearray[]={.nums};,/
define->typearray[]={.nums};,*
define->typearray[]={.nums};,-
define->typearray[]={.nums};,+
define->typearray[]={.nums};,char
define->typearray[]={.nums};,double
define->typearray[]={.nums};,int
define->typearray[]={.nums};,}
define->typearray[]={.nums};,{
define->typearray[]={.nums};,(
define->typearray[]={.nums};,id
define->typearray[]={.string};,scanf
define->typearray[]={.string};,printf
define->typearray[]={.string};,else
define->typearray[]={.string};,if
define->typearray[]={.string};,while
define->typearray[]={.string};,for
define->typearray[]={.string};,return
define->typearray[]={.string};,array
define->typearray[]={.string};,string
define->typearray[]={.string};,num
define->typearray[]={.string};,%
define->typearray[]={.string};,/
define->typearray[]={.string};,*
define->typearray[]={.string};,-
define->typearray[]={.string};,+
define->typearray[]={.string};,char
define->typearray[]={.string};,double
define->typearray[]={.string};,int
define->typearray[]={.string};,}
define->typearray[]={.string};,{
define->typearray[]={.string};,(
define->typearray[]={.string};,id
项目集406:
Dec_expression->.id--,)
Inc_expression->.id++,)
IncorDec->.Dec_expression,)
IncorDec->.Inc_expression,)
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,id
项目集407:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->if(bool_expression)ifsentenceelse.sentence,scanf
if_expression->if(bool_expression)ifsentenceelse.sentence,printf
if_expression->if(bool_expression)ifsentenceelse.sentence,else
if_expression->if(bool_expression)ifsentenceelse.sentence,if
if_expression->if(bool_expression)ifsentenceelse.sentence,while
if_expression->if(bool_expression)ifsentenceelse.sentence,for
if_expression->if(bool_expression)ifsentenceelse.sentence,return
if_expression->if(bool_expression)ifsentenceelse.sentence,array
if_expression->if(bool_expression)ifsentenceelse.sentence,string
if_expression->if(bool_expression)ifsentenceelse.sentence,num
if_expression->if(bool_expression)ifsentenceelse.sentence,%
if_expression->if(bool_expression)ifsentenceelse.sentence,/
if_expression->if(bool_expression)ifsentenceelse.sentence,*
if_expression->if(bool_expression)ifsentenceelse.sentence,-
if_expression->if(bool_expression)ifsentenceelse.sentence,+
if_expression->if(bool_expression)ifsentenceelse.sentence,char
if_expression->if(bool_expression)ifsentenceelse.sentence,double
if_expression->if(bool_expression)ifsentenceelse.sentence,int
if_expression->if(bool_expression)ifsentenceelse.sentence,}
if_expression->if(bool_expression)ifsentenceelse.sentence,{
if_expression->if(bool_expression)ifsentenceelse.sentence,(
if_expression->if(bool_expression)ifsentenceelse.sentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集408:
printf_expression->printf(string,expressions).;,scanf
printf_expression->printf(string,expressions).;,printf
printf_expression->printf(string,expressions).;,else
printf_expression->printf(string,expressions).;,if
printf_expression->printf(string,expressions).;,while
printf_expression->printf(string,expressions).;,for
printf_expression->printf(string,expressions).;,return
printf_expression->printf(string,expressions).;,array
printf_expression->printf(string,expressions).;,string
printf_expression->printf(string,expressions).;,num
printf_expression->printf(string,expressions).;,%
printf_expression->printf(string,expressions).;,/
printf_expression->printf(string,expressions).;,*
printf_expression->printf(string,expressions).;,-
printf_expression->printf(string,expressions).;,+
printf_expression->printf(string,expressions).;,char
printf_expression->printf(string,expressions).;,double
printf_expression->printf(string,expressions).;,int
printf_expression->printf(string,expressions).;,}
printf_expression->printf(string,expressions).;,{
printf_expression->printf(string,expressions).;,(
printf_expression->printf(string,expressions).;,id
项目集409:
scanf_expression->scanf(string,expressions).;,scanf
scanf_expression->scanf(string,expressions).;,printf
scanf_expression->scanf(string,expressions).;,else
scanf_expression->scanf(string,expressions).;,if
scanf_expression->scanf(string,expressions).;,while
scanf_expression->scanf(string,expressions).;,for
scanf_expression->scanf(string,expressions).;,return
scanf_expression->scanf(string,expressions).;,array
scanf_expression->scanf(string,expressions).;,string
scanf_expression->scanf(string,expressions).;,num
scanf_expression->scanf(string,expressions).;,%
scanf_expression->scanf(string,expressions).;,/
scanf_expression->scanf(string,expressions).;,*
scanf_expression->scanf(string,expressions).;,-
scanf_expression->scanf(string,expressions).;,+
scanf_expression->scanf(string,expressions).;,char
scanf_expression->scanf(string,expressions).;,double
scanf_expression->scanf(string,expressions).;,int
scanf_expression->scanf(string,expressions).;,}
scanf_expression->scanf(string,expressions).;,{
scanf_expression->scanf(string,expressions).;,(
scanf_expression->scanf(string,expressions).;,id
项目集410:
nums->.num,}
nums->.num,nums,}
define->typearray[num]={.nums};,scanf
define->typearray[num]={.nums};,printf
define->typearray[num]={.nums};,else
define->typearray[num]={.nums};,if
define->typearray[num]={.nums};,while
define->typearray[num]={.nums};,for
define->typearray[num]={.nums};,return
define->typearray[num]={.nums};,array
define->typearray[num]={.nums};,string
define->typearray[num]={.nums};,num
define->typearray[num]={.nums};,%
define->typearray[num]={.nums};,/
define->typearray[num]={.nums};,*
define->typearray[num]={.nums};,-
define->typearray[num]={.nums};,+
define->typearray[num]={.nums};,char
define->typearray[num]={.nums};,double
define->typearray[num]={.nums};,int
define->typearray[num]={.nums};,}
define->typearray[num]={.nums};,{
define->typearray[num]={.nums};,(
define->typearray[num]={.nums};,id
项目集411:
define->typearray[]={string.};,scanf
define->typearray[]={string.};,printf
define->typearray[]={string.};,else
define->typearray[]={string.};,if
define->typearray[]={string.};,while
define->typearray[]={string.};,for
define->typearray[]={string.};,return
define->typearray[]={string.};,array
define->typearray[]={string.};,string
define->typearray[]={string.};,num
define->typearray[]={string.};,%
define->typearray[]={string.};,/
define->typearray[]={string.};,*
define->typearray[]={string.};,-
define->typearray[]={string.};,+
define->typearray[]={string.};,char
define->typearray[]={string.};,double
define->typearray[]={string.};,int
define->typearray[]={string.};,}
define->typearray[]={string.};,{
define->typearray[]={string.};,(
define->typearray[]={string.};,id
项目集412:
define->typearray[]={nums.};,scanf
define->typearray[]={nums.};,printf
define->typearray[]={nums.};,else
define->typearray[]={nums.};,if
define->typearray[]={nums.};,while
define->typearray[]={nums.};,for
define->typearray[]={nums.};,return
define->typearray[]={nums.};,array
define->typearray[]={nums.};,string
define->typearray[]={nums.};,num
define->typearray[]={nums.};,%
define->typearray[]={nums.};,/
define->typearray[]={nums.};,*
define->typearray[]={nums.};,-
define->typearray[]={nums.};,+
define->typearray[]={nums.};,char
define->typearray[]={nums.};,double
define->typearray[]={nums.};,int
define->typearray[]={nums.};,}
define->typearray[]={nums.};,{
define->typearray[]={nums.};,(
define->typearray[]={nums.};,id
项目集413:
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,id
项目集414:
if_expression->if(bool_expression)ifsentenceelsesentence,scanf
if_expression->if(bool_expression)ifsentenceelsesentence,printf
if_expression->if(bool_expression)ifsentenceelsesentence,else
if_expression->if(bool_expression)ifsentenceelsesentence,if
if_expression->if(bool_expression)ifsentenceelsesentence,while
if_expression->if(bool_expression)ifsentenceelsesentence,for
if_expression->if(bool_expression)ifsentenceelsesentence,return
if_expression->if(bool_expression)ifsentenceelsesentence,array
if_expression->if(bool_expression)ifsentenceelsesentence,string
if_expression->if(bool_expression)ifsentenceelsesentence,num
if_expression->if(bool_expression)ifsentenceelsesentence,%
if_expression->if(bool_expression)ifsentenceelsesentence,/
if_expression->if(bool_expression)ifsentenceelsesentence,*
if_expression->if(bool_expression)ifsentenceelsesentence,-
if_expression->if(bool_expression)ifsentenceelsesentence,+
if_expression->if(bool_expression)ifsentenceelsesentence,char
if_expression->if(bool_expression)ifsentenceelsesentence,double
if_expression->if(bool_expression)ifsentenceelsesentence,int
if_expression->if(bool_expression)ifsentenceelsesentence,}
if_expression->if(bool_expression)ifsentenceelsesentence,{
if_expression->if(bool_expression)ifsentenceelsesentence,(
if_expression->if(bool_expression)ifsentenceelsesentence,id
项目集415:
printf_expression->printf(string,expressions);,scanf
printf_expression->printf(string,expressions);,printf
printf_expression->printf(string,expressions);,else
printf_expression->printf(string,expressions);,if
printf_expression->printf(string,expressions);,while
printf_expression->printf(string,expressions);,for
printf_expression->printf(string,expressions);,return
printf_expression->printf(string,expressions);,array
printf_expression->printf(string,expressions);,string
printf_expression->printf(string,expressions);,num
printf_expression->printf(string,expressions);,%
printf_expression->printf(string,expressions);,/
printf_expression->printf(string,expressions);,*
printf_expression->printf(string,expressions);,-
printf_expression->printf(string,expressions);,+
printf_expression->printf(string,expressions);,char
printf_expression->printf(string,expressions);,double
printf_expression->printf(string,expressions);,int
printf_expression->printf(string,expressions);,}
printf_expression->printf(string,expressions);,{
printf_expression->printf(string,expressions);,(
printf_expression->printf(string,expressions);,id
项目集416:
scanf_expression->scanf(string,expressions);,scanf
scanf_expression->scanf(string,expressions);,printf
scanf_expression->scanf(string,expressions);,else
scanf_expression->scanf(string,expressions);,if
scanf_expression->scanf(string,expressions);,while
scanf_expression->scanf(string,expressions);,for
scanf_expression->scanf(string,expressions);,return
scanf_expression->scanf(string,expressions);,array
scanf_expression->scanf(string,expressions);,string
scanf_expression->scanf(string,expressions);,num
scanf_expression->scanf(string,expressions);,%
scanf_expression->scanf(string,expressions);,/
scanf_expression->scanf(string,expressions);,*
scanf_expression->scanf(string,expressions);,-
scanf_expression->scanf(string,expressions);,+
scanf_expression->scanf(string,expressions);,char
scanf_expression->scanf(string,expressions);,double
scanf_expression->scanf(string,expressions);,int
scanf_expression->scanf(string,expressions);,}
scanf_expression->scanf(string,expressions);,{
scanf_expression->scanf(string,expressions);,(
scanf_expression->scanf(string,expressions);,id
项目集417:
define->typearray[num]={nums.};,scanf
define->typearray[num]={nums.};,printf
define->typearray[num]={nums.};,else
define->typearray[num]={nums.};,if
define->typearray[num]={nums.};,while
define->typearray[num]={nums.};,for
define->typearray[num]={nums.};,return
define->typearray[num]={nums.};,array
define->typearray[num]={nums.};,string
define->typearray[num]={nums.};,num
define->typearray[num]={nums.};,%
define->typearray[num]={nums.};,/
define->typearray[num]={nums.};,*
define->typearray[num]={nums.};,-
define->typearray[num]={nums.};,+
define->typearray[num]={nums.};,char
define->typearray[num]={nums.};,double
define->typearray[num]={nums.};,int
define->typearray[num]={nums.};,}
define->typearray[num]={nums.};,{
define->typearray[num]={nums.};,(
define->typearray[num]={nums.};,id
项目集418:
define->typearray[]={string}.;,scanf
define->typearray[]={string}.;,printf
define->typearray[]={string}.;,else
define->typearray[]={string}.;,if
define->typearray[]={string}.;,while
define->typearray[]={string}.;,for
define->typearray[]={string}.;,return
define->typearray[]={string}.;,array
define->typearray[]={string}.;,string
define->typearray[]={string}.;,num
define->typearray[]={string}.;,%
define->typearray[]={string}.;,/
define->typearray[]={string}.;,*
define->typearray[]={string}.;,-
define->typearray[]={string}.;,+
define->typearray[]={string}.;,char
define->typearray[]={string}.;,double
define->typearray[]={string}.;,int
define->typearray[]={string}.;,}
define->typearray[]={string}.;,{
define->typearray[]={string}.;,(
define->typearray[]={string}.;,id
项目集419:
define->typearray[]={nums}.;,scanf
define->typearray[]={nums}.;,printf
define->typearray[]={nums}.;,else
define->typearray[]={nums}.;,if
define->typearray[]={nums}.;,while
define->typearray[]={nums}.;,for
define->typearray[]={nums}.;,return
define->typearray[]={nums}.;,array
define->typearray[]={nums}.;,string
define->typearray[]={nums}.;,num
define->typearray[]={nums}.;,%
define->typearray[]={nums}.;,/
define->typearray[]={nums}.;,*
define->typearray[]={nums}.;,-
define->typearray[]={nums}.;,+
define->typearray[]={nums}.;,char
define->typearray[]={nums}.;,double
define->typearray[]={nums}.;,int
define->typearray[]={nums}.;,}
define->typearray[]={nums}.;,{
define->typearray[]={nums}.;,(
define->typearray[]={nums}.;,id
项目集420:
scanf_expression->.scanf(string);,scanf
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
forsentence->.sentence,scanf
forsentence->.sentence,printf
forsentence->.sentence,else
forsentence->.sentence,if
forsentence->.sentence,while
forsentence->.sentence,for
forsentence->.sentence,return
forsentence->.sentence,array
forsentence->.sentence,string
forsentence->.sentence,num
forsentence->.sentence,%
forsentence->.sentence,/
forsentence->.sentence,*
forsentence->.sentence,-
forsentence->.sentence,+
forsentence->.sentence,char
forsentence->.sentence,double
forsentence->.sentence,int
forsentence->.sentence,}
forsentence->.sentence,{
forsentence->.sentence,(
forsentence->.sentence,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集421:
define->typearray[num]={nums}.;,scanf
define->typearray[num]={nums}.;,printf
define->typearray[num]={nums}.;,else
define->typearray[num]={nums}.;,if
define->typearray[num]={nums}.;,while
define->typearray[num]={nums}.;,for
define->typearray[num]={nums}.;,return
define->typearray[num]={nums}.;,array
define->typearray[num]={nums}.;,string
define->typearray[num]={nums}.;,num
define->typearray[num]={nums}.;,%
define->typearray[num]={nums}.;,/
define->typearray[num]={nums}.;,*
define->typearray[num]={nums}.;,-
define->typearray[num]={nums}.;,+
define->typearray[num]={nums}.;,char
define->typearray[num]={nums}.;,double
define->typearray[num]={nums}.;,int
define->typearray[num]={nums}.;,}
define->typearray[num]={nums}.;,{
define->typearray[num]={nums}.;,(
define->typearray[num]={nums}.;,id
项目集422:
define->typearray[]={string};,scanf
define->typearray[]={string};,printf
define->typearray[]={string};,else
define->typearray[]={string};,if
define->typearray[]={string};,while
define->typearray[]={string};,for
define->typearray[]={string};,return
define->typearray[]={string};,array
define->typearray[]={string};,string
define->typearray[]={string};,num
define->typearray[]={string};,%
define->typearray[]={string};,/
define->typearray[]={string};,*
define->typearray[]={string};,-
define->typearray[]={string};,+
define->typearray[]={string};,char
define->typearray[]={string};,double
define->typearray[]={string};,int
define->typearray[]={string};,}
define->typearray[]={string};,{
define->typearray[]={string};,(
define->typearray[]={string};,id
项目集423:
define->typearray[]={nums};,scanf
define->typearray[]={nums};,printf
define->typearray[]={nums};,else
define->typearray[]={nums};,if
define->typearray[]={nums};,while
define->typearray[]={nums};,for
define->typearray[]={nums};,return
define->typearray[]={nums};,array
define->typearray[]={nums};,string
define->typearray[]={nums};,num
define->typearray[]={nums};,%
define->typearray[]={nums};,/
define->typearray[]={nums};,*
define->typearray[]={nums};,-
define->typearray[]={nums};,+
define->typearray[]={nums};,char
define->typearray[]={nums};,double
define->typearray[]={nums};,int
define->typearray[]={nums};,}
define->typearray[]={nums};,{
define->typearray[]={nums};,(
define->typearray[]={nums};,id
项目集424:
forsentence->sentence,scanf
forsentence->sentence,printf
forsentence->sentence,else
forsentence->sentence,if
forsentence->sentence,while
forsentence->sentence,for
forsentence->sentence,return
forsentence->sentence,array
forsentence->sentence,string
forsentence->sentence,num
forsentence->sentence,%
forsentence->sentence,/
forsentence->sentence,*
forsentence->sentence,-
forsentence->sentence,+
forsentence->sentence,char
forsentence->sentence,double
forsentence->sentence,int
forsentence->sentence,}
forsentence->sentence,{
forsentence->sentence,(
forsentence->sentence,id
项目集425:
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,id
项目集426:
define->typearray[num]={nums};,scanf
define->typearray[num]={nums};,printf
define->typearray[num]={nums};,else
define->typearray[num]={nums};,if
define->typearray[num]={nums};,while
define->typearray[num]={nums};,for
define->typearray[num]={nums};,return
define->typearray[num]={nums};,array
define->typearray[num]={nums};,string
define->typearray[num]={nums};,num
define->typearray[num]={nums};,%
define->typearray[num]={nums};,/
define->typearray[num]={nums};,*
define->typearray[num]={nums};,-
define->typearray[num]={nums};,+
define->typearray[num]={nums};,char
define->typearray[num]={nums};,double
define->typearray[num]={nums};,int
define->typearray[num]={nums};,}
define->typearray[num]={nums};,{
define->typearray[num]={nums};,(
define->typearray[num]={nums};,id
项目0:
S'->.S,#
type->.char,id
shift:9
type->.double,id
shift:8
type->.int,id
shift:7
S->.function,#
function_type->.void,id
shift:5
function_type->.type,id
function_define->.function_typeid(function_define_list){block},char
function_define->.function_typeid(function_define_list){block},double
function_define->.function_typeid(function_define_list){block},int
function_define->.function_typeid(function_define_list){block},void
function_define->.function_typeid(function_define_list){block},#
function_define->.function_typeid(){block},char
function_define->.function_typeid(){block},double
function_define->.function_typeid(){block},int
function_define->.function_typeid(){block},void
function_define->.function_typeid(){block},#
function->.function_definefunction,#
function->.function_define,#
项目1:
S->function,#
reduce:13
项目2:
type->.char,id
shift:9
type->.double,id
shift:8
type->.int,id
shift:7
function_type->.void,id
shift:5
function_type->.type,id
function_define->.function_typeid(function_define_list){block},char
function_define->.function_typeid(function_define_list){block},double
function_define->.function_typeid(function_define_list){block},int
function_define->.function_typeid(function_define_list){block},void
function_define->.function_typeid(function_define_list){block},#
function_define->.function_typeid(){block},char
function_define->.function_typeid(){block},double
function_define->.function_typeid(){block},int
function_define->.function_typeid(){block},void
function_define->.function_typeid(){block},#
function->function_define.function,#
function->.function_definefunction,#
function->function_define,#
reduce:0
function->.function_define,#
项目3:
function_define->function_type.id(function_define_list){block},char
shift:11
function_define->function_type.id(function_define_list){block},double
function_define->function_type.id(function_define_list){block},int
function_define->function_type.id(function_define_list){block},void
function_define->function_type.id(function_define_list){block},#
function_define->function_type.id(){block},char
function_define->function_type.id(){block},double
function_define->function_type.id(){block},int
function_define->function_type.id(){block},void
function_define->function_type.id(){block},#
项目4:
function_type->type,id
reduce:4
项目5:
function_type->void,id
reduce:5
项目6:
S'->S,#
Accept
项目7:
type->int,id
reduce:14
项目8:
type->double,id
reduce:15
项目9:
type->char,id
reduce:16
项目10:
function->function_definefunction,#
reduce:1
项目11:
function_define->function_typeid.(function_define_list){block},char
shift:12
function_define->function_typeid.(function_define_list){block},double
function_define->function_typeid.(function_define_list){block},int
function_define->function_typeid.(function_define_list){block},void
function_define->function_typeid.(function_define_list){block},#
function_define->function_typeid.(){block},char
function_define->function_typeid.(){block},double
function_define->function_typeid.(){block},int
function_define->function_typeid.(){block},void
function_define->function_typeid.(){block},#
项目12:
type->.char,id
shift:9
type->.double,id
shift:8
type->.int,id
shift:7
function_define_list->.function_define_list,typeid,,
function_define_list->.function_define_list,typeid,)
function_define_list->.typeid,,
function_define_list->.typeid,)
function_define->function_typeid(.function_define_list){block},char
function_define->function_typeid(.function_define_list){block},double
function_define->function_typeid(.function_define_list){block},int
function_define->function_typeid(.function_define_list){block},void
function_define->function_typeid(.function_define_list){block},#
function_define->function_typeid(.){block},char
shift:13
function_define->function_typeid(.){block},double
function_define->function_typeid(.){block},int
function_define->function_typeid(.){block},void
function_define->function_typeid(.){block},#
项目13:
function_define->function_typeid().{block},char
shift:16
function_define->function_typeid().{block},double
function_define->function_typeid().{block},int
function_define->function_typeid().{block},void
function_define->function_typeid().{block},#
项目14:
function_define_list->function_define_list.,typeid,,
shift:18
function_define_list->function_define_list.,typeid,)
function_define->function_typeid(function_define_list.){block},char
shift:17
function_define->function_typeid(function_define_list.){block},double
function_define->function_typeid(function_define_list.){block},int
function_define->function_typeid(function_define_list.){block},void
function_define->function_typeid(function_define_list.){block},#
项目15:
function_define_list->type.id,,
shift:19
function_define_list->type.id,)
项目16:
scanf_expression->.scanf(string);,scanf
shift:53
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:52
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:48
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:41
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:36
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
function_define->function_typeid(){.block},char
function_define->function_typeid(){.block},double
function_define->function_typeid(){.block},int
function_define->function_typeid(){.block},void
function_define->function_typeid(){.block},#
项目17:
function_define->function_typeid(function_define_list).{block},char
shift:54
function_define->function_typeid(function_define_list).{block},double
function_define->function_typeid(function_define_list).{block},int
function_define->function_typeid(function_define_list).{block},void
function_define->function_typeid(function_define_list).{block},#
项目18:
type->.char,id
shift:9
type->.double,id
shift:8
type->.int,id
shift:7
function_define_list->function_define_list,.typeid,,
function_define_list->function_define_list,.typeid,)
项目19:
function_define_list->typeid,,
reduce:6
function_define_list->typeid,)
reduce:6
项目20:
Dec_expression->id.--,;
shift:59
Inc_expression->id.++,;
shift:58
set_value->id.=E,;
shift:57
F->id,%
reduce:32
F->id,/
reduce:32
F->id,*
reduce:32
F->id,-
reduce:32
F->id,+
reduce:32
F->id,;
reduce:32
function_call->id.(function_call_list),%
shift:56
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目21:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),;
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目22:
scanf_expression->.scanf(string);,scanf
shift:53
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:52
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:48
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:41
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:36
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->{.},scanf
shift:70
sentence->{.},printf
sentence->{.},if
sentence->{.},while
sentence->{.},for
sentence->{.},return
sentence->{.},array
sentence->{.},string
sentence->{.},num
sentence->{.},%
sentence->{.},/
sentence->{.},*
sentence->{.},-
sentence->{.},+
sentence->{.},char
sentence->{.},double
sentence->{.},int
sentence->{.},}
sentence->{.},{
sentence->{.},(
sentence->{.},id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->{.block},scanf
sentence->{.block},printf
sentence->{.block},if
sentence->{.block},while
sentence->{.block},for
sentence->{.block},return
sentence->{.block},array
sentence->{.block},string
sentence->{.block},num
sentence->{.block},%
sentence->{.block},/
sentence->{.block},*
sentence->{.block},-
sentence->{.block},+
sentence->{.block},char
sentence->{.block},double
sentence->{.block},int
sentence->{.block},}
sentence->{.block},{
sentence->{.block},(
sentence->{.block},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目23:
function_define->function_typeid(){block.},char
shift:71
function_define->function_typeid(){block.},double
function_define->function_typeid(){block.},int
function_define->function_typeid(){block.},void
function_define->function_typeid(){block.},#
项目24:
define->type.array[num];,scanf
shift:73
define->type.array[num];,printf
define->type.array[num];,if
define->type.array[num];,while
define->type.array[num];,for
define->type.array[num];,return
define->type.array[num];,array
define->type.array[num];,string
define->type.array[num];,num
define->type.array[num];,%
define->type.array[num];,/
define->type.array[num];,*
define->type.array[num];,-
define->type.array[num];,+
define->type.array[num];,char
define->type.array[num];,double
define->type.array[num];,int
define->type.array[num];,}
define->type.array[num];,{
define->type.array[num];,(
define->type.array[num];,id
define->type.array[]={nums};,scanf
define->type.array[]={nums};,printf
define->type.array[]={nums};,if
define->type.array[]={nums};,while
define->type.array[]={nums};,for
define->type.array[]={nums};,return
define->type.array[]={nums};,array
define->type.array[]={nums};,string
define->type.array[]={nums};,num
define->type.array[]={nums};,%
define->type.array[]={nums};,/
define->type.array[]={nums};,*
define->type.array[]={nums};,-
define->type.array[]={nums};,+
define->type.array[]={nums};,char
define->type.array[]={nums};,double
define->type.array[]={nums};,int
define->type.array[]={nums};,}
define->type.array[]={nums};,{
define->type.array[]={nums};,(
define->type.array[]={nums};,id
define->type.array[num]={nums};,scanf
define->type.array[num]={nums};,printf
define->type.array[num]={nums};,if
define->type.array[num]={nums};,while
define->type.array[num]={nums};,for
define->type.array[num]={nums};,return
define->type.array[num]={nums};,array
define->type.array[num]={nums};,string
define->type.array[num]={nums};,num
define->type.array[num]={nums};,%
define->type.array[num]={nums};,/
define->type.array[num]={nums};,*
define->type.array[num]={nums};,-
define->type.array[num]={nums};,+
define->type.array[num]={nums};,char
define->type.array[num]={nums};,double
define->type.array[num]={nums};,int
define->type.array[num]={nums};,}
define->type.array[num]={nums};,{
define->type.array[num]={nums};,(
define->type.array[num]={nums};,id
define->type.array[]={string};,scanf
define->type.array[]={string};,printf
define->type.array[]={string};,if
define->type.array[]={string};,while
define->type.array[]={string};,for
define->type.array[]={string};,return
define->type.array[]={string};,array
define->type.array[]={string};,string
define->type.array[]={string};,num
define->type.array[]={string};,%
define->type.array[]={string};,/
define->type.array[]={string};,*
define->type.array[]={string};,-
define->type.array[]={string};,+
define->type.array[]={string};,char
define->type.array[]={string};,double
define->type.array[]={string};,int
define->type.array[]={string};,}
define->type.array[]={string};,{
define->type.array[]={string};,(
define->type.array[]={string};,id
id_name->.id,=
shift:72
id_name->.id,;
define->type.id_name;,scanf
define->type.id_name;,printf
define->type.id_name;,if
define->type.id_name;,while
define->type.id_name;,for
define->type.id_name;,return
define->type.id_name;,array
define->type.id_name;,string
define->type.id_name;,num
define->type.id_name;,%
define->type.id_name;,/
define->type.id_name;,*
define->type.id_name;,-
define->type.id_name;,+
define->type.id_name;,char
define->type.id_name;,double
define->type.id_name;,int
define->type.id_name;,}
define->type.id_name;,{
define->type.id_name;,(
define->type.id_name;,id
define->type.id_name=E;,scanf
define->type.id_name=E;,printf
define->type.id_name=E;,if
define->type.id_name=E;,while
define->type.id_name=E;,for
define->type.id_name=E;,return
define->type.id_name=E;,array
define->type.id_name=E;,string
define->type.id_name=E;,num
define->type.id_name=E;,%
define->type.id_name=E;,/
define->type.id_name=E;,*
define->type.id_name=E;,-
define->type.id_name=E;,+
define->type.id_name=E;,char
define->type.id_name=E;,double
define->type.id_name=E;,int
define->type.id_name=E;,}
define->type.id_name=E;,{
define->type.id_name=E;,(
define->type.id_name=E;,id
项目25:
F->function_call,%
reduce:34
F->function_call,/
reduce:34
F->function_call,*
reduce:34
F->function_call,-
reduce:34
F->function_call,+
reduce:34
F->function_call,;
reduce:34
项目26:
E->E.-T,-
shift:77
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:76
E->E.+T,+
E->E.+T,;
sentence->E.;,scanf
shift:75
sentence->E.;,printf
sentence->E.;,if
sentence->E.;,while
sentence->E.;,for
sentence->E.;,return
sentence->E.;,array
sentence->E.;,string
sentence->E.;,num
sentence->E.;,%
sentence->E.;,/
sentence->E.;,*
sentence->E.;,-
sentence->E.;,+
sentence->E.;,char
sentence->E.;,double
sentence->E.;,int
sentence->E.;,}
sentence->E.;,{
sentence->E.;,(
sentence->E.;,id
项目27:
type->int,array
reduce:14
type->int,id
reduce:14
项目28:
type->double,array
reduce:15
type->double,id
reduce:15
项目29:
type->char,array
reduce:16
type->char,id
reduce:16
项目30:
scanf_expression->.scanf(string);,scanf
shift:53
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:52
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:48
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:41
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:36
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->sentence.block,}
block->.sentenceblock,}
block->sentence,}
reduce:17
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目31:
T->T.%F,%
shift:81
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,;
T->T./F,%
shift:80
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,%
shift:79
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->T,-
reduce:24
E->T,+
reduce:24
E->T,;
reduce:24
项目32:
T->F,%
reduce:28
T->F,/
reduce:28
T->F,*
reduce:28
T->F,-
reduce:28
T->F,+
reduce:28
T->F,;
reduce:28
项目33:
F->num,%
reduce:30
F->num,/
reduce:30
F->num,*
reduce:30
F->num,-
reduce:30
F->num,+
reduce:30
F->num,;
reduce:30
项目34:
F->string,%
reduce:31
F->string,/
reduce:31
F->string,*
reduce:31
F->string,-
reduce:31
F->string,+
reduce:31
F->string,;
reduce:31
项目35:
set_value->array.[E]=E,;
shift:82
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目36:
sentence->return.E;,scanf
sentence->return.E;,printf
sentence->return.E;,if
sentence->return.E;,while
sentence->return.E;,for
sentence->return.E;,return
sentence->return.E;,array
sentence->return.E;,string
sentence->return.E;,num
sentence->return.E;,%
sentence->return.E;,/
sentence->return.E;,*
sentence->return.E;,-
sentence->return.E;,+
sentence->return.E;,char
sentence->return.E;,double
sentence->return.E;,int
sentence->return.E;,}
sentence->return.E;,{
sentence->return.E;,(
sentence->return.E;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目37:
sentence->define,scanf
reduce:36
sentence->define,printf
reduce:36
sentence->define,if
reduce:36
sentence->define,while
reduce:36
sentence->define,for
reduce:36
sentence->define,return
reduce:36
sentence->define,array
reduce:36
sentence->define,string
reduce:36
sentence->define,num
reduce:36
sentence->define,%
reduce:36
sentence->define,/
reduce:36
sentence->define,*
reduce:36
sentence->define,-
reduce:36
sentence->define,+
reduce:36
sentence->define,char
reduce:36
sentence->define,double
reduce:36
sentence->define,int
reduce:36
sentence->define,}
reduce:36
sentence->define,{
reduce:36
sentence->define,(
reduce:36
sentence->define,id
reduce:36
项目38:
sentence->set_value.;,scanf
shift:86
sentence->set_value.;,printf
sentence->set_value.;,if
sentence->set_value.;,while
sentence->set_value.;,for
sentence->set_value.;,return
sentence->set_value.;,array
sentence->set_value.;,string
sentence->set_value.;,num
sentence->set_value.;,%
sentence->set_value.;,/
sentence->set_value.;,*
sentence->set_value.;,-
sentence->set_value.;,+
sentence->set_value.;,char
sentence->set_value.;,double
sentence->set_value.;,int
sentence->set_value.;,}
sentence->set_value.;,{
sentence->set_value.;,(
sentence->set_value.;,id
项目39:
sentence->loop_expression,scanf
reduce:49
sentence->loop_expression,printf
reduce:49
sentence->loop_expression,if
reduce:49
sentence->loop_expression,while
reduce:49
sentence->loop_expression,for
reduce:49
sentence->loop_expression,return
reduce:49
sentence->loop_expression,array
reduce:49
sentence->loop_expression,string
reduce:49
sentence->loop_expression,num
reduce:49
sentence->loop_expression,%
reduce:49
sentence->loop_expression,/
reduce:49
sentence->loop_expression,*
reduce:49
sentence->loop_expression,-
reduce:49
sentence->loop_expression,+
reduce:49
sentence->loop_expression,char
reduce:49
sentence->loop_expression,double
reduce:49
sentence->loop_expression,int
reduce:49
sentence->loop_expression,}
reduce:49
sentence->loop_expression,{
reduce:49
sentence->loop_expression,(
reduce:49
sentence->loop_expression,id
reduce:49
项目40:
sentence->while_expression,scanf
reduce:50
sentence->while_expression,printf
reduce:50
sentence->while_expression,if
reduce:50
sentence->while_expression,while
reduce:50
sentence->while_expression,for
reduce:50
sentence->while_expression,return
reduce:50
sentence->while_expression,array
reduce:50
sentence->while_expression,string
reduce:50
sentence->while_expression,num
reduce:50
sentence->while_expression,%
reduce:50
sentence->while_expression,/
reduce:50
sentence->while_expression,*
reduce:50
sentence->while_expression,-
reduce:50
sentence->while_expression,+
reduce:50
sentence->while_expression,char
reduce:50
sentence->while_expression,double
reduce:50
sentence->while_expression,int
reduce:50
sentence->while_expression,}
reduce:50
sentence->while_expression,{
reduce:50
sentence->while_expression,(
reduce:50
sentence->while_expression,id
reduce:50
项目41:
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:87
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,id
项目42:
sentence->IncorDec.;,scanf
shift:88
sentence->IncorDec.;,printf
sentence->IncorDec.;,if
sentence->IncorDec.;,while
sentence->IncorDec.;,for
sentence->IncorDec.;,return
sentence->IncorDec.;,array
sentence->IncorDec.;,string
sentence->IncorDec.;,num
sentence->IncorDec.;,%
sentence->IncorDec.;,/
sentence->IncorDec.;,*
sentence->IncorDec.;,-
sentence->IncorDec.;,+
sentence->IncorDec.;,char
sentence->IncorDec.;,double
sentence->IncorDec.;,int
sentence->IncorDec.;,}
sentence->IncorDec.;,{
sentence->IncorDec.;,(
sentence->IncorDec.;,id
项目43:
while_expression->while1.(bool_expression)whilesentence,scanf
shift:89
while_expression->while1.(bool_expression)whilesentence,printf
while_expression->while1.(bool_expression)whilesentence,if
while_expression->while1.(bool_expression)whilesentence,while
while_expression->while1.(bool_expression)whilesentence,for
while_expression->while1.(bool_expression)whilesentence,return
while_expression->while1.(bool_expression)whilesentence,array
while_expression->while1.(bool_expression)whilesentence,string
while_expression->while1.(bool_expression)whilesentence,num
while_expression->while1.(bool_expression)whilesentence,%
while_expression->while1.(bool_expression)whilesentence,/
while_expression->while1.(bool_expression)whilesentence,*
while_expression->while1.(bool_expression)whilesentence,-
while_expression->while1.(bool_expression)whilesentence,+
while_expression->while1.(bool_expression)whilesentence,char
while_expression->while1.(bool_expression)whilesentence,double
while_expression->while1.(bool_expression)whilesentence,int
while_expression->while1.(bool_expression)whilesentence,}
while_expression->while1.(bool_expression)whilesentence,{
while_expression->while1.(bool_expression)whilesentence,(
while_expression->while1.(bool_expression)whilesentence,id
项目44:
while1->while,(
reduce:53
项目45:
IncorDec->Inc_expression,;
reduce:68
项目46:
IncorDec->Dec_expression,;
reduce:69
项目47:
sentence->if_expression,scanf
reduce:72
sentence->if_expression,printf
reduce:72
sentence->if_expression,if
reduce:72
sentence->if_expression,while
reduce:72
sentence->if_expression,for
reduce:72
sentence->if_expression,return
reduce:72
sentence->if_expression,array
reduce:72
sentence->if_expression,string
reduce:72
sentence->if_expression,num
reduce:72
sentence->if_expression,%
reduce:72
sentence->if_expression,/
reduce:72
sentence->if_expression,*
reduce:72
sentence->if_expression,-
reduce:72
sentence->if_expression,+
reduce:72
sentence->if_expression,char
reduce:72
sentence->if_expression,double
reduce:72
sentence->if_expression,int
reduce:72
sentence->if_expression,}
reduce:72
sentence->if_expression,{
reduce:72
sentence->if_expression,(
reduce:72
sentence->if_expression,id
reduce:72
项目48:
if_expression->if.(bool_expression)ifsentenceelsesentence,scanf
shift:90
if_expression->if.(bool_expression)ifsentenceelsesentence,printf
if_expression->if.(bool_expression)ifsentenceelsesentence,if
if_expression->if.(bool_expression)ifsentenceelsesentence,while
if_expression->if.(bool_expression)ifsentenceelsesentence,for
if_expression->if.(bool_expression)ifsentenceelsesentence,return
if_expression->if.(bool_expression)ifsentenceelsesentence,array
if_expression->if.(bool_expression)ifsentenceelsesentence,string
if_expression->if.(bool_expression)ifsentenceelsesentence,num
if_expression->if.(bool_expression)ifsentenceelsesentence,%
if_expression->if.(bool_expression)ifsentenceelsesentence,/
if_expression->if.(bool_expression)ifsentenceelsesentence,*
if_expression->if.(bool_expression)ifsentenceelsesentence,-
if_expression->if.(bool_expression)ifsentenceelsesentence,+
if_expression->if.(bool_expression)ifsentenceelsesentence,char
if_expression->if.(bool_expression)ifsentenceelsesentence,double
if_expression->if.(bool_expression)ifsentenceelsesentence,int
if_expression->if.(bool_expression)ifsentenceelsesentence,}
if_expression->if.(bool_expression)ifsentenceelsesentence,{
if_expression->if.(bool_expression)ifsentenceelsesentence,(
if_expression->if.(bool_expression)ifsentenceelsesentence,id
if_expression->if.(bool_expression)sentence,scanf
if_expression->if.(bool_expression)sentence,printf
if_expression->if.(bool_expression)sentence,if
if_expression->if.(bool_expression)sentence,while
if_expression->if.(bool_expression)sentence,for
if_expression->if.(bool_expression)sentence,return
if_expression->if.(bool_expression)sentence,array
if_expression->if.(bool_expression)sentence,string
if_expression->if.(bool_expression)sentence,num
if_expression->if.(bool_expression)sentence,%
if_expression->if.(bool_expression)sentence,/
if_expression->if.(bool_expression)sentence,*
if_expression->if.(bool_expression)sentence,-
if_expression->if.(bool_expression)sentence,+
if_expression->if.(bool_expression)sentence,char
if_expression->if.(bool_expression)sentence,double
if_expression->if.(bool_expression)sentence,int
if_expression->if.(bool_expression)sentence,}
if_expression->if.(bool_expression)sentence,{
if_expression->if.(bool_expression)sentence,(
if_expression->if.(bool_expression)sentence,id
项目49:
sentence->inout_expression,scanf
reduce:76
sentence->inout_expression,printf
reduce:76
sentence->inout_expression,if
reduce:76
sentence->inout_expression,while
reduce:76
sentence->inout_expression,for
reduce:76
sentence->inout_expression,return
reduce:76
sentence->inout_expression,array
reduce:76
sentence->inout_expression,string
reduce:76
sentence->inout_expression,num
reduce:76
sentence->inout_expression,%
reduce:76
sentence->inout_expression,/
reduce:76
sentence->inout_expression,*
reduce:76
sentence->inout_expression,-
reduce:76
sentence->inout_expression,+
reduce:76
sentence->inout_expression,char
reduce:76
sentence->inout_expression,double
reduce:76
sentence->inout_expression,int
reduce:76
sentence->inout_expression,}
reduce:76
sentence->inout_expression,{
reduce:76
sentence->inout_expression,(
reduce:76
sentence->inout_expression,id
reduce:76
项目50:
inout_expression->printf_expression,scanf
reduce:77
inout_expression->printf_expression,printf
reduce:77
inout_expression->printf_expression,if
reduce:77
inout_expression->printf_expression,while
reduce:77
inout_expression->printf_expression,for
reduce:77
inout_expression->printf_expression,return
reduce:77
inout_expression->printf_expression,array
reduce:77
inout_expression->printf_expression,string
reduce:77
inout_expression->printf_expression,num
reduce:77
inout_expression->printf_expression,%
reduce:77
inout_expression->printf_expression,/
reduce:77
inout_expression->printf_expression,*
reduce:77
inout_expression->printf_expression,-
reduce:77
inout_expression->printf_expression,+
reduce:77
inout_expression->printf_expression,char
reduce:77
inout_expression->printf_expression,double
reduce:77
inout_expression->printf_expression,int
reduce:77
inout_expression->printf_expression,}
reduce:77
inout_expression->printf_expression,{
reduce:77
inout_expression->printf_expression,(
reduce:77
inout_expression->printf_expression,id
reduce:77
项目51:
inout_expression->scanf_expression,scanf
reduce:78
inout_expression->scanf_expression,printf
reduce:78
inout_expression->scanf_expression,if
reduce:78
inout_expression->scanf_expression,while
reduce:78
inout_expression->scanf_expression,for
reduce:78
inout_expression->scanf_expression,return
reduce:78
inout_expression->scanf_expression,array
reduce:78
inout_expression->scanf_expression,string
reduce:78
inout_expression->scanf_expression,num
reduce:78
inout_expression->scanf_expression,%
reduce:78
inout_expression->scanf_expression,/
reduce:78
inout_expression->scanf_expression,*
reduce:78
inout_expression->scanf_expression,-
reduce:78
inout_expression->scanf_expression,+
reduce:78
inout_expression->scanf_expression,char
reduce:78
inout_expression->scanf_expression,double
reduce:78
inout_expression->scanf_expression,int
reduce:78
inout_expression->scanf_expression,}
reduce:78
inout_expression->scanf_expression,{
reduce:78
inout_expression->scanf_expression,(
reduce:78
inout_expression->scanf_expression,id
reduce:78
项目52:
printf_expression->printf.(string,expressions);,scanf
shift:91
printf_expression->printf.(string,expressions);,printf
printf_expression->printf.(string,expressions);,if
printf_expression->printf.(string,expressions);,while
printf_expression->printf.(string,expressions);,for
printf_expression->printf.(string,expressions);,return
printf_expression->printf.(string,expressions);,array
printf_expression->printf.(string,expressions);,string
printf_expression->printf.(string,expressions);,num
printf_expression->printf.(string,expressions);,%
printf_expression->printf.(string,expressions);,/
printf_expression->printf.(string,expressions);,*
printf_expression->printf.(string,expressions);,-
printf_expression->printf.(string,expressions);,+
printf_expression->printf.(string,expressions);,char
printf_expression->printf.(string,expressions);,double
printf_expression->printf.(string,expressions);,int
printf_expression->printf.(string,expressions);,}
printf_expression->printf.(string,expressions);,{
printf_expression->printf.(string,expressions);,(
printf_expression->printf.(string,expressions);,id
printf_expression->printf.(string);,scanf
printf_expression->printf.(string);,printf
printf_expression->printf.(string);,if
printf_expression->printf.(string);,while
printf_expression->printf.(string);,for
printf_expression->printf.(string);,return
printf_expression->printf.(string);,array
printf_expression->printf.(string);,string
printf_expression->printf.(string);,num
printf_expression->printf.(string);,%
printf_expression->printf.(string);,/
printf_expression->printf.(string);,*
printf_expression->printf.(string);,-
printf_expression->printf.(string);,+
printf_expression->printf.(string);,char
printf_expression->printf.(string);,double
printf_expression->printf.(string);,int
printf_expression->printf.(string);,}
printf_expression->printf.(string);,{
printf_expression->printf.(string);,(
printf_expression->printf.(string);,id
项目53:
scanf_expression->scanf.(string);,scanf
shift:92
scanf_expression->scanf.(string);,printf
scanf_expression->scanf.(string);,if
scanf_expression->scanf.(string);,while
scanf_expression->scanf.(string);,for
scanf_expression->scanf.(string);,return
scanf_expression->scanf.(string);,array
scanf_expression->scanf.(string);,string
scanf_expression->scanf.(string);,num
scanf_expression->scanf.(string);,%
scanf_expression->scanf.(string);,/
scanf_expression->scanf.(string);,*
scanf_expression->scanf.(string);,-
scanf_expression->scanf.(string);,+
scanf_expression->scanf.(string);,char
scanf_expression->scanf.(string);,double
scanf_expression->scanf.(string);,int
scanf_expression->scanf.(string);,}
scanf_expression->scanf.(string);,{
scanf_expression->scanf.(string);,(
scanf_expression->scanf.(string);,id
scanf_expression->scanf.(string,expressions);,scanf
scanf_expression->scanf.(string,expressions);,printf
scanf_expression->scanf.(string,expressions);,if
scanf_expression->scanf.(string,expressions);,while
scanf_expression->scanf.(string,expressions);,for
scanf_expression->scanf.(string,expressions);,return
scanf_expression->scanf.(string,expressions);,array
scanf_expression->scanf.(string,expressions);,string
scanf_expression->scanf.(string,expressions);,num
scanf_expression->scanf.(string,expressions);,%
scanf_expression->scanf.(string,expressions);,/
scanf_expression->scanf.(string,expressions);,*
scanf_expression->scanf.(string,expressions);,-
scanf_expression->scanf.(string,expressions);,+
scanf_expression->scanf.(string,expressions);,char
scanf_expression->scanf.(string,expressions);,double
scanf_expression->scanf.(string,expressions);,int
scanf_expression->scanf.(string,expressions);,}
scanf_expression->scanf.(string,expressions);,{
scanf_expression->scanf.(string,expressions);,(
scanf_expression->scanf.(string,expressions);,id
项目54:
scanf_expression->.scanf(string);,scanf
shift:53
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:52
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:48
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:41
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:36
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
function_define->function_typeid(function_define_list){.block},char
function_define->function_typeid(function_define_list){.block},double
function_define->function_typeid(function_define_list){.block},int
function_define->function_typeid(function_define_list){.block},void
function_define->function_typeid(function_define_list){.block},#
项目55:
function_define_list->function_define_list,type.id,,
shift:94
function_define_list->function_define_list,type.id,)
项目56:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),%
shift:97
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目57:
set_value->id=.E,;
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目58:
Inc_expression->id++,;
reduce:70
项目59:
Dec_expression->id--,;
reduce:71
项目60:
F->id,%
reduce:32
F->id,/
reduce:32
F->id,*
reduce:32
F->id,-
reduce:32
F->id,+
reduce:32
F->id,)
reduce:32
function_call->id.(function_call_list),%
shift:108
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),)
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),)
项目61:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),)
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目62:
F->function_call,%
reduce:34
F->function_call,/
reduce:34
F->function_call,*
reduce:34
F->function_call,-
reduce:34
F->function_call,+
reduce:34
F->function_call,)
reduce:34
项目63:
F->(E.),%
shift:110
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),;
E->E.-T,-
shift:112
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:111
E->E.+T,+
E->E.+T,)
项目64:
T->T.%F,%
shift:115
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,)
T->T./F,%
shift:114
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,%
shift:113
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->T,-
reduce:24
E->T,+
reduce:24
E->T,)
reduce:24
项目65:
T->F,%
reduce:28
T->F,/
reduce:28
T->F,*
reduce:28
T->F,-
reduce:28
T->F,+
reduce:28
T->F,)
reduce:28
项目66:
F->num,%
reduce:30
F->num,/
reduce:30
F->num,*
reduce:30
F->num,-
reduce:30
F->num,+
reduce:30
F->num,)
reduce:30
项目67:
F->string,%
reduce:31
F->string,/
reduce:31
F->string,*
reduce:31
F->string,-
reduce:31
F->string,+
reduce:31
F->string,)
reduce:31
项目68:
F->array.[E],%
shift:116
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],)
项目69:
sentence->{block.},scanf
shift:117
sentence->{block.},printf
sentence->{block.},if
sentence->{block.},while
sentence->{block.},for
sentence->{block.},return
sentence->{block.},array
sentence->{block.},string
sentence->{block.},num
sentence->{block.},%
sentence->{block.},/
sentence->{block.},*
sentence->{block.},-
sentence->{block.},+
sentence->{block.},char
sentence->{block.},double
sentence->{block.},int
sentence->{block.},}
sentence->{block.},{
sentence->{block.},(
sentence->{block.},id
项目70:
sentence->{},scanf
reduce:20
sentence->{},printf
reduce:20
sentence->{},if
reduce:20
sentence->{},while
reduce:20
sentence->{},for
reduce:20
sentence->{},return
reduce:20
sentence->{},array
reduce:20
sentence->{},string
reduce:20
sentence->{},num
reduce:20
sentence->{},%
reduce:20
sentence->{},/
reduce:20
sentence->{},*
reduce:20
sentence->{},-
reduce:20
sentence->{},+
reduce:20
sentence->{},char
reduce:20
sentence->{},double
reduce:20
sentence->{},int
reduce:20
sentence->{},}
reduce:20
sentence->{},{
reduce:20
sentence->{},(
reduce:20
sentence->{},id
reduce:20
项目71:
function_define->function_typeid(){block},char
reduce:2
function_define->function_typeid(){block},double
reduce:2
function_define->function_typeid(){block},int
reduce:2
function_define->function_typeid(){block},void
reduce:2
function_define->function_typeid(){block},#
reduce:2
项目72:
id_name->id,=
reduce:39
id_name->id,;
reduce:39
项目73:
define->typearray.[num];,scanf
shift:118
define->typearray.[num];,printf
define->typearray.[num];,if
define->typearray.[num];,while
define->typearray.[num];,for
define->typearray.[num];,return
define->typearray.[num];,array
define->typearray.[num];,string
define->typearray.[num];,num
define->typearray.[num];,%
define->typearray.[num];,/
define->typearray.[num];,*
define->typearray.[num];,-
define->typearray.[num];,+
define->typearray.[num];,char
define->typearray.[num];,double
define->typearray.[num];,int
define->typearray.[num];,}
define->typearray.[num];,{
define->typearray.[num];,(
define->typearray.[num];,id
define->typearray.[]={nums};,scanf
define->typearray.[]={nums};,printf
define->typearray.[]={nums};,if
define->typearray.[]={nums};,while
define->typearray.[]={nums};,for
define->typearray.[]={nums};,return
define->typearray.[]={nums};,array
define->typearray.[]={nums};,string
define->typearray.[]={nums};,num
define->typearray.[]={nums};,%
define->typearray.[]={nums};,/
define->typearray.[]={nums};,*
define->typearray.[]={nums};,-
define->typearray.[]={nums};,+
define->typearray.[]={nums};,char
define->typearray.[]={nums};,double
define->typearray.[]={nums};,int
define->typearray.[]={nums};,}
define->typearray.[]={nums};,{
define->typearray.[]={nums};,(
define->typearray.[]={nums};,id
define->typearray.[num]={nums};,scanf
define->typearray.[num]={nums};,printf
define->typearray.[num]={nums};,if
define->typearray.[num]={nums};,while
define->typearray.[num]={nums};,for
define->typearray.[num]={nums};,return
define->typearray.[num]={nums};,array
define->typearray.[num]={nums};,string
define->typearray.[num]={nums};,num
define->typearray.[num]={nums};,%
define->typearray.[num]={nums};,/
define->typearray.[num]={nums};,*
define->typearray.[num]={nums};,-
define->typearray.[num]={nums};,+
define->typearray.[num]={nums};,char
define->typearray.[num]={nums};,double
define->typearray.[num]={nums};,int
define->typearray.[num]={nums};,}
define->typearray.[num]={nums};,{
define->typearray.[num]={nums};,(
define->typearray.[num]={nums};,id
define->typearray.[]={string};,scanf
define->typearray.[]={string};,printf
define->typearray.[]={string};,if
define->typearray.[]={string};,while
define->typearray.[]={string};,for
define->typearray.[]={string};,return
define->typearray.[]={string};,array
define->typearray.[]={string};,string
define->typearray.[]={string};,num
define->typearray.[]={string};,%
define->typearray.[]={string};,/
define->typearray.[]={string};,*
define->typearray.[]={string};,-
define->typearray.[]={string};,+
define->typearray.[]={string};,char
define->typearray.[]={string};,double
define->typearray.[]={string};,int
define->typearray.[]={string};,}
define->typearray.[]={string};,{
define->typearray.[]={string};,(
define->typearray.[]={string};,id
项目74:
define->typeid_name.;,scanf
shift:119
define->typeid_name.;,printf
define->typeid_name.;,if
define->typeid_name.;,while
define->typeid_name.;,for
define->typeid_name.;,return
define->typeid_name.;,array
define->typeid_name.;,string
define->typeid_name.;,num
define->typeid_name.;,%
define->typeid_name.;,/
define->typeid_name.;,*
define->typeid_name.;,-
define->typeid_name.;,+
define->typeid_name.;,char
define->typeid_name.;,double
define->typeid_name.;,int
define->typeid_name.;,}
define->typeid_name.;,{
define->typeid_name.;,(
define->typeid_name.;,id
define->typeid_name.=E;,scanf
shift:120
define->typeid_name.=E;,printf
define->typeid_name.=E;,if
define->typeid_name.=E;,while
define->typeid_name.=E;,for
define->typeid_name.=E;,return
define->typeid_name.=E;,array
define->typeid_name.=E;,string
define->typeid_name.=E;,num
define->typeid_name.=E;,%
define->typeid_name.=E;,/
define->typeid_name.=E;,*
define->typeid_name.=E;,-
define->typeid_name.=E;,+
define->typeid_name.=E;,char
define->typeid_name.=E;,double
define->typeid_name.=E;,int
define->typeid_name.=E;,}
define->typeid_name.=E;,{
define->typeid_name.=E;,(
define->typeid_name.=E;,id
项目75:
sentence->E;,scanf
reduce:21
sentence->E;,printf
reduce:21
sentence->E;,if
reduce:21
sentence->E;,while
reduce:21
sentence->E;,for
reduce:21
sentence->E;,return
reduce:21
sentence->E;,array
reduce:21
sentence->E;,string
reduce:21
sentence->E;,num
reduce:21
sentence->E;,%
reduce:21
sentence->E;,/
reduce:21
sentence->E;,*
reduce:21
sentence->E;,-
reduce:21
sentence->E;,+
reduce:21
sentence->E;,char
reduce:21
sentence->E;,double
reduce:21
sentence->E;,int
reduce:21
sentence->E;,}
reduce:21
sentence->E;,{
reduce:21
sentence->E;,(
reduce:21
sentence->E;,id
reduce:21
项目76:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->E+.T,-
E->E+.T,+
E->E+.T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目77:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->E-.T,-
E->E-.T,+
E->E-.T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目78:
block->sentenceblock,}
reduce:18
项目79:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目80:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目81:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
T->T%.F,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目82:
set_value->array[.E]=E,;
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目83:
F->id,%
reduce:32
F->id,/
reduce:32
F->id,*
reduce:32
F->id,-
reduce:32
F->id,+
reduce:32
F->id,;
reduce:32
function_call->id.(function_call_list),%
shift:56
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目84:
sentence->returnE.;,scanf
shift:135
sentence->returnE.;,printf
sentence->returnE.;,if
sentence->returnE.;,while
sentence->returnE.;,for
sentence->returnE.;,return
sentence->returnE.;,array
sentence->returnE.;,string
sentence->returnE.;,num
sentence->returnE.;,%
sentence->returnE.;,/
sentence->returnE.;,*
sentence->returnE.;,-
sentence->returnE.;,+
sentence->returnE.;,char
sentence->returnE.;,double
sentence->returnE.;,int
sentence->returnE.;,}
sentence->returnE.;,{
sentence->returnE.;,(
sentence->returnE.;,id
E->E.-T,-
shift:77
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:76
E->E.+T,+
E->E.+T,;
项目85:
F->array.[E],%
shift:136
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目86:
sentence->set_value;,scanf
reduce:46
sentence->set_value;,printf
reduce:46
sentence->set_value;,if
reduce:46
sentence->set_value;,while
reduce:46
sentence->set_value;,for
reduce:46
sentence->set_value;,return
reduce:46
sentence->set_value;,array
reduce:46
sentence->set_value;,string
reduce:46
sentence->set_value;,num
reduce:46
sentence->set_value;,%
reduce:46
sentence->set_value;,/
reduce:46
sentence->set_value;,*
reduce:46
sentence->set_value;,-
reduce:46
sentence->set_value;,+
reduce:46
sentence->set_value;,char
reduce:46
sentence->set_value;,double
reduce:46
sentence->set_value;,int
reduce:46
sentence->set_value;,}
reduce:46
sentence->set_value;,{
reduce:46
sentence->set_value;,(
reduce:46
sentence->set_value;,id
reduce:46
项目87:
for_set_value->.set_value,;
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,id
set_value->.array[E]=E,;
shift:138
set_value->.id=E,;
shift:137
项目88:
sentence->IncorDec;,scanf
reduce:67
sentence->IncorDec;,printf
reduce:67
sentence->IncorDec;,if
reduce:67
sentence->IncorDec;,while
reduce:67
sentence->IncorDec;,for
reduce:67
sentence->IncorDec;,return
reduce:67
sentence->IncorDec;,array
reduce:67
sentence->IncorDec;,string
reduce:67
sentence->IncorDec;,num
reduce:67
sentence->IncorDec;,%
reduce:67
sentence->IncorDec;,/
reduce:67
sentence->IncorDec;,*
reduce:67
sentence->IncorDec;,-
reduce:67
sentence->IncorDec;,+
reduce:67
sentence->IncorDec;,char
reduce:67
sentence->IncorDec;,double
reduce:67
sentence->IncorDec;,int
reduce:67
sentence->IncorDec;,}
reduce:67
sentence->IncorDec;,{
reduce:67
sentence->IncorDec;,(
reduce:67
sentence->IncorDec;,id
reduce:67
项目89:
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
while_expression->while1(.bool_expression)whilesentence,scanf
while_expression->while1(.bool_expression)whilesentence,printf
while_expression->while1(.bool_expression)whilesentence,if
while_expression->while1(.bool_expression)whilesentence,while
while_expression->while1(.bool_expression)whilesentence,for
while_expression->while1(.bool_expression)whilesentence,return
while_expression->while1(.bool_expression)whilesentence,array
while_expression->while1(.bool_expression)whilesentence,string
while_expression->while1(.bool_expression)whilesentence,num
while_expression->while1(.bool_expression)whilesentence,%
while_expression->while1(.bool_expression)whilesentence,/
while_expression->while1(.bool_expression)whilesentence,*
while_expression->while1(.bool_expression)whilesentence,-
while_expression->while1(.bool_expression)whilesentence,+
while_expression->while1(.bool_expression)whilesentence,char
while_expression->while1(.bool_expression)whilesentence,double
while_expression->while1(.bool_expression)whilesentence,int
while_expression->while1(.bool_expression)whilesentence,}
while_expression->while1(.bool_expression)whilesentence,{
while_expression->while1(.bool_expression)whilesentence,(
while_expression->while1(.bool_expression)whilesentence,id
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],!=
shift:149
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,!=
shift:141
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,!=
shift:148
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,!=
shift:147
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),!=
shift:142
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目90:
if_expression->if(.bool_expression)ifsentenceelsesentence,scanf
if_expression->if(.bool_expression)ifsentenceelsesentence,printf
if_expression->if(.bool_expression)ifsentenceelsesentence,if
if_expression->if(.bool_expression)ifsentenceelsesentence,while
if_expression->if(.bool_expression)ifsentenceelsesentence,for
if_expression->if(.bool_expression)ifsentenceelsesentence,return
if_expression->if(.bool_expression)ifsentenceelsesentence,array
if_expression->if(.bool_expression)ifsentenceelsesentence,string
if_expression->if(.bool_expression)ifsentenceelsesentence,num
if_expression->if(.bool_expression)ifsentenceelsesentence,%
if_expression->if(.bool_expression)ifsentenceelsesentence,/
if_expression->if(.bool_expression)ifsentenceelsesentence,*
if_expression->if(.bool_expression)ifsentenceelsesentence,-
if_expression->if(.bool_expression)ifsentenceelsesentence,+
if_expression->if(.bool_expression)ifsentenceelsesentence,char
if_expression->if(.bool_expression)ifsentenceelsesentence,double
if_expression->if(.bool_expression)ifsentenceelsesentence,int
if_expression->if(.bool_expression)ifsentenceelsesentence,}
if_expression->if(.bool_expression)ifsentenceelsesentence,{
if_expression->if(.bool_expression)ifsentenceelsesentence,(
if_expression->if(.bool_expression)ifsentenceelsesentence,id
if_expression->if(.bool_expression)sentence,scanf
if_expression->if(.bool_expression)sentence,printf
if_expression->if(.bool_expression)sentence,if
if_expression->if(.bool_expression)sentence,while
if_expression->if(.bool_expression)sentence,for
if_expression->if(.bool_expression)sentence,return
if_expression->if(.bool_expression)sentence,array
if_expression->if(.bool_expression)sentence,string
if_expression->if(.bool_expression)sentence,num
if_expression->if(.bool_expression)sentence,%
if_expression->if(.bool_expression)sentence,/
if_expression->if(.bool_expression)sentence,*
if_expression->if(.bool_expression)sentence,-
if_expression->if(.bool_expression)sentence,+
if_expression->if(.bool_expression)sentence,char
if_expression->if(.bool_expression)sentence,double
if_expression->if(.bool_expression)sentence,int
if_expression->if(.bool_expression)sentence,}
if_expression->if(.bool_expression)sentence,{
if_expression->if(.bool_expression)sentence,(
if_expression->if(.bool_expression)sentence,id
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],!=
shift:149
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,!=
shift:141
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,!=
shift:148
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,!=
shift:147
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),!=
shift:142
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目91:
printf_expression->printf(.string,expressions);,scanf
shift:153
printf_expression->printf(.string,expressions);,printf
printf_expression->printf(.string,expressions);,if
printf_expression->printf(.string,expressions);,while
printf_expression->printf(.string,expressions);,for
printf_expression->printf(.string,expressions);,return
printf_expression->printf(.string,expressions);,array
printf_expression->printf(.string,expressions);,string
printf_expression->printf(.string,expressions);,num
printf_expression->printf(.string,expressions);,%
printf_expression->printf(.string,expressions);,/
printf_expression->printf(.string,expressions);,*
printf_expression->printf(.string,expressions);,-
printf_expression->printf(.string,expressions);,+
printf_expression->printf(.string,expressions);,char
printf_expression->printf(.string,expressions);,double
printf_expression->printf(.string,expressions);,int
printf_expression->printf(.string,expressions);,}
printf_expression->printf(.string,expressions);,{
printf_expression->printf(.string,expressions);,(
printf_expression->printf(.string,expressions);,id
printf_expression->printf(.string);,scanf
printf_expression->printf(.string);,printf
printf_expression->printf(.string);,if
printf_expression->printf(.string);,while
printf_expression->printf(.string);,for
printf_expression->printf(.string);,return
printf_expression->printf(.string);,array
printf_expression->printf(.string);,string
printf_expression->printf(.string);,num
printf_expression->printf(.string);,%
printf_expression->printf(.string);,/
printf_expression->printf(.string);,*
printf_expression->printf(.string);,-
printf_expression->printf(.string);,+
printf_expression->printf(.string);,char
printf_expression->printf(.string);,double
printf_expression->printf(.string);,int
printf_expression->printf(.string);,}
printf_expression->printf(.string);,{
printf_expression->printf(.string);,(
printf_expression->printf(.string);,id
项目92:
scanf_expression->scanf(.string);,scanf
shift:154
scanf_expression->scanf(.string);,printf
scanf_expression->scanf(.string);,if
scanf_expression->scanf(.string);,while
scanf_expression->scanf(.string);,for
scanf_expression->scanf(.string);,return
scanf_expression->scanf(.string);,array
scanf_expression->scanf(.string);,string
scanf_expression->scanf(.string);,num
scanf_expression->scanf(.string);,%
scanf_expression->scanf(.string);,/
scanf_expression->scanf(.string);,*
scanf_expression->scanf(.string);,-
scanf_expression->scanf(.string);,+
scanf_expression->scanf(.string);,char
scanf_expression->scanf(.string);,double
scanf_expression->scanf(.string);,int
scanf_expression->scanf(.string);,}
scanf_expression->scanf(.string);,{
scanf_expression->scanf(.string);,(
scanf_expression->scanf(.string);,id
scanf_expression->scanf(.string,expressions);,scanf
scanf_expression->scanf(.string,expressions);,printf
scanf_expression->scanf(.string,expressions);,if
scanf_expression->scanf(.string,expressions);,while
scanf_expression->scanf(.string,expressions);,for
scanf_expression->scanf(.string,expressions);,return
scanf_expression->scanf(.string,expressions);,array
scanf_expression->scanf(.string,expressions);,string
scanf_expression->scanf(.string,expressions);,num
scanf_expression->scanf(.string,expressions);,%
scanf_expression->scanf(.string,expressions);,/
scanf_expression->scanf(.string,expressions);,*
scanf_expression->scanf(.string,expressions);,-
scanf_expression->scanf(.string,expressions);,+
scanf_expression->scanf(.string,expressions);,char
scanf_expression->scanf(.string,expressions);,double
scanf_expression->scanf(.string,expressions);,int
scanf_expression->scanf(.string,expressions);,}
scanf_expression->scanf(.string,expressions);,{
scanf_expression->scanf(.string,expressions);,(
scanf_expression->scanf(.string,expressions);,id
项目93:
function_define->function_typeid(function_define_list){block.},char
shift:155
function_define->function_typeid(function_define_list){block.},double
function_define->function_typeid(function_define_list){block.},int
function_define->function_typeid(function_define_list){block.},void
function_define->function_typeid(function_define_list){block.},#
项目94:
function_define_list->function_define_list,typeid,,
reduce:7
function_define_list->function_define_list,typeid,)
reduce:7
项目95:
F->id,%
reduce:32
F->id,/
reduce:32
F->id,*
reduce:32
F->id,-
reduce:32
F->id,+
reduce:32
F->id,,
reduce:32
F->id,)
reduce:32
function_call->id.(function_call_list),%
shift:156
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),,
function_call->id.(function_call_list),)
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),,
function_call->id.(),)
项目96:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),,
F->(.E),)
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目97:
function_call->id(),%
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
function_call->id(),;
reduce:8
项目98:
F->function_call,%
reduce:34
F->function_call,/
reduce:34
F->function_call,*
reduce:34
F->function_call,-
reduce:34
F->function_call,+
reduce:34
F->function_call,,
reduce:34
F->function_call,)
reduce:34
项目99:
function_call->id(function_call_list.),%
shift:158
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),;
项目100:
function_call_list->list.,function_call_list,)
shift:159
function_call_list->list,)
reduce:10
项目101:
E->E.-T,-
shift:161
E->E.-T,+
E->E.-T,,
E->E.-T,)
E->E.+T,-
shift:160
E->E.+T,+
E->E.+T,,
E->E.+T,)
list->E,,
reduce:12
list->E,)
reduce:12
项目102:
T->T.%F,%
shift:164
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,,
T->T.%F,)
T->T./F,%
shift:163
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,,
T->T./F,)
T->T.*F,%
shift:162
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,,
T->T.*F,)
E->T,-
reduce:24
E->T,+
reduce:24
E->T,,
reduce:24
E->T,)
reduce:24
项目103:
T->F,%
reduce:28
T->F,/
reduce:28
T->F,*
reduce:28
T->F,-
reduce:28
T->F,+
reduce:28
T->F,,
reduce:28
T->F,)
reduce:28
项目104:
F->num,%
reduce:30
F->num,/
reduce:30
F->num,*
reduce:30
F->num,-
reduce:30
F->num,+
reduce:30
F->num,,
reduce:30
F->num,)
reduce:30
项目105:
F->string,%
reduce:31
F->string,/
reduce:31
F->string,*
reduce:31
F->string,-
reduce:31
F->string,+
reduce:31
F->string,,
reduce:31
F->string,)
reduce:31
项目106:
F->array.[E],%
shift:165
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],,
F->array.[E],)
项目107:
set_value->id=E,;
reduce:47
E->E.-T,-
shift:77
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:76
E->E.+T,+
E->E.+T,;
项目108:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),%
shift:166
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目109:
F->(E.),%
shift:168
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),)
E->E.-T,-
shift:112
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:111
E->E.+T,+
E->E.+T,)
项目110:
F->(E),%
reduce:29
F->(E),/
reduce:29
F->(E),*
reduce:29
F->(E),-
reduce:29
F->(E),+
reduce:29
F->(E),;
reduce:29
项目111:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->E+.T,-
E->E+.T,+
E->E+.T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目112:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->E-.T,-
E->E-.T,+
E->E-.T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目113:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目114:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目115:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
T->T%.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目116:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],)
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目117:
sentence->{block},scanf
reduce:19
sentence->{block},printf
reduce:19
sentence->{block},if
reduce:19
sentence->{block},while
reduce:19
sentence->{block},for
reduce:19
sentence->{block},return
reduce:19
sentence->{block},array
reduce:19
sentence->{block},string
reduce:19
sentence->{block},num
reduce:19
sentence->{block},%
reduce:19
sentence->{block},/
reduce:19
sentence->{block},*
reduce:19
sentence->{block},-
reduce:19
sentence->{block},+
reduce:19
sentence->{block},char
reduce:19
sentence->{block},double
reduce:19
sentence->{block},int
reduce:19
sentence->{block},}
reduce:19
sentence->{block},{
reduce:19
sentence->{block},(
reduce:19
sentence->{block},id
reduce:19
项目118:
define->typearray[.num];,scanf
shift:175
define->typearray[.num];,printf
define->typearray[.num];,if
define->typearray[.num];,while
define->typearray[.num];,for
define->typearray[.num];,return
define->typearray[.num];,array
define->typearray[.num];,string
define->typearray[.num];,num
define->typearray[.num];,%
define->typearray[.num];,/
define->typearray[.num];,*
define->typearray[.num];,-
define->typearray[.num];,+
define->typearray[.num];,char
define->typearray[.num];,double
define->typearray[.num];,int
define->typearray[.num];,}
define->typearray[.num];,{
define->typearray[.num];,(
define->typearray[.num];,id
define->typearray[.]={nums};,scanf
shift:176
define->typearray[.]={nums};,printf
define->typearray[.]={nums};,if
define->typearray[.]={nums};,while
define->typearray[.]={nums};,for
define->typearray[.]={nums};,return
define->typearray[.]={nums};,array
define->typearray[.]={nums};,string
define->typearray[.]={nums};,num
define->typearray[.]={nums};,%
define->typearray[.]={nums};,/
define->typearray[.]={nums};,*
define->typearray[.]={nums};,-
define->typearray[.]={nums};,+
define->typearray[.]={nums};,char
define->typearray[.]={nums};,double
define->typearray[.]={nums};,int
define->typearray[.]={nums};,}
define->typearray[.]={nums};,{
define->typearray[.]={nums};,(
define->typearray[.]={nums};,id
define->typearray[.num]={nums};,scanf
define->typearray[.num]={nums};,printf
define->typearray[.num]={nums};,if
define->typearray[.num]={nums};,while
define->typearray[.num]={nums};,for
define->typearray[.num]={nums};,return
define->typearray[.num]={nums};,array
define->typearray[.num]={nums};,string
define->typearray[.num]={nums};,num
define->typearray[.num]={nums};,%
define->typearray[.num]={nums};,/
define->typearray[.num]={nums};,*
define->typearray[.num]={nums};,-
define->typearray[.num]={nums};,+
define->typearray[.num]={nums};,char
define->typearray[.num]={nums};,double
define->typearray[.num]={nums};,int
define->typearray[.num]={nums};,}
define->typearray[.num]={nums};,{
define->typearray[.num]={nums};,(
define->typearray[.num]={nums};,id
define->typearray[.]={string};,scanf
define->typearray[.]={string};,printf
define->typearray[.]={string};,if
define->typearray[.]={string};,while
define->typearray[.]={string};,for
define->typearray[.]={string};,return
define->typearray[.]={string};,array
define->typearray[.]={string};,string
define->typearray[.]={string};,num
define->typearray[.]={string};,%
define->typearray[.]={string};,/
define->typearray[.]={string};,*
define->typearray[.]={string};,-
define->typearray[.]={string};,+
define->typearray[.]={string};,char
define->typearray[.]={string};,double
define->typearray[.]={string};,int
define->typearray[.]={string};,}
define->typearray[.]={string};,{
define->typearray[.]={string};,(
define->typearray[.]={string};,id
项目119:
define->typeid_name;,scanf
reduce:38
define->typeid_name;,printf
reduce:38
define->typeid_name;,if
reduce:38
define->typeid_name;,while
reduce:38
define->typeid_name;,for
reduce:38
define->typeid_name;,return
reduce:38
define->typeid_name;,array
reduce:38
define->typeid_name;,string
reduce:38
define->typeid_name;,num
reduce:38
define->typeid_name;,%
reduce:38
define->typeid_name;,/
reduce:38
define->typeid_name;,*
reduce:38
define->typeid_name;,-
reduce:38
define->typeid_name;,+
reduce:38
define->typeid_name;,char
reduce:38
define->typeid_name;,double
reduce:38
define->typeid_name;,int
reduce:38
define->typeid_name;,}
reduce:38
define->typeid_name;,{
reduce:38
define->typeid_name;,(
reduce:38
define->typeid_name;,id
reduce:38
项目120:
define->typeid_name=.E;,scanf
define->typeid_name=.E;,printf
define->typeid_name=.E;,if
define->typeid_name=.E;,while
define->typeid_name=.E;,for
define->typeid_name=.E;,return
define->typeid_name=.E;,array
define->typeid_name=.E;,string
define->typeid_name=.E;,num
define->typeid_name=.E;,%
define->typeid_name=.E;,/
define->typeid_name=.E;,*
define->typeid_name=.E;,-
define->typeid_name=.E;,+
define->typeid_name=.E;,char
define->typeid_name=.E;,double
define->typeid_name=.E;,int
define->typeid_name=.E;,}
define->typeid_name=.E;,{
define->typeid_name=.E;,(
define->typeid_name=.E;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目121:
T->T.%F,%
shift:81
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,;
T->T./F,%
shift:80
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,%
shift:79
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->E+T,-
reduce:22
E->E+T,+
reduce:22
E->E+T,;
reduce:22
项目122:
T->T.%F,%
shift:81
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,;
T->T./F,%
shift:80
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,%
shift:79
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->E-T,-
reduce:23
E->E-T,+
reduce:23
E->E-T,;
reduce:23
项目123:
T->T*F,%
reduce:25
T->T*F,/
reduce:25
T->T*F,*
reduce:25
T->T*F,-
reduce:25
T->T*F,+
reduce:25
T->T*F,;
reduce:25
项目124:
T->T/F,%
reduce:26
T->T/F,/
reduce:26
T->T/F,*
reduce:26
T->T/F,-
reduce:26
T->T/F,+
reduce:26
T->T/F,;
reduce:26
项目125:
T->T%F,%
reduce:27
T->T%F,/
reduce:27
T->T%F,*
reduce:27
T->T%F,-
reduce:27
T->T%F,+
reduce:27
T->T%F,;
reduce:27
项目126:
F->id,]
reduce:32
F->id,%
reduce:32
F->id,/
reduce:32
F->id,*
reduce:32
F->id,-
reduce:32
F->id,+
reduce:32
function_call->id.(function_call_list),]
shift:178
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(),]
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
项目127:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),]
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目128:
F->function_call,]
reduce:34
F->function_call,%
reduce:34
F->function_call,/
reduce:34
F->function_call,*
reduce:34
F->function_call,-
reduce:34
F->function_call,+
reduce:34
项目129:
set_value->array[E.]=E,;
shift:182
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
shift:181
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:180
E->E.+T,-
E->E.+T,+
项目130:
T->T.%F,]
shift:185
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,]
shift:184
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
shift:183
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->T,]
reduce:24
E->T,-
reduce:24
E->T,+
reduce:24
项目131:
T->F,]
reduce:28
T->F,%
reduce:28
T->F,/
reduce:28
T->F,*
reduce:28
T->F,-
reduce:28
T->F,+
reduce:28
项目132:
F->num,]
reduce:30
F->num,%
reduce:30
F->num,/
reduce:30
F->num,*
reduce:30
F->num,-
reduce:30
F->num,+
reduce:30
项目133:
F->string,]
reduce:31
F->string,%
reduce:31
F->string,/
reduce:31
F->string,*
reduce:31
F->string,-
reduce:31
F->string,+
reduce:31
项目134:
F->array.[E],]
shift:186
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
项目135:
sentence->returnE;,scanf
reduce:35
sentence->returnE;,printf
reduce:35
sentence->returnE;,if
reduce:35
sentence->returnE;,while
reduce:35
sentence->returnE;,for
reduce:35
sentence->returnE;,return
reduce:35
sentence->returnE;,array
reduce:35
sentence->returnE;,string
reduce:35
sentence->returnE;,num
reduce:35
sentence->returnE;,%
reduce:35
sentence->returnE;,/
reduce:35
sentence->returnE;,*
reduce:35
sentence->returnE;,-
reduce:35
sentence->returnE;,+
reduce:35
sentence->returnE;,char
reduce:35
sentence->returnE;,double
reduce:35
sentence->returnE;,int
reduce:35
sentence->returnE;,}
reduce:35
sentence->returnE;,{
reduce:35
sentence->returnE;,(
reduce:35
sentence->returnE;,id
reduce:35
项目136:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目137:
set_value->id.=E,;
shift:57
项目138:
set_value->array.[E]=E,;
shift:188
项目139:
for_set_value->set_value,;
reduce:66
项目140:
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,scanf
shift:189
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,id
项目141:
F->id,!=
reduce:32
F->id,==
reduce:32
F->id,>
reduce:32
F->id,<
reduce:32
F->id,<=
reduce:32
F->id,>=
reduce:32
F->id,%
reduce:32
F->id,/
reduce:32
F->id,*
reduce:32
F->id,-
reduce:32
F->id,+
reduce:32
F->id,)
reduce:32
function_call->id.(function_call_list),!=
shift:190
function_call->id.(function_call_list),==
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),)
function_call->id.(),!=
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),)
项目142:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),!=
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),)
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目143:
F->function_call,!=
reduce:34
F->function_call,==
reduce:34
F->function_call,>
reduce:34
F->function_call,<
reduce:34
F->function_call,<=
reduce:34
F->function_call,>=
reduce:34
F->function_call,%
reduce:34
F->function_call,/
reduce:34
F->function_call,*
reduce:34
F->function_call,-
reduce:34
F->function_call,+
reduce:34
F->function_call,)
reduce:34
项目144:
G->E,!=
reduce:64
G->E,==
reduce:64
G->E,>
reduce:64
G->E,<
reduce:64
G->E,<=
reduce:64
G->E,>=
reduce:64
E->E.-T,!=
shift:193
E->E.-T,==
E->E.-T,>
E->E.-T,<
E->E.-T,<=
E->E.-T,>=
E->E.-T,-
E->E.-T,+
E->E.+T,!=
shift:192
E->E.+T,==
E->E.+T,>
E->E.+T,<
E->E.+T,<=
E->E.+T,>=
E->E.+T,-
E->E.+T,+
项目145:
T->T.%F,!=
shift:196
T->T.%F,==
T->T.%F,>
T->T.%F,<
T->T.%F,<=
T->T.%F,>=
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,!=
shift:195
T->T./F,==
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,!=
shift:194
T->T.*F,==
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->T,!=
reduce:24
E->T,==
reduce:24
E->T,>
reduce:24
E->T,<
reduce:24
E->T,<=
reduce:24
E->T,>=
reduce:24
E->T,-
reduce:24
E->T,+
reduce:24
项目146:
bool_expression->F,)
reduce:56
T->F,!=
reduce:28
T->F,==
reduce:28
T->F,>
reduce:28
T->F,<
reduce:28
T->F,<=
reduce:28
T->F,>=
reduce:28
T->F,%
reduce:28
T->F,/
reduce:28
T->F,*
reduce:28
T->F,-
reduce:28
T->F,+
reduce:28
项目147:
F->num,!=
reduce:30
F->num,==
reduce:30
F->num,>
reduce:30
F->num,<
reduce:30
F->num,<=
reduce:30
F->num,>=
reduce:30
F->num,%
reduce:30
F->num,/
reduce:30
F->num,*
reduce:30
F->num,-
reduce:30
F->num,+
reduce:30
F->num,)
reduce:30
项目148:
F->string,!=
reduce:31
F->string,==
reduce:31
F->string,>
reduce:31
F->string,<
reduce:31
F->string,<=
reduce:31
F->string,>=
reduce:31
F->string,%
reduce:31
F->string,/
reduce:31
F->string,*
reduce:31
F->string,-
reduce:31
F->string,+
reduce:31
F->string,)
reduce:31
项目149:
F->array.[E],!=
shift:197
F->array.[E],==
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],)
项目150:
while_expression->while1(bool_expression.)whilesentence,scanf
shift:198
while_expression->while1(bool_expression.)whilesentence,printf
while_expression->while1(bool_expression.)whilesentence,if
while_expression->while1(bool_expression.)whilesentence,while
while_expression->while1(bool_expression.)whilesentence,for
while_expression->while1(bool_expression.)whilesentence,return
while_expression->while1(bool_expression.)whilesentence,array
while_expression->while1(bool_expression.)whilesentence,string
while_expression->while1(bool_expression.)whilesentence,num
while_expression->while1(bool_expression.)whilesentence,%
while_expression->while1(bool_expression.)whilesentence,/
while_expression->while1(bool_expression.)whilesentence,*
while_expression->while1(bool_expression.)whilesentence,-
while_expression->while1(bool_expression.)whilesentence,+
while_expression->while1(bool_expression.)whilesentence,char
while_expression->while1(bool_expression.)whilesentence,double
while_expression->while1(bool_expression.)whilesentence,int
while_expression->while1(bool_expression.)whilesentence,}
while_expression->while1(bool_expression.)whilesentence,{
while_expression->while1(bool_expression.)whilesentence,(
while_expression->while1(bool_expression.)whilesentence,id
项目151:
op->.!=,array
shift:205
op->.!=,string
op->.!=,num
op->.!=,%
op->.!=,/
op->.!=,*
op->.!=,-
op->.!=,+
op->.!=,(
op->.!=,id
op->.==,array
shift:204
op->.==,string
op->.==,num
op->.==,%
op->.==,/
op->.==,*
op->.==,-
op->.==,+
op->.==,(
op->.==,id
op->.>,array
shift:203
op->.>,string
op->.>,num
op->.>,%
op->.>,/
op->.>,*
op->.>,-
op->.>,+
op->.>,(
op->.>,id
op->.<,array
shift:202
op->.<,string
op->.<,num
op->.<,%
op->.<,/
op->.<,*
op->.<,-
op->.<,+
op->.<,(
op->.<,id
op->.<=,array
shift:201
op->.<=,string
op->.<=,num
op->.<=,%
op->.<=,/
op->.<=,*
op->.<=,-
op->.<=,+
op->.<=,(
op->.<=,id
op->.>=,array
shift:200
op->.>=,string
op->.>=,num
op->.>=,%
op->.>=,/
op->.>=,*
op->.>=,-
op->.>=,+
op->.>=,(
op->.>=,id
bool_expression->G.opH,)
项目152:
if_expression->if(bool_expression.)ifsentenceelsesentence,scanf
shift:206
if_expression->if(bool_expression.)ifsentenceelsesentence,printf
if_expression->if(bool_expression.)ifsentenceelsesentence,if
if_expression->if(bool_expression.)ifsentenceelsesentence,while
if_expression->if(bool_expression.)ifsentenceelsesentence,for
if_expression->if(bool_expression.)ifsentenceelsesentence,return
if_expression->if(bool_expression.)ifsentenceelsesentence,array
if_expression->if(bool_expression.)ifsentenceelsesentence,string
if_expression->if(bool_expression.)ifsentenceelsesentence,num
if_expression->if(bool_expression.)ifsentenceelsesentence,%
if_expression->if(bool_expression.)ifsentenceelsesentence,/
if_expression->if(bool_expression.)ifsentenceelsesentence,*
if_expression->if(bool_expression.)ifsentenceelsesentence,-
if_expression->if(bool_expression.)ifsentenceelsesentence,+
if_expression->if(bool_expression.)ifsentenceelsesentence,char
if_expression->if(bool_expression.)ifsentenceelsesentence,double
if_expression->if(bool_expression.)ifsentenceelsesentence,int
if_expression->if(bool_expression.)ifsentenceelsesentence,}
if_expression->if(bool_expression.)ifsentenceelsesentence,{
if_expression->if(bool_expression.)ifsentenceelsesentence,(
if_expression->if(bool_expression.)ifsentenceelsesentence,id
if_expression->if(bool_expression.)sentence,scanf
if_expression->if(bool_expression.)sentence,printf
if_expression->if(bool_expression.)sentence,if
if_expression->if(bool_expression.)sentence,while
if_expression->if(bool_expression.)sentence,for
if_expression->if(bool_expression.)sentence,return
if_expression->if(bool_expression.)sentence,array
if_expression->if(bool_expression.)sentence,string
if_expression->if(bool_expression.)sentence,num
if_expression->if(bool_expression.)sentence,%
if_expression->if(bool_expression.)sentence,/
if_expression->if(bool_expression.)sentence,*
if_expression->if(bool_expression.)sentence,-
if_expression->if(bool_expression.)sentence,+
if_expression->if(bool_expression.)sentence,char
if_expression->if(bool_expression.)sentence,double
if_expression->if(bool_expression.)sentence,int
if_expression->if(bool_expression.)sentence,}
if_expression->if(bool_expression.)sentence,{
if_expression->if(bool_expression.)sentence,(
if_expression->if(bool_expression.)sentence,id
项目153:
printf_expression->printf(string.,expressions);,scanf
shift:208
printf_expression->printf(string.,expressions);,printf
printf_expression->printf(string.,expressions);,if
printf_expression->printf(string.,expressions);,while
printf_expression->printf(string.,expressions);,for
printf_expression->printf(string.,expressions);,return
printf_expression->printf(string.,expressions);,array
printf_expression->printf(string.,expressions);,string
printf_expression->printf(string.,expressions);,num
printf_expression->printf(string.,expressions);,%
printf_expression->printf(string.,expressions);,/
printf_expression->printf(string.,expressions);,*
printf_expression->printf(string.,expressions);,-
printf_expression->printf(string.,expressions);,+
printf_expression->printf(string.,expressions);,char
printf_expression->printf(string.,expressions);,double
printf_expression->printf(string.,expressions);,int
printf_expression->printf(string.,expressions);,}
printf_expression->printf(string.,expressions);,{
printf_expression->printf(string.,expressions);,(
printf_expression->printf(string.,expressions);,id
printf_expression->printf(string.);,scanf
shift:207
printf_expression->printf(string.);,printf
printf_expression->printf(string.);,if
printf_expression->printf(string.);,while
printf_expression->printf(string.);,for
printf_expression->printf(string.);,return
printf_expression->printf(string.);,array
printf_expression->printf(string.);,string
printf_expression->printf(string.);,num
printf_expression->printf(string.);,%
printf_expression->printf(string.);,/
printf_expression->printf(string.);,*
printf_expression->printf(string.);,-
printf_expression->printf(string.);,+
printf_expression->printf(string.);,char
printf_expression->printf(string.);,double
printf_expression->printf(string.);,int
printf_expression->printf(string.);,}
printf_expression->printf(string.);,{
printf_expression->printf(string.);,(
printf_expression->printf(string.);,id
项目154:
scanf_expression->scanf(string.);,scanf
shift:209
scanf_expression->scanf(string.);,printf
scanf_expression->scanf(string.);,if
scanf_expression->scanf(string.);,while
scanf_expression->scanf(string.);,for
scanf_expression->scanf(string.);,return
scanf_expression->scanf(string.);,array
scanf_expression->scanf(string.);,string
scanf_expression->scanf(string.);,num
scanf_expression->scanf(string.);,%
scanf_expression->scanf(string.);,/
scanf_expression->scanf(string.);,*
scanf_expression->scanf(string.);,-
scanf_expression->scanf(string.);,+
scanf_expression->scanf(string.);,char
scanf_expression->scanf(string.);,double
scanf_expression->scanf(string.);,int
scanf_expression->scanf(string.);,}
scanf_expression->scanf(string.);,{
scanf_expression->scanf(string.);,(
scanf_expression->scanf(string.);,id
scanf_expression->scanf(string.,expressions);,scanf
shift:210
scanf_expression->scanf(string.,expressions);,printf
scanf_expression->scanf(string.,expressions);,if
scanf_expression->scanf(string.,expressions);,while
scanf_expression->scanf(string.,expressions);,for
scanf_expression->scanf(string.,expressions);,return
scanf_expression->scanf(string.,expressions);,array
scanf_expression->scanf(string.,expressions);,string
scanf_expression->scanf(string.,expressions);,num
scanf_expression->scanf(string.,expressions);,%
scanf_expression->scanf(string.,expressions);,/
scanf_expression->scanf(string.,expressions);,*
scanf_expression->scanf(string.,expressions);,-
scanf_expression->scanf(string.,expressions);,+
scanf_expression->scanf(string.,expressions);,char
scanf_expression->scanf(string.,expressions);,double
scanf_expression->scanf(string.,expressions);,int
scanf_expression->scanf(string.,expressions);,}
scanf_expression->scanf(string.,expressions);,{
scanf_expression->scanf(string.,expressions);,(
scanf_expression->scanf(string.,expressions);,id
项目155:
function_define->function_typeid(function_define_list){block},char
reduce:3
function_define->function_typeid(function_define_list){block},double
reduce:3
function_define->function_typeid(function_define_list){block},int
reduce:3
function_define->function_typeid(function_define_list){block},void
reduce:3
function_define->function_typeid(function_define_list){block},#
reduce:3
项目156:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),,
function_call->id(.function_call_list),)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),%
shift:211
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),,
function_call->id(.),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目157:
F->(E.),%
shift:213
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),,
F->(E.),)
E->E.-T,-
shift:112
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:111
E->E.+T,+
E->E.+T,)
项目158:
function_call->id(function_call_list),%
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
function_call->id(function_call_list),;
reduce:9
项目159:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->list,.function_call_list,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目160:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->E+.T,-
E->E+.T,+
E->E+.T,,
E->E+.T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目161:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->E-.T,-
E->E-.T,+
E->E-.T,,
E->E-.T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目162:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,,
T->T*.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目163:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,,
T->T/.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目164:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
T->T%.F,,
T->T%.F,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目165:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],,
F->array[.E],)
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目166:
function_call->id(),%
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
function_call->id(),)
reduce:8
项目167:
function_call->id(function_call_list.),%
shift:221
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),)
项目168:
F->(E),%
reduce:29
F->(E),/
reduce:29
F->(E),*
reduce:29
F->(E),-
reduce:29
F->(E),+
reduce:29
F->(E),)
reduce:29
项目169:
T->T.%F,%
shift:115
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,)
T->T./F,%
shift:114
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,%
shift:113
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->E+T,-
reduce:22
E->E+T,+
reduce:22
E->E+T,)
reduce:22
项目170:
T->T.%F,%
shift:115
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,)
T->T./F,%
shift:114
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,%
shift:113
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->E-T,-
reduce:23
E->E-T,+
reduce:23
E->E-T,)
reduce:23
项目171:
T->T*F,%
reduce:25
T->T*F,/
reduce:25
T->T*F,*
reduce:25
T->T*F,-
reduce:25
T->T*F,+
reduce:25
T->T*F,)
reduce:25
项目172:
T->T/F,%
reduce:26
T->T/F,/
reduce:26
T->T/F,*
reduce:26
T->T/F,-
reduce:26
T->T/F,+
reduce:26
T->T/F,)
reduce:26
项目173:
T->T%F,%
reduce:27
T->T%F,/
reduce:27
T->T%F,*
reduce:27
T->T%F,-
reduce:27
T->T%F,+
reduce:27
T->T%F,)
reduce:27
项目174:
F->array[E.],%
shift:222
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],)
E->E.-T,]
shift:181
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:180
E->E.+T,-
E->E.+T,+
项目175:
define->typearray[num.];,scanf
shift:223
define->typearray[num.];,printf
define->typearray[num.];,if
define->typearray[num.];,while
define->typearray[num.];,for
define->typearray[num.];,return
define->typearray[num.];,array
define->typearray[num.];,string
define->typearray[num.];,num
define->typearray[num.];,%
define->typearray[num.];,/
define->typearray[num.];,*
define->typearray[num.];,-
define->typearray[num.];,+
define->typearray[num.];,char
define->typearray[num.];,double
define->typearray[num.];,int
define->typearray[num.];,}
define->typearray[num.];,{
define->typearray[num.];,(
define->typearray[num.];,id
define->typearray[num.]={nums};,scanf
define->typearray[num.]={nums};,printf
define->typearray[num.]={nums};,if
define->typearray[num.]={nums};,while
define->typearray[num.]={nums};,for
define->typearray[num.]={nums};,return
define->typearray[num.]={nums};,array
define->typearray[num.]={nums};,string
define->typearray[num.]={nums};,num
define->typearray[num.]={nums};,%
define->typearray[num.]={nums};,/
define->typearray[num.]={nums};,*
define->typearray[num.]={nums};,-
define->typearray[num.]={nums};,+
define->typearray[num.]={nums};,char
define->typearray[num.]={nums};,double
define->typearray[num.]={nums};,int
define->typearray[num.]={nums};,}
define->typearray[num.]={nums};,{
define->typearray[num.]={nums};,(
define->typearray[num.]={nums};,id
项目176:
define->typearray[].={nums};,scanf
shift:224
define->typearray[].={nums};,printf
define->typearray[].={nums};,if
define->typearray[].={nums};,while
define->typearray[].={nums};,for
define->typearray[].={nums};,return
define->typearray[].={nums};,array
define->typearray[].={nums};,string
define->typearray[].={nums};,num
define->typearray[].={nums};,%
define->typearray[].={nums};,/
define->typearray[].={nums};,*
define->typearray[].={nums};,-
define->typearray[].={nums};,+
define->typearray[].={nums};,char
define->typearray[].={nums};,double
define->typearray[].={nums};,int
define->typearray[].={nums};,}
define->typearray[].={nums};,{
define->typearray[].={nums};,(
define->typearray[].={nums};,id
define->typearray[].={string};,scanf
define->typearray[].={string};,printf
define->typearray[].={string};,if
define->typearray[].={string};,while
define->typearray[].={string};,for
define->typearray[].={string};,return
define->typearray[].={string};,array
define->typearray[].={string};,string
define->typearray[].={string};,num
define->typearray[].={string};,%
define->typearray[].={string};,/
define->typearray[].={string};,*
define->typearray[].={string};,-
define->typearray[].={string};,+
define->typearray[].={string};,char
define->typearray[].={string};,double
define->typearray[].={string};,int
define->typearray[].={string};,}
define->typearray[].={string};,{
define->typearray[].={string};,(
define->typearray[].={string};,id
项目177:
define->typeid_name=E.;,scanf
shift:225
define->typeid_name=E.;,printf
define->typeid_name=E.;,if
define->typeid_name=E.;,while
define->typeid_name=E.;,for
define->typeid_name=E.;,return
define->typeid_name=E.;,array
define->typeid_name=E.;,string
define->typeid_name=E.;,num
define->typeid_name=E.;,%
define->typeid_name=E.;,/
define->typeid_name=E.;,*
define->typeid_name=E.;,-
define->typeid_name=E.;,+
define->typeid_name=E.;,char
define->typeid_name=E.;,double
define->typeid_name=E.;,int
define->typeid_name=E.;,}
define->typeid_name=E.;,{
define->typeid_name=E.;,(
define->typeid_name=E.;,id
E->E.-T,-
shift:77
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:76
E->E.+T,+
E->E.+T,;
项目178:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),]
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),]
shift:226
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目179:
F->(E.),]
shift:228
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
E->E.-T,-
shift:112
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:111
E->E.+T,+
E->E.+T,)
项目180:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E+.T,]
E->E+.T,-
E->E+.T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目181:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E-.T,]
E->E-.T,-
E->E-.T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目182:
set_value->array[E].=E,;
shift:231
F->array[E],%
reduce:33
F->array[E],/
reduce:33
F->array[E],*
reduce:33
F->array[E],-
reduce:33
F->array[E],+
reduce:33
F->array[E],;
reduce:33
项目183:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T*.F,]
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目184:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T/.F,]
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目185:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T%.F,]
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目186:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],]
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目187:
F->array[E.],%
shift:236
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
shift:181
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:180
E->E.+T,-
E->E.+T,+
项目188:
set_value->array[.E]=E,;
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目189:
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,;
bool_expression->.GopH,;
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,id
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],!=
shift:244
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,!=
shift:238
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,!=
shift:243
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,!=
shift:242
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),!=
shift:239
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目190:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),!=
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),!=
shift:247
function_call->id(.),==
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目191:
F->(E.),!=
shift:249
F->(E.),==
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),)
E->E.-T,-
shift:112
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:111
E->E.+T,+
E->E.+T,)
项目192:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
shift:257
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
shift:250
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
shift:256
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
shift:255
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
shift:251
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E+.T,!=
E->E+.T,==
E->E+.T,>
E->E+.T,<
E->E+.T,<=
E->E+.T,>=
E->E+.T,-
E->E+.T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目193:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
shift:257
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
shift:250
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
shift:256
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
shift:255
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
shift:251
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E-.T,!=
E->E-.T,==
E->E-.T,>
E->E-.T,<
E->E-.T,<=
E->E-.T,>=
E->E-.T,-
E->E-.T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目194:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
shift:257
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
shift:250
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
shift:256
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
shift:255
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
shift:251
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T*.F,!=
T->T*.F,==
T->T*.F,>
T->T*.F,<
T->T*.F,<=
T->T*.F,>=
T->T*.F,%
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目195:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
shift:257
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
shift:250
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
shift:256
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
shift:255
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
shift:251
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T/.F,!=
T->T/.F,==
T->T/.F,>
T->T/.F,<
T->T/.F,<=
T->T/.F,>=
T->T/.F,%
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目196:
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],!=
shift:257
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,!=
shift:250
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,!=
shift:256
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,!=
shift:255
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),!=
shift:251
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T%.F,!=
T->T%.F,==
T->T%.F,>
T->T%.F,<
T->T%.F,<=
T->T%.F,>=
T->T%.F,%
T->T%.F,/
T->T%.F,*
T->T%.F,-
T->T%.F,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目197:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],!=
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],)
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目198:
scanf_expression->.scanf(string);,scanf
shift:53
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:52
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:48
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
whilesentence->.sentence,scanf
whilesentence->.sentence,printf
whilesentence->.sentence,if
whilesentence->.sentence,while
whilesentence->.sentence,for
whilesentence->.sentence,return
whilesentence->.sentence,array
whilesentence->.sentence,string
whilesentence->.sentence,num
whilesentence->.sentence,%
whilesentence->.sentence,/
whilesentence->.sentence,*
whilesentence->.sentence,-
whilesentence->.sentence,+
whilesentence->.sentence,char
whilesentence->.sentence,double
whilesentence->.sentence,int
whilesentence->.sentence,}
whilesentence->.sentence,{
whilesentence->.sentence,(
whilesentence->.sentence,id
while1->.while,(
shift:44
while_expression->while1(bool_expression).whilesentence,scanf
while_expression->while1(bool_expression).whilesentence,printf
while_expression->while1(bool_expression).whilesentence,if
while_expression->while1(bool_expression).whilesentence,while
while_expression->while1(bool_expression).whilesentence,for
while_expression->while1(bool_expression).whilesentence,return
while_expression->while1(bool_expression).whilesentence,array
while_expression->while1(bool_expression).whilesentence,string
while_expression->while1(bool_expression).whilesentence,num
while_expression->while1(bool_expression).whilesentence,%
while_expression->while1(bool_expression).whilesentence,/
while_expression->while1(bool_expression).whilesentence,*
while_expression->while1(bool_expression).whilesentence,-
while_expression->while1(bool_expression).whilesentence,+
while_expression->while1(bool_expression).whilesentence,char
while_expression->while1(bool_expression).whilesentence,double
while_expression->while1(bool_expression).whilesentence,int
while_expression->while1(bool_expression).whilesentence,}
while_expression->while1(bool_expression).whilesentence,{
while_expression->while1(bool_expression).whilesentence,(
while_expression->while1(bool_expression).whilesentence,id
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:41
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:36
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目199:
H->.E,)
bool_expression->Gop.H,)
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目200:
op->>=,array
reduce:57
op->>=,string
reduce:57
op->>=,num
reduce:57
op->>=,%
reduce:57
op->>=,/
reduce:57
op->>=,*
reduce:57
op->>=,-
reduce:57
op->>=,+
reduce:57
op->>=,(
reduce:57
op->>=,id
reduce:57
项目201:
op-><=,array
reduce:58
op-><=,string
reduce:58
op-><=,num
reduce:58
op-><=,%
reduce:58
op-><=,/
reduce:58
op-><=,*
reduce:58
op-><=,-
reduce:58
op-><=,+
reduce:58
op-><=,(
reduce:58
op-><=,id
reduce:58
项目202:
op-><,array
reduce:59
op-><,string
reduce:59
op-><,num
reduce:59
op-><,%
reduce:59
op-><,/
reduce:59
op-><,*
reduce:59
op-><,-
reduce:59
op-><,+
reduce:59
op-><,(
reduce:59
op-><,id
reduce:59
项目203:
op->>,array
reduce:60
op->>,string
reduce:60
op->>,num
reduce:60
op->>,%
reduce:60
op->>,/
reduce:60
op->>,*
reduce:60
op->>,-
reduce:60
op->>,+
reduce:60
op->>,(
reduce:60
op->>,id
reduce:60
项目204:
op->==,array
reduce:61
op->==,string
reduce:61
op->==,num
reduce:61
op->==,%
reduce:61
op->==,/
reduce:61
op->==,*
reduce:61
op->==,-
reduce:61
op->==,+
reduce:61
op->==,(
reduce:61
op->==,id
reduce:61
项目205:
op->!=,array
reduce:62
op->!=,string
reduce:62
op->!=,num
reduce:62
op->!=,%
reduce:62
op->!=,/
reduce:62
op->!=,*
reduce:62
op->!=,-
reduce:62
op->!=,+
reduce:62
op->!=,(
reduce:62
op->!=,id
reduce:62
项目206:
scanf_expression->.scanf(string);,scanf
shift:286
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:285
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
ifsentence->.sentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,scanf
if_expression->if(bool_expression).ifsentenceelsesentence,printf
if_expression->if(bool_expression).ifsentenceelsesentence,if
if_expression->if(bool_expression).ifsentenceelsesentence,while
if_expression->if(bool_expression).ifsentenceelsesentence,for
if_expression->if(bool_expression).ifsentenceelsesentence,return
if_expression->if(bool_expression).ifsentenceelsesentence,array
if_expression->if(bool_expression).ifsentenceelsesentence,string
if_expression->if(bool_expression).ifsentenceelsesentence,num
if_expression->if(bool_expression).ifsentenceelsesentence,%
if_expression->if(bool_expression).ifsentenceelsesentence,/
if_expression->if(bool_expression).ifsentenceelsesentence,*
if_expression->if(bool_expression).ifsentenceelsesentence,-
if_expression->if(bool_expression).ifsentenceelsesentence,+
if_expression->if(bool_expression).ifsentenceelsesentence,char
if_expression->if(bool_expression).ifsentenceelsesentence,double
if_expression->if(bool_expression).ifsentenceelsesentence,int
if_expression->if(bool_expression).ifsentenceelsesentence,}
if_expression->if(bool_expression).ifsentenceelsesentence,{
if_expression->if(bool_expression).ifsentenceelsesentence,(
if_expression->if(bool_expression).ifsentenceelsesentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:280
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->if(bool_expression).sentence,scanf
if_expression->if(bool_expression).sentence,printf
if_expression->if(bool_expression).sentence,if
if_expression->if(bool_expression).sentence,while
if_expression->if(bool_expression).sentence,for
if_expression->if(bool_expression).sentence,return
if_expression->if(bool_expression).sentence,array
if_expression->if(bool_expression).sentence,string
if_expression->if(bool_expression).sentence,num
if_expression->if(bool_expression).sentence,%
if_expression->if(bool_expression).sentence,/
if_expression->if(bool_expression).sentence,*
if_expression->if(bool_expression).sentence,-
if_expression->if(bool_expression).sentence,+
if_expression->if(bool_expression).sentence,char
if_expression->if(bool_expression).sentence,double
if_expression->if(bool_expression).sentence,int
if_expression->if(bool_expression).sentence,}
if_expression->if(bool_expression).sentence,{
if_expression->if(bool_expression).sentence,(
if_expression->if(bool_expression).sentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:276
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:271
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:267
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目207:
printf_expression->printf(string).;,scanf
shift:287
printf_expression->printf(string).;,printf
printf_expression->printf(string).;,if
printf_expression->printf(string).;,while
printf_expression->printf(string).;,for
printf_expression->printf(string).;,return
printf_expression->printf(string).;,array
printf_expression->printf(string).;,string
printf_expression->printf(string).;,num
printf_expression->printf(string).;,%
printf_expression->printf(string).;,/
printf_expression->printf(string).;,*
printf_expression->printf(string).;,-
printf_expression->printf(string).;,+
printf_expression->printf(string).;,char
printf_expression->printf(string).;,double
printf_expression->printf(string).;,int
printf_expression->printf(string).;,}
printf_expression->printf(string).;,{
printf_expression->printf(string).;,(
printf_expression->printf(string).;,id
项目208:
getaddr->.&id,,
shift:291
getaddr->.&id,)
getaddr->.id,,
shift:288
getaddr->.id,)
expressions->.getaddr,)
expressions->.getaddr,expressions,)
printf_expression->printf(string,.expressions);,scanf
printf_expression->printf(string,.expressions);,printf
printf_expression->printf(string,.expressions);,if
printf_expression->printf(string,.expressions);,while
printf_expression->printf(string,.expressions);,for
printf_expression->printf(string,.expressions);,return
printf_expression->printf(string,.expressions);,array
printf_expression->printf(string,.expressions);,string
printf_expression->printf(string,.expressions);,num
printf_expression->printf(string,.expressions);,%
printf_expression->printf(string,.expressions);,/
printf_expression->printf(string,.expressions);,*
printf_expression->printf(string,.expressions);,-
printf_expression->printf(string,.expressions);,+
printf_expression->printf(string,.expressions);,char
printf_expression->printf(string,.expressions);,double
printf_expression->printf(string,.expressions);,int
printf_expression->printf(string,.expressions);,}
printf_expression->printf(string,.expressions);,{
printf_expression->printf(string,.expressions);,(
printf_expression->printf(string,.expressions);,id
项目209:
scanf_expression->scanf(string).;,scanf
shift:292
scanf_expression->scanf(string).;,printf
scanf_expression->scanf(string).;,if
scanf_expression->scanf(string).;,while
scanf_expression->scanf(string).;,for
scanf_expression->scanf(string).;,return
scanf_expression->scanf(string).;,array
scanf_expression->scanf(string).;,string
scanf_expression->scanf(string).;,num
scanf_expression->scanf(string).;,%
scanf_expression->scanf(string).;,/
scanf_expression->scanf(string).;,*
scanf_expression->scanf(string).;,-
scanf_expression->scanf(string).;,+
scanf_expression->scanf(string).;,char
scanf_expression->scanf(string).;,double
scanf_expression->scanf(string).;,int
scanf_expression->scanf(string).;,}
scanf_expression->scanf(string).;,{
scanf_expression->scanf(string).;,(
scanf_expression->scanf(string).;,id
项目210:
getaddr->.&id,,
shift:291
getaddr->.&id,)
getaddr->.id,,
shift:288
getaddr->.id,)
scanf_expression->scanf(string,.expressions);,scanf
scanf_expression->scanf(string,.expressions);,printf
scanf_expression->scanf(string,.expressions);,if
scanf_expression->scanf(string,.expressions);,while
scanf_expression->scanf(string,.expressions);,for
scanf_expression->scanf(string,.expressions);,return
scanf_expression->scanf(string,.expressions);,array
scanf_expression->scanf(string,.expressions);,string
scanf_expression->scanf(string,.expressions);,num
scanf_expression->scanf(string,.expressions);,%
scanf_expression->scanf(string,.expressions);,/
scanf_expression->scanf(string,.expressions);,*
scanf_expression->scanf(string,.expressions);,-
scanf_expression->scanf(string,.expressions);,+
scanf_expression->scanf(string,.expressions);,char
scanf_expression->scanf(string,.expressions);,double
scanf_expression->scanf(string,.expressions);,int
scanf_expression->scanf(string,.expressions);,}
scanf_expression->scanf(string,.expressions);,{
scanf_expression->scanf(string,.expressions);,(
scanf_expression->scanf(string,.expressions);,id
expressions->.getaddr,)
expressions->.getaddr,expressions,)
项目211:
function_call->id(),%
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
function_call->id(),,
reduce:8
function_call->id(),)
reduce:8
项目212:
function_call->id(function_call_list.),%
shift:294
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),,
function_call->id(function_call_list.),)
项目213:
F->(E),%
reduce:29
F->(E),/
reduce:29
F->(E),*
reduce:29
F->(E),-
reduce:29
F->(E),+
reduce:29
F->(E),,
reduce:29
F->(E),)
reduce:29
项目214:
function_call_list->list,function_call_list,)
reduce:11
项目215:
T->T.%F,%
shift:164
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,,
T->T.%F,)
T->T./F,%
shift:163
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,,
T->T./F,)
T->T.*F,%
shift:162
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,,
T->T.*F,)
E->E+T,-
reduce:22
E->E+T,+
reduce:22
E->E+T,,
reduce:22
E->E+T,)
reduce:22
项目216:
T->T.%F,%
shift:164
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T.%F,,
T->T.%F,)
T->T./F,%
shift:163
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,,
T->T./F,)
T->T.*F,%
shift:162
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,,
T->T.*F,)
E->E-T,-
reduce:23
E->E-T,+
reduce:23
E->E-T,,
reduce:23
E->E-T,)
reduce:23
项目217:
T->T*F,%
reduce:25
T->T*F,/
reduce:25
T->T*F,*
reduce:25
T->T*F,-
reduce:25
T->T*F,+
reduce:25
T->T*F,,
reduce:25
T->T*F,)
reduce:25
项目218:
T->T/F,%
reduce:26
T->T/F,/
reduce:26
T->T/F,*
reduce:26
T->T/F,-
reduce:26
T->T/F,+
reduce:26
T->T/F,,
reduce:26
T->T/F,)
reduce:26
项目219:
T->T%F,%
reduce:27
T->T%F,/
reduce:27
T->T%F,*
reduce:27
T->T%F,-
reduce:27
T->T%F,+
reduce:27
T->T%F,,
reduce:27
T->T%F,)
reduce:27
项目220:
F->array[E.],%
shift:295
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],,
F->array[E.],)
E->E.-T,]
shift:181
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:180
E->E.+T,-
E->E.+T,+
项目221:
function_call->id(function_call_list),%
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
function_call->id(function_call_list),)
reduce:9
项目222:
F->array[E],%
reduce:33
F->array[E],/
reduce:33
F->array[E],*
reduce:33
F->array[E],-
reduce:33
F->array[E],+
reduce:33
F->array[E],)
reduce:33
项目223:
define->typearray[num].;,scanf
shift:296
define->typearray[num].;,printf
define->typearray[num].;,if
define->typearray[num].;,while
define->typearray[num].;,for
define->typearray[num].;,return
define->typearray[num].;,array
define->typearray[num].;,string
define->typearray[num].;,num
define->typearray[num].;,%
define->typearray[num].;,/
define->typearray[num].;,*
define->typearray[num].;,-
define->typearray[num].;,+
define->typearray[num].;,char
define->typearray[num].;,double
define->typearray[num].;,int
define->typearray[num].;,}
define->typearray[num].;,{
define->typearray[num].;,(
define->typearray[num].;,id
define->typearray[num].={nums};,scanf
shift:297
define->typearray[num].={nums};,printf
define->typearray[num].={nums};,if
define->typearray[num].={nums};,while
define->typearray[num].={nums};,for
define->typearray[num].={nums};,return
define->typearray[num].={nums};,array
define->typearray[num].={nums};,string
define->typearray[num].={nums};,num
define->typearray[num].={nums};,%
define->typearray[num].={nums};,/
define->typearray[num].={nums};,*
define->typearray[num].={nums};,-
define->typearray[num].={nums};,+
define->typearray[num].={nums};,char
define->typearray[num].={nums};,double
define->typearray[num].={nums};,int
define->typearray[num].={nums};,}
define->typearray[num].={nums};,{
define->typearray[num].={nums};,(
define->typearray[num].={nums};,id
项目224:
define->typearray[]=.{nums};,scanf
shift:298
define->typearray[]=.{nums};,printf
define->typearray[]=.{nums};,if
define->typearray[]=.{nums};,while
define->typearray[]=.{nums};,for
define->typearray[]=.{nums};,return
define->typearray[]=.{nums};,array
define->typearray[]=.{nums};,string
define->typearray[]=.{nums};,num
define->typearray[]=.{nums};,%
define->typearray[]=.{nums};,/
define->typearray[]=.{nums};,*
define->typearray[]=.{nums};,-
define->typearray[]=.{nums};,+
define->typearray[]=.{nums};,char
define->typearray[]=.{nums};,double
define->typearray[]=.{nums};,int
define->typearray[]=.{nums};,}
define->typearray[]=.{nums};,{
define->typearray[]=.{nums};,(
define->typearray[]=.{nums};,id
define->typearray[]=.{string};,scanf
define->typearray[]=.{string};,printf
define->typearray[]=.{string};,if
define->typearray[]=.{string};,while
define->typearray[]=.{string};,for
define->typearray[]=.{string};,return
define->typearray[]=.{string};,array
define->typearray[]=.{string};,string
define->typearray[]=.{string};,num
define->typearray[]=.{string};,%
define->typearray[]=.{string};,/
define->typearray[]=.{string};,*
define->typearray[]=.{string};,-
define->typearray[]=.{string};,+
define->typearray[]=.{string};,char
define->typearray[]=.{string};,double
define->typearray[]=.{string};,int
define->typearray[]=.{string};,}
define->typearray[]=.{string};,{
define->typearray[]=.{string};,(
define->typearray[]=.{string};,id
项目225:
define->typeid_name=E;,scanf
reduce:37
define->typeid_name=E;,printf
reduce:37
define->typeid_name=E;,if
reduce:37
define->typeid_name=E;,while
reduce:37
define->typeid_name=E;,for
reduce:37
define->typeid_name=E;,return
reduce:37
define->typeid_name=E;,array
reduce:37
define->typeid_name=E;,string
reduce:37
define->typeid_name=E;,num
reduce:37
define->typeid_name=E;,%
reduce:37
define->typeid_name=E;,/
reduce:37
define->typeid_name=E;,*
reduce:37
define->typeid_name=E;,-
reduce:37
define->typeid_name=E;,+
reduce:37
define->typeid_name=E;,char
reduce:37
define->typeid_name=E;,double
reduce:37
define->typeid_name=E;,int
reduce:37
define->typeid_name=E;,}
reduce:37
define->typeid_name=E;,{
reduce:37
define->typeid_name=E;,(
reduce:37
define->typeid_name=E;,id
reduce:37
项目226:
function_call->id(),]
reduce:8
function_call->id(),%
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
项目227:
function_call->id(function_call_list.),]
shift:299
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
项目228:
F->(E),]
reduce:29
F->(E),%
reduce:29
F->(E),/
reduce:29
F->(E),*
reduce:29
F->(E),-
reduce:29
F->(E),+
reduce:29
项目229:
T->T.%F,]
shift:185
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,]
shift:184
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
shift:183
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E+T,]
reduce:22
E->E+T,-
reduce:22
E->E+T,+
reduce:22
项目230:
T->T.%F,]
shift:185
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,]
shift:184
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
shift:183
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E-T,]
reduce:23
E->E-T,-
reduce:23
E->E-T,+
reduce:23
项目231:
set_value->array[E]=.E,;
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目232:
T->T*F,]
reduce:25
T->T*F,%
reduce:25
T->T*F,/
reduce:25
T->T*F,*
reduce:25
T->T*F,-
reduce:25
T->T*F,+
reduce:25
项目233:
T->T/F,]
reduce:26
T->T/F,%
reduce:26
T->T/F,/
reduce:26
T->T/F,*
reduce:26
T->T/F,-
reduce:26
T->T/F,+
reduce:26
项目234:
T->T%F,]
reduce:27
T->T%F,%
reduce:27
T->T%F,/
reduce:27
T->T%F,*
reduce:27
T->T%F,-
reduce:27
T->T%F,+
reduce:27
项目235:
F->array[E.],]
shift:301
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
E->E.-T,]
shift:181
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:180
E->E.+T,-
E->E.+T,+
项目236:
F->array[E],%
reduce:33
F->array[E],/
reduce:33
F->array[E],*
reduce:33
F->array[E],-
reduce:33
F->array[E],+
reduce:33
F->array[E],;
reduce:33
项目237:
set_value->array[E.]=E,;
shift:302
E->E.-T,]
shift:181
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:180
E->E.+T,-
E->E.+T,+
项目238:
F->id,!=
reduce:32
F->id,==
reduce:32
F->id,>
reduce:32
F->id,<
reduce:32
F->id,<=
reduce:32
F->id,>=
reduce:32
F->id,%
reduce:32
F->id,/
reduce:32
F->id,*
reduce:32
F->id,-
reduce:32
F->id,+
reduce:32
F->id,;
reduce:32
function_call->id.(function_call_list),!=
shift:303
function_call->id.(function_call_list),==
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),!=
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目239:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),!=
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),;
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目240:
F->function_call,!=
reduce:34
F->function_call,==
reduce:34
F->function_call,>
reduce:34
F->function_call,<
reduce:34
F->function_call,<=
reduce:34
F->function_call,>=
reduce:34
F->function_call,%
reduce:34
F->function_call,/
reduce:34
F->function_call,*
reduce:34
F->function_call,-
reduce:34
F->function_call,+
reduce:34
F->function_call,;
reduce:34
项目241:
bool_expression->F,;
reduce:56
T->F,!=
reduce:28
T->F,==
reduce:28
T->F,>
reduce:28
T->F,<
reduce:28
T->F,<=
reduce:28
T->F,>=
reduce:28
T->F,%
reduce:28
T->F,/
reduce:28
T->F,*
reduce:28
T->F,-
reduce:28
T->F,+
reduce:28
项目242:
F->num,!=
reduce:30
F->num,==
reduce:30
F->num,>
reduce:30
F->num,<
reduce:30
F->num,<=
reduce:30
F->num,>=
reduce:30
F->num,%
reduce:30
F->num,/
reduce:30
F->num,*
reduce:30
F->num,-
reduce:30
F->num,+
reduce:30
F->num,;
reduce:30
项目243:
F->string,!=
reduce:31
F->string,==
reduce:31
F->string,>
reduce:31
F->string,<
reduce:31
F->string,<=
reduce:31
F->string,>=
reduce:31
F->string,%
reduce:31
F->string,/
reduce:31
F->string,*
reduce:31
F->string,-
reduce:31
F->string,+
reduce:31
F->string,;
reduce:31
项目244:
F->array.[E],!=
shift:305
F->array.[E],==
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目245:
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,scanf
shift:306
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,id
项目246:
op->.!=,array
shift:205
op->.!=,string
op->.!=,num
op->.!=,%
op->.!=,/
op->.!=,*
op->.!=,-
op->.!=,+
op->.!=,(
op->.!=,id
op->.==,array
shift:204
op->.==,string
op->.==,num
op->.==,%
op->.==,/
op->.==,*
op->.==,-
op->.==,+
op->.==,(
op->.==,id
op->.>,array
shift:203
op->.>,string
op->.>,num
op->.>,%
op->.>,/
op->.>,*
op->.>,-
op->.>,+
op->.>,(
op->.>,id
op->.<,array
shift:202
op->.<,string
op->.<,num
op->.<,%
op->.<,/
op->.<,*
op->.<,-
op->.<,+
op->.<,(
op->.<,id
op->.<=,array
shift:201
op->.<=,string
op->.<=,num
op->.<=,%
op->.<=,/
op->.<=,*
op->.<=,-
op->.<=,+
op->.<=,(
op->.<=,id
op->.>=,array
shift:200
op->.>=,string
op->.>=,num
op->.>=,%
op->.>=,/
op->.>=,*
op->.>=,-
op->.>=,+
op->.>=,(
op->.>=,id
bool_expression->G.opH,;
项目247:
function_call->id(),!=
reduce:8
function_call->id(),==
reduce:8
function_call->id(),>
reduce:8
function_call->id(),<
reduce:8
function_call->id(),<=
reduce:8
function_call->id(),>=
reduce:8
function_call->id(),%
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
function_call->id(),)
reduce:8
项目248:
function_call->id(function_call_list.),!=
shift:308
function_call->id(function_call_list.),==
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),)
项目249:
F->(E),!=
reduce:29
F->(E),==
reduce:29
F->(E),>
reduce:29
F->(E),<
reduce:29
F->(E),<=
reduce:29
F->(E),>=
reduce:29
F->(E),%
reduce:29
F->(E),/
reduce:29
F->(E),*
reduce:29
F->(E),-
reduce:29
F->(E),+
reduce:29
F->(E),)
reduce:29
项目250:
F->id,!=
reduce:32
F->id,==
reduce:32
F->id,>
reduce:32
F->id,<
reduce:32
F->id,<=
reduce:32
F->id,>=
reduce:32
F->id,%
reduce:32
F->id,/
reduce:32
F->id,*
reduce:32
F->id,-
reduce:32
F->id,+
reduce:32
function_call->id.(function_call_list),!=
shift:309
function_call->id.(function_call_list),==
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),%
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(),!=
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),%
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
项目251:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],%
shift:68
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,%
shift:60
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,%
shift:67
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,%
shift:66
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),!=
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),%
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->.(E),%
shift:61
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目252:
F->function_call,!=
reduce:34
F->function_call,==
reduce:34
F->function_call,>
reduce:34
F->function_call,<
reduce:34
F->function_call,<=
reduce:34
F->function_call,>=
reduce:34
F->function_call,%
reduce:34
F->function_call,/
reduce:34
F->function_call,*
reduce:34
F->function_call,-
reduce:34
F->function_call,+
reduce:34
项目253:
T->T.%F,!=
shift:196
T->T.%F,==
T->T.%F,>
T->T.%F,<
T->T.%F,<=
T->T.%F,>=
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,!=
shift:195
T->T./F,==
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,!=
shift:194
T->T.*F,==
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E+T,!=
reduce:22
E->E+T,==
reduce:22
E->E+T,>
reduce:22
E->E+T,<
reduce:22
E->E+T,<=
reduce:22
E->E+T,>=
reduce:22
E->E+T,-
reduce:22
E->E+T,+
reduce:22
项目254:
T->F,!=
reduce:28
T->F,==
reduce:28
T->F,>
reduce:28
T->F,<
reduce:28
T->F,<=
reduce:28
T->F,>=
reduce:28
T->F,%
reduce:28
T->F,/
reduce:28
T->F,*
reduce:28
T->F,-
reduce:28
T->F,+
reduce:28
项目255:
F->num,!=
reduce:30
F->num,==
reduce:30
F->num,>
reduce:30
F->num,<
reduce:30
F->num,<=
reduce:30
F->num,>=
reduce:30
F->num,%
reduce:30
F->num,/
reduce:30
F->num,*
reduce:30
F->num,-
reduce:30
F->num,+
reduce:30
项目256:
F->string,!=
reduce:31
F->string,==
reduce:31
F->string,>
reduce:31
F->string,<
reduce:31
F->string,<=
reduce:31
F->string,>=
reduce:31
F->string,%
reduce:31
F->string,/
reduce:31
F->string,*
reduce:31
F->string,-
reduce:31
F->string,+
reduce:31
项目257:
F->array.[E],!=
shift:311
F->array.[E],==
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],%
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
项目258:
T->T.%F,!=
shift:196
T->T.%F,==
T->T.%F,>
T->T.%F,<
T->T.%F,<=
T->T.%F,>=
T->T.%F,%
T->T.%F,/
T->T.%F,*
T->T.%F,-
T->T.%F,+
T->T./F,!=
shift:195
T->T./F,==
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,%
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,!=
shift:194
T->T.*F,==
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,%
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E-T,!=
reduce:23
E->E-T,==
reduce:23
E->E-T,>
reduce:23
E->E-T,<
reduce:23
E->E-T,<=
reduce:23
E->E-T,>=
reduce:23
E->E-T,-
reduce:23
E->E-T,+
reduce:23
项目259:
T->T*F,!=
reduce:25
T->T*F,==
reduce:25
T->T*F,>
reduce:25
T->T*F,<
reduce:25
T->T*F,<=
reduce:25
T->T*F,>=
reduce:25
T->T*F,%
reduce:25
T->T*F,/
reduce:25
T->T*F,*
reduce:25
T->T*F,-
reduce:25
T->T*F,+
reduce:25
项目260:
T->T/F,!=
reduce:26
T->T/F,==
reduce:26
T->T/F,>
reduce:26
T->T/F,<
reduce:26
T->T/F,<=
reduce:26
T->T/F,>=
reduce:26
T->T/F,%
reduce:26
T->T/F,/
reduce:26
T->T/F,*
reduce:26
T->T/F,-
reduce:26
T->T/F,+
reduce:26
项目261:
T->T%F,!=
reduce:27
T->T%F,==
reduce:27
T->T%F,>
reduce:27
T->T%F,<
reduce:27
T->T%F,<=
reduce:27
T->T%F,>=
reduce:27
T->T%F,%
reduce:27
T->T%F,/
reduce:27
T->T%F,*
reduce:27
T->T%F,-
reduce:27
T->T%F,+
reduce:27
项目262:
F->array[E.],!=
shift:312
F->array[E.],==
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],)
E->E.-T,]
shift:181
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:180
E->E.+T,-
E->E.+T,+
项目263:
whilesentence->sentence,scanf
reduce:54
whilesentence->sentence,printf
reduce:54
whilesentence->sentence,if
reduce:54
whilesentence->sentence,while
reduce:54
whilesentence->sentence,for
reduce:54
whilesentence->sentence,return
reduce:54
whilesentence->sentence,array
reduce:54
whilesentence->sentence,string
reduce:54
whilesentence->sentence,num
reduce:54
whilesentence->sentence,%
reduce:54
whilesentence->sentence,/
reduce:54
whilesentence->sentence,*
reduce:54
whilesentence->sentence,-
reduce:54
whilesentence->sentence,+
reduce:54
whilesentence->sentence,char
reduce:54
whilesentence->sentence,double
reduce:54
whilesentence->sentence,int
reduce:54
whilesentence->sentence,}
reduce:54
whilesentence->sentence,{
reduce:54
whilesentence->sentence,(
reduce:54
whilesentence->sentence,id
reduce:54
项目264:
while_expression->while1(bool_expression)whilesentence,scanf
reduce:52
while_expression->while1(bool_expression)whilesentence,printf
reduce:52
while_expression->while1(bool_expression)whilesentence,if
reduce:52
while_expression->while1(bool_expression)whilesentence,while
reduce:52
while_expression->while1(bool_expression)whilesentence,for
reduce:52
while_expression->while1(bool_expression)whilesentence,return
reduce:52
while_expression->while1(bool_expression)whilesentence,array
reduce:52
while_expression->while1(bool_expression)whilesentence,string
reduce:52
while_expression->while1(bool_expression)whilesentence,num
reduce:52
while_expression->while1(bool_expression)whilesentence,%
reduce:52
while_expression->while1(bool_expression)whilesentence,/
reduce:52
while_expression->while1(bool_expression)whilesentence,*
reduce:52
while_expression->while1(bool_expression)whilesentence,-
reduce:52
while_expression->while1(bool_expression)whilesentence,+
reduce:52
while_expression->while1(bool_expression)whilesentence,char
reduce:52
while_expression->while1(bool_expression)whilesentence,double
reduce:52
while_expression->while1(bool_expression)whilesentence,int
reduce:52
while_expression->while1(bool_expression)whilesentence,}
reduce:52
while_expression->while1(bool_expression)whilesentence,{
reduce:52
while_expression->while1(bool_expression)whilesentence,(
reduce:52
while_expression->while1(bool_expression)whilesentence,id
reduce:52
项目265:
H->E,)
reduce:63
E->E.-T,-
shift:112
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:111
E->E.+T,+
E->E.+T,)
项目266:
bool_expression->GopH,)
reduce:55
项目267:
scanf_expression->.scanf(string);,scanf
shift:53
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:52
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:48
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:41
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:36
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->{.},scanf
shift:314
sentence->{.},printf
sentence->{.},else
sentence->{.},if
sentence->{.},while
sentence->{.},for
sentence->{.},return
sentence->{.},array
sentence->{.},string
sentence->{.},num
sentence->{.},%
sentence->{.},/
sentence->{.},*
sentence->{.},-
sentence->{.},+
sentence->{.},char
sentence->{.},double
sentence->{.},int
sentence->{.},}
sentence->{.},{
sentence->{.},(
sentence->{.},id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->{.block},scanf
sentence->{.block},printf
sentence->{.block},else
sentence->{.block},if
sentence->{.block},while
sentence->{.block},for
sentence->{.block},return
sentence->{.block},array
sentence->{.block},string
sentence->{.block},num
sentence->{.block},%
sentence->{.block},/
sentence->{.block},*
sentence->{.block},-
sentence->{.block},+
sentence->{.block},char
sentence->{.block},double
sentence->{.block},int
sentence->{.block},}
sentence->{.block},{
sentence->{.block},(
sentence->{.block},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目268:
define->type.array[num];,scanf
shift:315
define->type.array[num];,printf
define->type.array[num];,else
define->type.array[num];,if
define->type.array[num];,while
define->type.array[num];,for
define->type.array[num];,return
define->type.array[num];,array
define->type.array[num];,string
define->type.array[num];,num
define->type.array[num];,%
define->type.array[num];,/
define->type.array[num];,*
define->type.array[num];,-
define->type.array[num];,+
define->type.array[num];,char
define->type.array[num];,double
define->type.array[num];,int
define->type.array[num];,}
define->type.array[num];,{
define->type.array[num];,(
define->type.array[num];,id
define->type.array[]={nums};,scanf
define->type.array[]={nums};,printf
define->type.array[]={nums};,else
define->type.array[]={nums};,if
define->type.array[]={nums};,while
define->type.array[]={nums};,for
define->type.array[]={nums};,return
define->type.array[]={nums};,array
define->type.array[]={nums};,string
define->type.array[]={nums};,num
define->type.array[]={nums};,%
define->type.array[]={nums};,/
define->type.array[]={nums};,*
define->type.array[]={nums};,-
define->type.array[]={nums};,+
define->type.array[]={nums};,char
define->type.array[]={nums};,double
define->type.array[]={nums};,int
define->type.array[]={nums};,}
define->type.array[]={nums};,{
define->type.array[]={nums};,(
define->type.array[]={nums};,id
define->type.array[num]={nums};,scanf
define->type.array[num]={nums};,printf
define->type.array[num]={nums};,else
define->type.array[num]={nums};,if
define->type.array[num]={nums};,while
define->type.array[num]={nums};,for
define->type.array[num]={nums};,return
define->type.array[num]={nums};,array
define->type.array[num]={nums};,string
define->type.array[num]={nums};,num
define->type.array[num]={nums};,%
define->type.array[num]={nums};,/
define->type.array[num]={nums};,*
define->type.array[num]={nums};,-
define->type.array[num]={nums};,+
define->type.array[num]={nums};,char
define->type.array[num]={nums};,double
define->type.array[num]={nums};,int
define->type.array[num]={nums};,}
define->type.array[num]={nums};,{
define->type.array[num]={nums};,(
define->type.array[num]={nums};,id
define->type.array[]={string};,scanf
define->type.array[]={string};,printf
define->type.array[]={string};,else
define->type.array[]={string};,if
define->type.array[]={string};,while
define->type.array[]={string};,for
define->type.array[]={string};,return
define->type.array[]={string};,array
define->type.array[]={string};,string
define->type.array[]={string};,num
define->type.array[]={string};,%
define->type.array[]={string};,/
define->type.array[]={string};,*
define->type.array[]={string};,-
define->type.array[]={string};,+
define->type.array[]={string};,char
define->type.array[]={string};,double
define->type.array[]={string};,int
define->type.array[]={string};,}
define->type.array[]={string};,{
define->type.array[]={string};,(
define->type.array[]={string};,id
id_name->.id,=
shift:72
id_name->.id,;
define->type.id_name;,scanf
define->type.id_name;,printf
define->type.id_name;,else
define->type.id_name;,if
define->type.id_name;,while
define->type.id_name;,for
define->type.id_name;,return
define->type.id_name;,array
define->type.id_name;,string
define->type.id_name;,num
define->type.id_name;,%
define->type.id_name;,/
define->type.id_name;,*
define->type.id_name;,-
define->type.id_name;,+
define->type.id_name;,char
define->type.id_name;,double
define->type.id_name;,int
define->type.id_name;,}
define->type.id_name;,{
define->type.id_name;,(
define->type.id_name;,id
define->type.id_name=E;,scanf
define->type.id_name=E;,printf
define->type.id_name=E;,else
define->type.id_name=E;,if
define->type.id_name=E;,while
define->type.id_name=E;,for
define->type.id_name=E;,return
define->type.id_name=E;,array
define->type.id_name=E;,string
define->type.id_name=E;,num
define->type.id_name=E;,%
define->type.id_name=E;,/
define->type.id_name=E;,*
define->type.id_name=E;,-
define->type.id_name=E;,+
define->type.id_name=E;,char
define->type.id_name=E;,double
define->type.id_name=E;,int
define->type.id_name=E;,}
define->type.id_name=E;,{
define->type.id_name=E;,(
define->type.id_name=E;,id
项目269:
E->E.-T,-
shift:77
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:76
E->E.+T,+
E->E.+T,;
sentence->E.;,scanf
shift:317
sentence->E.;,printf
sentence->E.;,else
sentence->E.;,if
sentence->E.;,while
sentence->E.;,for
sentence->E.;,return
sentence->E.;,array
sentence->E.;,string
sentence->E.;,num
sentence->E.;,%
sentence->E.;,/
sentence->E.;,*
sentence->E.;,-
sentence->E.;,+
sentence->E.;,char
sentence->E.;,double
sentence->E.;,int
sentence->E.;,}
sentence->E.;,{
sentence->E.;,(
sentence->E.;,id
项目270:
ifsentence->sentence,else
reduce:75
if_expression->if(bool_expression)sentence,scanf
reduce:73
if_expression->if(bool_expression)sentence,printf
reduce:73
if_expression->if(bool_expression)sentence,if
reduce:73
if_expression->if(bool_expression)sentence,while
reduce:73
if_expression->if(bool_expression)sentence,for
reduce:73
if_expression->if(bool_expression)sentence,return
reduce:73
if_expression->if(bool_expression)sentence,array
reduce:73
if_expression->if(bool_expression)sentence,string
reduce:73
if_expression->if(bool_expression)sentence,num
reduce:73
if_expression->if(bool_expression)sentence,%
reduce:73
if_expression->if(bool_expression)sentence,/
reduce:73
if_expression->if(bool_expression)sentence,*
reduce:73
if_expression->if(bool_expression)sentence,-
reduce:73
if_expression->if(bool_expression)sentence,+
reduce:73
if_expression->if(bool_expression)sentence,char
reduce:73
if_expression->if(bool_expression)sentence,double
reduce:73
if_expression->if(bool_expression)sentence,int
reduce:73
if_expression->if(bool_expression)sentence,}
reduce:73
if_expression->if(bool_expression)sentence,{
reduce:73
if_expression->if(bool_expression)sentence,(
reduce:73
if_expression->if(bool_expression)sentence,id
reduce:73
项目271:
sentence->return.E;,scanf
sentence->return.E;,printf
sentence->return.E;,else
sentence->return.E;,if
sentence->return.E;,while
sentence->return.E;,for
sentence->return.E;,return
sentence->return.E;,array
sentence->return.E;,string
sentence->return.E;,num
sentence->return.E;,%
sentence->return.E;,/
sentence->return.E;,*
sentence->return.E;,-
sentence->return.E;,+
sentence->return.E;,char
sentence->return.E;,double
sentence->return.E;,int
sentence->return.E;,}
sentence->return.E;,{
sentence->return.E;,(
sentence->return.E;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目272:
sentence->define,scanf
reduce:36
sentence->define,printf
reduce:36
sentence->define,else
reduce:36
sentence->define,if
reduce:36
sentence->define,while
reduce:36
sentence->define,for
reduce:36
sentence->define,return
reduce:36
sentence->define,array
reduce:36
sentence->define,string
reduce:36
sentence->define,num
reduce:36
sentence->define,%
reduce:36
sentence->define,/
reduce:36
sentence->define,*
reduce:36
sentence->define,-
reduce:36
sentence->define,+
reduce:36
sentence->define,char
reduce:36
sentence->define,double
reduce:36
sentence->define,int
reduce:36
sentence->define,}
reduce:36
sentence->define,{
reduce:36
sentence->define,(
reduce:36
sentence->define,id
reduce:36
项目273:
sentence->set_value.;,scanf
shift:319
sentence->set_value.;,printf
sentence->set_value.;,else
sentence->set_value.;,if
sentence->set_value.;,while
sentence->set_value.;,for
sentence->set_value.;,return
sentence->set_value.;,array
sentence->set_value.;,string
sentence->set_value.;,num
sentence->set_value.;,%
sentence->set_value.;,/
sentence->set_value.;,*
sentence->set_value.;,-
sentence->set_value.;,+
sentence->set_value.;,char
sentence->set_value.;,double
sentence->set_value.;,int
sentence->set_value.;,}
sentence->set_value.;,{
sentence->set_value.;,(
sentence->set_value.;,id
项目274:
sentence->loop_expression,scanf
reduce:49
sentence->loop_expression,printf
reduce:49
sentence->loop_expression,else
reduce:49
sentence->loop_expression,if
reduce:49
sentence->loop_expression,while
reduce:49
sentence->loop_expression,for
reduce:49
sentence->loop_expression,return
reduce:49
sentence->loop_expression,array
reduce:49
sentence->loop_expression,string
reduce:49
sentence->loop_expression,num
reduce:49
sentence->loop_expression,%
reduce:49
sentence->loop_expression,/
reduce:49
sentence->loop_expression,*
reduce:49
sentence->loop_expression,-
reduce:49
sentence->loop_expression,+
reduce:49
sentence->loop_expression,char
reduce:49
sentence->loop_expression,double
reduce:49
sentence->loop_expression,int
reduce:49
sentence->loop_expression,}
reduce:49
sentence->loop_expression,{
reduce:49
sentence->loop_expression,(
reduce:49
sentence->loop_expression,id
reduce:49
项目275:
sentence->while_expression,scanf
reduce:50
sentence->while_expression,printf
reduce:50
sentence->while_expression,else
reduce:50
sentence->while_expression,if
reduce:50
sentence->while_expression,while
reduce:50
sentence->while_expression,for
reduce:50
sentence->while_expression,return
reduce:50
sentence->while_expression,array
reduce:50
sentence->while_expression,string
reduce:50
sentence->while_expression,num
reduce:50
sentence->while_expression,%
reduce:50
sentence->while_expression,/
reduce:50
sentence->while_expression,*
reduce:50
sentence->while_expression,-
reduce:50
sentence->while_expression,+
reduce:50
sentence->while_expression,char
reduce:50
sentence->while_expression,double
reduce:50
sentence->while_expression,int
reduce:50
sentence->while_expression,}
reduce:50
sentence->while_expression,{
reduce:50
sentence->while_expression,(
reduce:50
sentence->while_expression,id
reduce:50
项目276:
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:320
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,id
项目277:
sentence->IncorDec.;,scanf
shift:321
sentence->IncorDec.;,printf
sentence->IncorDec.;,else
sentence->IncorDec.;,if
sentence->IncorDec.;,while
sentence->IncorDec.;,for
sentence->IncorDec.;,return
sentence->IncorDec.;,array
sentence->IncorDec.;,string
sentence->IncorDec.;,num
sentence->IncorDec.;,%
sentence->IncorDec.;,/
sentence->IncorDec.;,*
sentence->IncorDec.;,-
sentence->IncorDec.;,+
sentence->IncorDec.;,char
sentence->IncorDec.;,double
sentence->IncorDec.;,int
sentence->IncorDec.;,}
sentence->IncorDec.;,{
sentence->IncorDec.;,(
sentence->IncorDec.;,id
项目278:
while_expression->while1.(bool_expression)whilesentence,scanf
shift:322
while_expression->while1.(bool_expression)whilesentence,printf
while_expression->while1.(bool_expression)whilesentence,else
while_expression->while1.(bool_expression)whilesentence,if
while_expression->while1.(bool_expression)whilesentence,while
while_expression->while1.(bool_expression)whilesentence,for
while_expression->while1.(bool_expression)whilesentence,return
while_expression->while1.(bool_expression)whilesentence,array
while_expression->while1.(bool_expression)whilesentence,string
while_expression->while1.(bool_expression)whilesentence,num
while_expression->while1.(bool_expression)whilesentence,%
while_expression->while1.(bool_expression)whilesentence,/
while_expression->while1.(bool_expression)whilesentence,*
while_expression->while1.(bool_expression)whilesentence,-
while_expression->while1.(bool_expression)whilesentence,+
while_expression->while1.(bool_expression)whilesentence,char
while_expression->while1.(bool_expression)whilesentence,double
while_expression->while1.(bool_expression)whilesentence,int
while_expression->while1.(bool_expression)whilesentence,}
while_expression->while1.(bool_expression)whilesentence,{
while_expression->while1.(bool_expression)whilesentence,(
while_expression->while1.(bool_expression)whilesentence,id
项目279:
sentence->if_expression,scanf
reduce:72
sentence->if_expression,printf
reduce:72
sentence->if_expression,else
reduce:72
sentence->if_expression,if
reduce:72
sentence->if_expression,while
reduce:72
sentence->if_expression,for
reduce:72
sentence->if_expression,return
reduce:72
sentence->if_expression,array
reduce:72
sentence->if_expression,string
reduce:72
sentence->if_expression,num
reduce:72
sentence->if_expression,%
reduce:72
sentence->if_expression,/
reduce:72
sentence->if_expression,*
reduce:72
sentence->if_expression,-
reduce:72
sentence->if_expression,+
reduce:72
sentence->if_expression,char
reduce:72
sentence->if_expression,double
reduce:72
sentence->if_expression,int
reduce:72
sentence->if_expression,}
reduce:72
sentence->if_expression,{
reduce:72
sentence->if_expression,(
reduce:72
sentence->if_expression,id
reduce:72
项目280:
if_expression->if.(bool_expression)ifsentenceelsesentence,scanf
shift:323
if_expression->if.(bool_expression)ifsentenceelsesentence,printf
if_expression->if.(bool_expression)ifsentenceelsesentence,else
if_expression->if.(bool_expression)ifsentenceelsesentence,if
if_expression->if.(bool_expression)ifsentenceelsesentence,while
if_expression->if.(bool_expression)ifsentenceelsesentence,for
if_expression->if.(bool_expression)ifsentenceelsesentence,return
if_expression->if.(bool_expression)ifsentenceelsesentence,array
if_expression->if.(bool_expression)ifsentenceelsesentence,string
if_expression->if.(bool_expression)ifsentenceelsesentence,num
if_expression->if.(bool_expression)ifsentenceelsesentence,%
if_expression->if.(bool_expression)ifsentenceelsesentence,/
if_expression->if.(bool_expression)ifsentenceelsesentence,*
if_expression->if.(bool_expression)ifsentenceelsesentence,-
if_expression->if.(bool_expression)ifsentenceelsesentence,+
if_expression->if.(bool_expression)ifsentenceelsesentence,char
if_expression->if.(bool_expression)ifsentenceelsesentence,double
if_expression->if.(bool_expression)ifsentenceelsesentence,int
if_expression->if.(bool_expression)ifsentenceelsesentence,}
if_expression->if.(bool_expression)ifsentenceelsesentence,{
if_expression->if.(bool_expression)ifsentenceelsesentence,(
if_expression->if.(bool_expression)ifsentenceelsesentence,id
if_expression->if.(bool_expression)sentence,scanf
if_expression->if.(bool_expression)sentence,printf
if_expression->if.(bool_expression)sentence,else
if_expression->if.(bool_expression)sentence,if
if_expression->if.(bool_expression)sentence,while
if_expression->if.(bool_expression)sentence,for
if_expression->if.(bool_expression)sentence,return
if_expression->if.(bool_expression)sentence,array
if_expression->if.(bool_expression)sentence,string
if_expression->if.(bool_expression)sentence,num
if_expression->if.(bool_expression)sentence,%
if_expression->if.(bool_expression)sentence,/
if_expression->if.(bool_expression)sentence,*
if_expression->if.(bool_expression)sentence,-
if_expression->if.(bool_expression)sentence,+
if_expression->if.(bool_expression)sentence,char
if_expression->if.(bool_expression)sentence,double
if_expression->if.(bool_expression)sentence,int
if_expression->if.(bool_expression)sentence,}
if_expression->if.(bool_expression)sentence,{
if_expression->if.(bool_expression)sentence,(
if_expression->if.(bool_expression)sentence,id
项目281:
if_expression->if(bool_expression)ifsentence.elsesentence,scanf
shift:324
if_expression->if(bool_expression)ifsentence.elsesentence,printf
if_expression->if(bool_expression)ifsentence.elsesentence,if
if_expression->if(bool_expression)ifsentence.elsesentence,while
if_expression->if(bool_expression)ifsentence.elsesentence,for
if_expression->if(bool_expression)ifsentence.elsesentence,return
if_expression->if(bool_expression)ifsentence.elsesentence,array
if_expression->if(bool_expression)ifsentence.elsesentence,string
if_expression->if(bool_expression)ifsentence.elsesentence,num
if_expression->if(bool_expression)ifsentence.elsesentence,%
if_expression->if(bool_expression)ifsentence.elsesentence,/
if_expression->if(bool_expression)ifsentence.elsesentence,*
if_expression->if(bool_expression)ifsentence.elsesentence,-
if_expression->if(bool_expression)ifsentence.elsesentence,+
if_expression->if(bool_expression)ifsentence.elsesentence,char
if_expression->if(bool_expression)ifsentence.elsesentence,double
if_expression->if(bool_expression)ifsentence.elsesentence,int
if_expression->if(bool_expression)ifsentence.elsesentence,}
if_expression->if(bool_expression)ifsentence.elsesentence,{
if_expression->if(bool_expression)ifsentence.elsesentence,(
if_expression->if(bool_expression)ifsentence.elsesentence,id
项目282:
sentence->inout_expression,scanf
reduce:76
sentence->inout_expression,printf
reduce:76
sentence->inout_expression,else
reduce:76
sentence->inout_expression,if
reduce:76
sentence->inout_expression,while
reduce:76
sentence->inout_expression,for
reduce:76
sentence->inout_expression,return
reduce:76
sentence->inout_expression,array
reduce:76
sentence->inout_expression,string
reduce:76
sentence->inout_expression,num
reduce:76
sentence->inout_expression,%
reduce:76
sentence->inout_expression,/
reduce:76
sentence->inout_expression,*
reduce:76
sentence->inout_expression,-
reduce:76
sentence->inout_expression,+
reduce:76
sentence->inout_expression,char
reduce:76
sentence->inout_expression,double
reduce:76
sentence->inout_expression,int
reduce:76
sentence->inout_expression,}
reduce:76
sentence->inout_expression,{
reduce:76
sentence->inout_expression,(
reduce:76
sentence->inout_expression,id
reduce:76
项目283:
inout_expression->printf_expression,scanf
reduce:77
inout_expression->printf_expression,printf
reduce:77
inout_expression->printf_expression,else
reduce:77
inout_expression->printf_expression,if
reduce:77
inout_expression->printf_expression,while
reduce:77
inout_expression->printf_expression,for
reduce:77
inout_expression->printf_expression,return
reduce:77
inout_expression->printf_expression,array
reduce:77
inout_expression->printf_expression,string
reduce:77
inout_expression->printf_expression,num
reduce:77
inout_expression->printf_expression,%
reduce:77
inout_expression->printf_expression,/
reduce:77
inout_expression->printf_expression,*
reduce:77
inout_expression->printf_expression,-
reduce:77
inout_expression->printf_expression,+
reduce:77
inout_expression->printf_expression,char
reduce:77
inout_expression->printf_expression,double
reduce:77
inout_expression->printf_expression,int
reduce:77
inout_expression->printf_expression,}
reduce:77
inout_expression->printf_expression,{
reduce:77
inout_expression->printf_expression,(
reduce:77
inout_expression->printf_expression,id
reduce:77
项目284:
inout_expression->scanf_expression,scanf
reduce:78
inout_expression->scanf_expression,printf
reduce:78
inout_expression->scanf_expression,else
reduce:78
inout_expression->scanf_expression,if
reduce:78
inout_expression->scanf_expression,while
reduce:78
inout_expression->scanf_expression,for
reduce:78
inout_expression->scanf_expression,return
reduce:78
inout_expression->scanf_expression,array
reduce:78
inout_expression->scanf_expression,string
reduce:78
inout_expression->scanf_expression,num
reduce:78
inout_expression->scanf_expression,%
reduce:78
inout_expression->scanf_expression,/
reduce:78
inout_expression->scanf_expression,*
reduce:78
inout_expression->scanf_expression,-
reduce:78
inout_expression->scanf_expression,+
reduce:78
inout_expression->scanf_expression,char
reduce:78
inout_expression->scanf_expression,double
reduce:78
inout_expression->scanf_expression,int
reduce:78
inout_expression->scanf_expression,}
reduce:78
inout_expression->scanf_expression,{
reduce:78
inout_expression->scanf_expression,(
reduce:78
inout_expression->scanf_expression,id
reduce:78
项目285:
printf_expression->printf.(string,expressions);,scanf
shift:325
printf_expression->printf.(string,expressions);,printf
printf_expression->printf.(string,expressions);,else
printf_expression->printf.(string,expressions);,if
printf_expression->printf.(string,expressions);,while
printf_expression->printf.(string,expressions);,for
printf_expression->printf.(string,expressions);,return
printf_expression->printf.(string,expressions);,array
printf_expression->printf.(string,expressions);,string
printf_expression->printf.(string,expressions);,num
printf_expression->printf.(string,expressions);,%
printf_expression->printf.(string,expressions);,/
printf_expression->printf.(string,expressions);,*
printf_expression->printf.(string,expressions);,-
printf_expression->printf.(string,expressions);,+
printf_expression->printf.(string,expressions);,char
printf_expression->printf.(string,expressions);,double
printf_expression->printf.(string,expressions);,int
printf_expression->printf.(string,expressions);,}
printf_expression->printf.(string,expressions);,{
printf_expression->printf.(string,expressions);,(
printf_expression->printf.(string,expressions);,id
printf_expression->printf.(string);,scanf
printf_expression->printf.(string);,printf
printf_expression->printf.(string);,else
printf_expression->printf.(string);,if
printf_expression->printf.(string);,while
printf_expression->printf.(string);,for
printf_expression->printf.(string);,return
printf_expression->printf.(string);,array
printf_expression->printf.(string);,string
printf_expression->printf.(string);,num
printf_expression->printf.(string);,%
printf_expression->printf.(string);,/
printf_expression->printf.(string);,*
printf_expression->printf.(string);,-
printf_expression->printf.(string);,+
printf_expression->printf.(string);,char
printf_expression->printf.(string);,double
printf_expression->printf.(string);,int
printf_expression->printf.(string);,}
printf_expression->printf.(string);,{
printf_expression->printf.(string);,(
printf_expression->printf.(string);,id
项目286:
scanf_expression->scanf.(string);,scanf
shift:326
scanf_expression->scanf.(string);,printf
scanf_expression->scanf.(string);,else
scanf_expression->scanf.(string);,if
scanf_expression->scanf.(string);,while
scanf_expression->scanf.(string);,for
scanf_expression->scanf.(string);,return
scanf_expression->scanf.(string);,array
scanf_expression->scanf.(string);,string
scanf_expression->scanf.(string);,num
scanf_expression->scanf.(string);,%
scanf_expression->scanf.(string);,/
scanf_expression->scanf.(string);,*
scanf_expression->scanf.(string);,-
scanf_expression->scanf.(string);,+
scanf_expression->scanf.(string);,char
scanf_expression->scanf.(string);,double
scanf_expression->scanf.(string);,int
scanf_expression->scanf.(string);,}
scanf_expression->scanf.(string);,{
scanf_expression->scanf.(string);,(
scanf_expression->scanf.(string);,id
scanf_expression->scanf.(string,expressions);,scanf
scanf_expression->scanf.(string,expressions);,printf
scanf_expression->scanf.(string,expressions);,else
scanf_expression->scanf.(string,expressions);,if
scanf_expression->scanf.(string,expressions);,while
scanf_expression->scanf.(string,expressions);,for
scanf_expression->scanf.(string,expressions);,return
scanf_expression->scanf.(string,expressions);,array
scanf_expression->scanf.(string,expressions);,string
scanf_expression->scanf.(string,expressions);,num
scanf_expression->scanf.(string,expressions);,%
scanf_expression->scanf.(string,expressions);,/
scanf_expression->scanf.(string,expressions);,*
scanf_expression->scanf.(string,expressions);,-
scanf_expression->scanf.(string,expressions);,+
scanf_expression->scanf.(string,expressions);,char
scanf_expression->scanf.(string,expressions);,double
scanf_expression->scanf.(string,expressions);,int
scanf_expression->scanf.(string,expressions);,}
scanf_expression->scanf.(string,expressions);,{
scanf_expression->scanf.(string,expressions);,(
scanf_expression->scanf.(string,expressions);,id
项目287:
printf_expression->printf(string);,scanf
reduce:79
printf_expression->printf(string);,printf
reduce:79
printf_expression->printf(string);,if
reduce:79
printf_expression->printf(string);,while
reduce:79
printf_expression->printf(string);,for
reduce:79
printf_expression->printf(string);,return
reduce:79
printf_expression->printf(string);,array
reduce:79
printf_expression->printf(string);,string
reduce:79
printf_expression->printf(string);,num
reduce:79
printf_expression->printf(string);,%
reduce:79
printf_expression->printf(string);,/
reduce:79
printf_expression->printf(string);,*
reduce:79
printf_expression->printf(string);,-
reduce:79
printf_expression->printf(string);,+
reduce:79
printf_expression->printf(string);,char
reduce:79
printf_expression->printf(string);,double
reduce:79
printf_expression->printf(string);,int
reduce:79
printf_expression->printf(string);,}
reduce:79
printf_expression->printf(string);,{
reduce:79
printf_expression->printf(string);,(
reduce:79
printf_expression->printf(string);,id
reduce:79
项目288:
getaddr->id,,
reduce:85
getaddr->id,)
reduce:85
项目289:
printf_expression->printf(string,expressions.);,scanf
shift:327
printf_expression->printf(string,expressions.);,printf
printf_expression->printf(string,expressions.);,if
printf_expression->printf(string,expressions.);,while
printf_expression->printf(string,expressions.);,for
printf_expression->printf(string,expressions.);,return
printf_expression->printf(string,expressions.);,array
printf_expression->printf(string,expressions.);,string
printf_expression->printf(string,expressions.);,num
printf_expression->printf(string,expressions.);,%
printf_expression->printf(string,expressions.);,/
printf_expression->printf(string,expressions.);,*
printf_expression->printf(string,expressions.);,-
printf_expression->printf(string,expressions.);,+
printf_expression->printf(string,expressions.);,char
printf_expression->printf(string,expressions.);,double
printf_expression->printf(string,expressions.);,int
printf_expression->printf(string,expressions.);,}
printf_expression->printf(string,expressions.);,{
printf_expression->printf(string,expressions.);,(
printf_expression->printf(string,expressions.);,id
项目290:
expressions->getaddr,)
reduce:82
expressions->getaddr.,expressions,)
shift:328
项目291:
getaddr->&.id,,
shift:329
getaddr->&.id,)
项目292:
scanf_expression->scanf(string);,scanf
reduce:84
scanf_expression->scanf(string);,printf
reduce:84
scanf_expression->scanf(string);,if
reduce:84
scanf_expression->scanf(string);,while
reduce:84
scanf_expression->scanf(string);,for
reduce:84
scanf_expression->scanf(string);,return
reduce:84
scanf_expression->scanf(string);,array
reduce:84
scanf_expression->scanf(string);,string
reduce:84
scanf_expression->scanf(string);,num
reduce:84
scanf_expression->scanf(string);,%
reduce:84
scanf_expression->scanf(string);,/
reduce:84
scanf_expression->scanf(string);,*
reduce:84
scanf_expression->scanf(string);,-
reduce:84
scanf_expression->scanf(string);,+
reduce:84
scanf_expression->scanf(string);,char
reduce:84
scanf_expression->scanf(string);,double
reduce:84
scanf_expression->scanf(string);,int
reduce:84
scanf_expression->scanf(string);,}
reduce:84
scanf_expression->scanf(string);,{
reduce:84
scanf_expression->scanf(string);,(
reduce:84
scanf_expression->scanf(string);,id
reduce:84
项目293:
scanf_expression->scanf(string,expressions.);,scanf
shift:330
scanf_expression->scanf(string,expressions.);,printf
scanf_expression->scanf(string,expressions.);,if
scanf_expression->scanf(string,expressions.);,while
scanf_expression->scanf(string,expressions.);,for
scanf_expression->scanf(string,expressions.);,return
scanf_expression->scanf(string,expressions.);,array
scanf_expression->scanf(string,expressions.);,string
scanf_expression->scanf(string,expressions.);,num
scanf_expression->scanf(string,expressions.);,%
scanf_expression->scanf(string,expressions.);,/
scanf_expression->scanf(string,expressions.);,*
scanf_expression->scanf(string,expressions.);,-
scanf_expression->scanf(string,expressions.);,+
scanf_expression->scanf(string,expressions.);,char
scanf_expression->scanf(string,expressions.);,double
scanf_expression->scanf(string,expressions.);,int
scanf_expression->scanf(string,expressions.);,}
scanf_expression->scanf(string,expressions.);,{
scanf_expression->scanf(string,expressions.);,(
scanf_expression->scanf(string,expressions.);,id
项目294:
function_call->id(function_call_list),%
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
function_call->id(function_call_list),,
reduce:9
function_call->id(function_call_list),)
reduce:9
项目295:
F->array[E],%
reduce:33
F->array[E],/
reduce:33
F->array[E],*
reduce:33
F->array[E],-
reduce:33
F->array[E],+
reduce:33
F->array[E],,
reduce:33
F->array[E],)
reduce:33
项目296:
define->typearray[num];,scanf
reduce:43
define->typearray[num];,printf
reduce:43
define->typearray[num];,if
reduce:43
define->typearray[num];,while
reduce:43
define->typearray[num];,for
reduce:43
define->typearray[num];,return
reduce:43
define->typearray[num];,array
reduce:43
define->typearray[num];,string
reduce:43
define->typearray[num];,num
reduce:43
define->typearray[num];,%
reduce:43
define->typearray[num];,/
reduce:43
define->typearray[num];,*
reduce:43
define->typearray[num];,-
reduce:43
define->typearray[num];,+
reduce:43
define->typearray[num];,char
reduce:43
define->typearray[num];,double
reduce:43
define->typearray[num];,int
reduce:43
define->typearray[num];,}
reduce:43
define->typearray[num];,{
reduce:43
define->typearray[num];,(
reduce:43
define->typearray[num];,id
reduce:43
项目297:
define->typearray[num]=.{nums};,scanf
shift:331
define->typearray[num]=.{nums};,printf
define->typearray[num]=.{nums};,if
define->typearray[num]=.{nums};,while
define->typearray[num]=.{nums};,for
define->typearray[num]=.{nums};,return
define->typearray[num]=.{nums};,array
define->typearray[num]=.{nums};,string
define->typearray[num]=.{nums};,num
define->typearray[num]=.{nums};,%
define->typearray[num]=.{nums};,/
define->typearray[num]=.{nums};,*
define->typearray[num]=.{nums};,-
define->typearray[num]=.{nums};,+
define->typearray[num]=.{nums};,char
define->typearray[num]=.{nums};,double
define->typearray[num]=.{nums};,int
define->typearray[num]=.{nums};,}
define->typearray[num]=.{nums};,{
define->typearray[num]=.{nums};,(
define->typearray[num]=.{nums};,id
项目298:
nums->.num,}
shift:332
nums->.num,nums,}
define->typearray[]={.nums};,scanf
define->typearray[]={.nums};,printf
define->typearray[]={.nums};,if
define->typearray[]={.nums};,while
define->typearray[]={.nums};,for
define->typearray[]={.nums};,return
define->typearray[]={.nums};,array
define->typearray[]={.nums};,string
define->typearray[]={.nums};,num
define->typearray[]={.nums};,%
define->typearray[]={.nums};,/
define->typearray[]={.nums};,*
define->typearray[]={.nums};,-
define->typearray[]={.nums};,+
define->typearray[]={.nums};,char
define->typearray[]={.nums};,double
define->typearray[]={.nums};,int
define->typearray[]={.nums};,}
define->typearray[]={.nums};,{
define->typearray[]={.nums};,(
define->typearray[]={.nums};,id
define->typearray[]={.string};,scanf
shift:333
define->typearray[]={.string};,printf
define->typearray[]={.string};,if
define->typearray[]={.string};,while
define->typearray[]={.string};,for
define->typearray[]={.string};,return
define->typearray[]={.string};,array
define->typearray[]={.string};,string
define->typearray[]={.string};,num
define->typearray[]={.string};,%
define->typearray[]={.string};,/
define->typearray[]={.string};,*
define->typearray[]={.string};,-
define->typearray[]={.string};,+
define->typearray[]={.string};,char
define->typearray[]={.string};,double
define->typearray[]={.string};,int
define->typearray[]={.string};,}
define->typearray[]={.string};,{
define->typearray[]={.string};,(
define->typearray[]={.string};,id
项目299:
function_call->id(function_call_list),]
reduce:9
function_call->id(function_call_list),%
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
项目300:
set_value->array[E]=E,;
reduce:48
E->E.-T,-
shift:77
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:76
E->E.+T,+
E->E.+T,;
项目301:
F->array[E],]
reduce:33
F->array[E],%
reduce:33
F->array[E],/
reduce:33
F->array[E],*
reduce:33
F->array[E],-
reduce:33
F->array[E],+
reduce:33
项目302:
set_value->array[E].=E,;
shift:231
项目303:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),!=
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),!=
shift:335
function_call->id(.),==
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目304:
F->(E.),!=
shift:337
F->(E.),==
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),;
E->E.-T,-
shift:112
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:111
E->E.+T,+
E->E.+T,)
项目305:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],!=
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目306:
Dec_expression->.id--,)
shift:339
Inc_expression->.id++,)
IncorDec->.Dec_expression,)
IncorDec->.Inc_expression,)
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,id
项目307:
H->.E,;
bool_expression->Gop.H,;
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目308:
function_call->id(function_call_list),!=
reduce:9
function_call->id(function_call_list),==
reduce:9
function_call->id(function_call_list),>
reduce:9
function_call->id(function_call_list),<
reduce:9
function_call->id(function_call_list),<=
reduce:9
function_call->id(function_call_list),>=
reduce:9
function_call->id(function_call_list),%
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
function_call->id(function_call_list),)
reduce:9
项目309:
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,,
F->.function_call,)
F->.array[E],%
shift:106
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],,
F->.array[E],)
F->.id,%
shift:95
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,,
F->.id,)
F->.string,%
shift:105
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,,
F->.string,)
F->.num,%
shift:104
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,,
F->.num,)
F->.(E),%
shift:96
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),,
F->.(E),)
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,,
T->.F,)
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,,
T->.T%F,)
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,,
T->.T/F,)
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,,
T->.T*F,)
E->.T,-
E->.T,+
E->.T,,
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,,
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,,
E->.E+T,)
list->.E,,
list->.E,)
function_call_list->.list,function_call_list,)
function_call_list->.list,)
function_call->id(.function_call_list),!=
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),%
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),!=
shift:345
function_call->id(.),==
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),%
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),,
function_call->.id(),)
项目310:
F->(E.),!=
shift:347
F->(E.),==
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),%
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
E->E.-T,-
shift:112
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:111
E->E.+T,+
E->E.+T,)
项目311:
F->.function_call,]
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],!=
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],%
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->.array[E],]
shift:134
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:126
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.string,]
shift:133
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.num,]
shift:132
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:127
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,]
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,]
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目312:
F->array[E],!=
reduce:33
F->array[E],==
reduce:33
F->array[E],>
reduce:33
F->array[E],<
reduce:33
F->array[E],<=
reduce:33
F->array[E],>=
reduce:33
F->array[E],%
reduce:33
F->array[E],/
reduce:33
F->array[E],*
reduce:33
F->array[E],-
reduce:33
F->array[E],+
reduce:33
F->array[E],)
reduce:33
项目313:
sentence->{block.},scanf
shift:349
sentence->{block.},printf
sentence->{block.},else
sentence->{block.},if
sentence->{block.},while
sentence->{block.},for
sentence->{block.},return
sentence->{block.},array
sentence->{block.},string
sentence->{block.},num
sentence->{block.},%
sentence->{block.},/
sentence->{block.},*
sentence->{block.},-
sentence->{block.},+
sentence->{block.},char
sentence->{block.},double
sentence->{block.},int
sentence->{block.},}
sentence->{block.},{
sentence->{block.},(
sentence->{block.},id
项目314:
sentence->{},scanf
reduce:20
sentence->{},printf
reduce:20
sentence->{},else
reduce:20
sentence->{},if
reduce:20
sentence->{},while
reduce:20
sentence->{},for
reduce:20
sentence->{},return
reduce:20
sentence->{},array
reduce:20
sentence->{},string
reduce:20
sentence->{},num
reduce:20
sentence->{},%
reduce:20
sentence->{},/
reduce:20
sentence->{},*
reduce:20
sentence->{},-
reduce:20
sentence->{},+
reduce:20
sentence->{},char
reduce:20
sentence->{},double
reduce:20
sentence->{},int
reduce:20
sentence->{},}
reduce:20
sentence->{},{
reduce:20
sentence->{},(
reduce:20
sentence->{},id
reduce:20
项目315:
define->typearray.[num];,scanf
shift:350
define->typearray.[num];,printf
define->typearray.[num];,else
define->typearray.[num];,if
define->typearray.[num];,while
define->typearray.[num];,for
define->typearray.[num];,return
define->typearray.[num];,array
define->typearray.[num];,string
define->typearray.[num];,num
define->typearray.[num];,%
define->typearray.[num];,/
define->typearray.[num];,*
define->typearray.[num];,-
define->typearray.[num];,+
define->typearray.[num];,char
define->typearray.[num];,double
define->typearray.[num];,int
define->typearray.[num];,}
define->typearray.[num];,{
define->typearray.[num];,(
define->typearray.[num];,id
define->typearray.[]={nums};,scanf
define->typearray.[]={nums};,printf
define->typearray.[]={nums};,else
define->typearray.[]={nums};,if
define->typearray.[]={nums};,while
define->typearray.[]={nums};,for
define->typearray.[]={nums};,return
define->typearray.[]={nums};,array
define->typearray.[]={nums};,string
define->typearray.[]={nums};,num
define->typearray.[]={nums};,%
define->typearray.[]={nums};,/
define->typearray.[]={nums};,*
define->typearray.[]={nums};,-
define->typearray.[]={nums};,+
define->typearray.[]={nums};,char
define->typearray.[]={nums};,double
define->typearray.[]={nums};,int
define->typearray.[]={nums};,}
define->typearray.[]={nums};,{
define->typearray.[]={nums};,(
define->typearray.[]={nums};,id
define->typearray.[num]={nums};,scanf
define->typearray.[num]={nums};,printf
define->typearray.[num]={nums};,else
define->typearray.[num]={nums};,if
define->typearray.[num]={nums};,while
define->typearray.[num]={nums};,for
define->typearray.[num]={nums};,return
define->typearray.[num]={nums};,array
define->typearray.[num]={nums};,string
define->typearray.[num]={nums};,num
define->typearray.[num]={nums};,%
define->typearray.[num]={nums};,/
define->typearray.[num]={nums};,*
define->typearray.[num]={nums};,-
define->typearray.[num]={nums};,+
define->typearray.[num]={nums};,char
define->typearray.[num]={nums};,double
define->typearray.[num]={nums};,int
define->typearray.[num]={nums};,}
define->typearray.[num]={nums};,{
define->typearray.[num]={nums};,(
define->typearray.[num]={nums};,id
define->typearray.[]={string};,scanf
define->typearray.[]={string};,printf
define->typearray.[]={string};,else
define->typearray.[]={string};,if
define->typearray.[]={string};,while
define->typearray.[]={string};,for
define->typearray.[]={string};,return
define->typearray.[]={string};,array
define->typearray.[]={string};,string
define->typearray.[]={string};,num
define->typearray.[]={string};,%
define->typearray.[]={string};,/
define->typearray.[]={string};,*
define->typearray.[]={string};,-
define->typearray.[]={string};,+
define->typearray.[]={string};,char
define->typearray.[]={string};,double
define->typearray.[]={string};,int
define->typearray.[]={string};,}
define->typearray.[]={string};,{
define->typearray.[]={string};,(
define->typearray.[]={string};,id
项目316:
define->typeid_name.;,scanf
shift:351
define->typeid_name.;,printf
define->typeid_name.;,else
define->typeid_name.;,if
define->typeid_name.;,while
define->typeid_name.;,for
define->typeid_name.;,return
define->typeid_name.;,array
define->typeid_name.;,string
define->typeid_name.;,num
define->typeid_name.;,%
define->typeid_name.;,/
define->typeid_name.;,*
define->typeid_name.;,-
define->typeid_name.;,+
define->typeid_name.;,char
define->typeid_name.;,double
define->typeid_name.;,int
define->typeid_name.;,}
define->typeid_name.;,{
define->typeid_name.;,(
define->typeid_name.;,id
define->typeid_name.=E;,scanf
shift:352
define->typeid_name.=E;,printf
define->typeid_name.=E;,else
define->typeid_name.=E;,if
define->typeid_name.=E;,while
define->typeid_name.=E;,for
define->typeid_name.=E;,return
define->typeid_name.=E;,array
define->typeid_name.=E;,string
define->typeid_name.=E;,num
define->typeid_name.=E;,%
define->typeid_name.=E;,/
define->typeid_name.=E;,*
define->typeid_name.=E;,-
define->typeid_name.=E;,+
define->typeid_name.=E;,char
define->typeid_name.=E;,double
define->typeid_name.=E;,int
define->typeid_name.=E;,}
define->typeid_name.=E;,{
define->typeid_name.=E;,(
define->typeid_name.=E;,id
项目317:
sentence->E;,scanf
reduce:21
sentence->E;,printf
reduce:21
sentence->E;,else
reduce:21
sentence->E;,if
reduce:21
sentence->E;,while
reduce:21
sentence->E;,for
reduce:21
sentence->E;,return
reduce:21
sentence->E;,array
reduce:21
sentence->E;,string
reduce:21
sentence->E;,num
reduce:21
sentence->E;,%
reduce:21
sentence->E;,/
reduce:21
sentence->E;,*
reduce:21
sentence->E;,-
reduce:21
sentence->E;,+
reduce:21
sentence->E;,char
reduce:21
sentence->E;,double
reduce:21
sentence->E;,int
reduce:21
sentence->E;,}
reduce:21
sentence->E;,{
reduce:21
sentence->E;,(
reduce:21
sentence->E;,id
reduce:21
项目318:
sentence->returnE.;,scanf
shift:353
sentence->returnE.;,printf
sentence->returnE.;,else
sentence->returnE.;,if
sentence->returnE.;,while
sentence->returnE.;,for
sentence->returnE.;,return
sentence->returnE.;,array
sentence->returnE.;,string
sentence->returnE.;,num
sentence->returnE.;,%
sentence->returnE.;,/
sentence->returnE.;,*
sentence->returnE.;,-
sentence->returnE.;,+
sentence->returnE.;,char
sentence->returnE.;,double
sentence->returnE.;,int
sentence->returnE.;,}
sentence->returnE.;,{
sentence->returnE.;,(
sentence->returnE.;,id
E->E.-T,-
shift:77
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:76
E->E.+T,+
E->E.+T,;
项目319:
sentence->set_value;,scanf
reduce:46
sentence->set_value;,printf
reduce:46
sentence->set_value;,else
reduce:46
sentence->set_value;,if
reduce:46
sentence->set_value;,while
reduce:46
sentence->set_value;,for
reduce:46
sentence->set_value;,return
reduce:46
sentence->set_value;,array
reduce:46
sentence->set_value;,string
reduce:46
sentence->set_value;,num
reduce:46
sentence->set_value;,%
reduce:46
sentence->set_value;,/
reduce:46
sentence->set_value;,*
reduce:46
sentence->set_value;,-
reduce:46
sentence->set_value;,+
reduce:46
sentence->set_value;,char
reduce:46
sentence->set_value;,double
reduce:46
sentence->set_value;,int
reduce:46
sentence->set_value;,}
reduce:46
sentence->set_value;,{
reduce:46
sentence->set_value;,(
reduce:46
sentence->set_value;,id
reduce:46
项目320:
for_set_value->.set_value,;
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,id
set_value->.array[E]=E,;
shift:138
set_value->.id=E,;
shift:137
项目321:
sentence->IncorDec;,scanf
reduce:67
sentence->IncorDec;,printf
reduce:67
sentence->IncorDec;,else
reduce:67
sentence->IncorDec;,if
reduce:67
sentence->IncorDec;,while
reduce:67
sentence->IncorDec;,for
reduce:67
sentence->IncorDec;,return
reduce:67
sentence->IncorDec;,array
reduce:67
sentence->IncorDec;,string
reduce:67
sentence->IncorDec;,num
reduce:67
sentence->IncorDec;,%
reduce:67
sentence->IncorDec;,/
reduce:67
sentence->IncorDec;,*
reduce:67
sentence->IncorDec;,-
reduce:67
sentence->IncorDec;,+
reduce:67
sentence->IncorDec;,char
reduce:67
sentence->IncorDec;,double
reduce:67
sentence->IncorDec;,int
reduce:67
sentence->IncorDec;,}
reduce:67
sentence->IncorDec;,{
reduce:67
sentence->IncorDec;,(
reduce:67
sentence->IncorDec;,id
reduce:67
项目322:
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
while_expression->while1(.bool_expression)whilesentence,scanf
while_expression->while1(.bool_expression)whilesentence,printf
while_expression->while1(.bool_expression)whilesentence,else
while_expression->while1(.bool_expression)whilesentence,if
while_expression->while1(.bool_expression)whilesentence,while
while_expression->while1(.bool_expression)whilesentence,for
while_expression->while1(.bool_expression)whilesentence,return
while_expression->while1(.bool_expression)whilesentence,array
while_expression->while1(.bool_expression)whilesentence,string
while_expression->while1(.bool_expression)whilesentence,num
while_expression->while1(.bool_expression)whilesentence,%
while_expression->while1(.bool_expression)whilesentence,/
while_expression->while1(.bool_expression)whilesentence,*
while_expression->while1(.bool_expression)whilesentence,-
while_expression->while1(.bool_expression)whilesentence,+
while_expression->while1(.bool_expression)whilesentence,char
while_expression->while1(.bool_expression)whilesentence,double
while_expression->while1(.bool_expression)whilesentence,int
while_expression->while1(.bool_expression)whilesentence,}
while_expression->while1(.bool_expression)whilesentence,{
while_expression->while1(.bool_expression)whilesentence,(
while_expression->while1(.bool_expression)whilesentence,id
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],!=
shift:149
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,!=
shift:141
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,!=
shift:148
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,!=
shift:147
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),!=
shift:142
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目323:
if_expression->if(.bool_expression)ifsentenceelsesentence,scanf
if_expression->if(.bool_expression)ifsentenceelsesentence,printf
if_expression->if(.bool_expression)ifsentenceelsesentence,else
if_expression->if(.bool_expression)ifsentenceelsesentence,if
if_expression->if(.bool_expression)ifsentenceelsesentence,while
if_expression->if(.bool_expression)ifsentenceelsesentence,for
if_expression->if(.bool_expression)ifsentenceelsesentence,return
if_expression->if(.bool_expression)ifsentenceelsesentence,array
if_expression->if(.bool_expression)ifsentenceelsesentence,string
if_expression->if(.bool_expression)ifsentenceelsesentence,num
if_expression->if(.bool_expression)ifsentenceelsesentence,%
if_expression->if(.bool_expression)ifsentenceelsesentence,/
if_expression->if(.bool_expression)ifsentenceelsesentence,*
if_expression->if(.bool_expression)ifsentenceelsesentence,-
if_expression->if(.bool_expression)ifsentenceelsesentence,+
if_expression->if(.bool_expression)ifsentenceelsesentence,char
if_expression->if(.bool_expression)ifsentenceelsesentence,double
if_expression->if(.bool_expression)ifsentenceelsesentence,int
if_expression->if(.bool_expression)ifsentenceelsesentence,}
if_expression->if(.bool_expression)ifsentenceelsesentence,{
if_expression->if(.bool_expression)ifsentenceelsesentence,(
if_expression->if(.bool_expression)ifsentenceelsesentence,id
if_expression->if(.bool_expression)sentence,scanf
if_expression->if(.bool_expression)sentence,printf
if_expression->if(.bool_expression)sentence,else
if_expression->if(.bool_expression)sentence,if
if_expression->if(.bool_expression)sentence,while
if_expression->if(.bool_expression)sentence,for
if_expression->if(.bool_expression)sentence,return
if_expression->if(.bool_expression)sentence,array
if_expression->if(.bool_expression)sentence,string
if_expression->if(.bool_expression)sentence,num
if_expression->if(.bool_expression)sentence,%
if_expression->if(.bool_expression)sentence,/
if_expression->if(.bool_expression)sentence,*
if_expression->if(.bool_expression)sentence,-
if_expression->if(.bool_expression)sentence,+
if_expression->if(.bool_expression)sentence,char
if_expression->if(.bool_expression)sentence,double
if_expression->if(.bool_expression)sentence,int
if_expression->if(.bool_expression)sentence,}
if_expression->if(.bool_expression)sentence,{
if_expression->if(.bool_expression)sentence,(
if_expression->if(.bool_expression)sentence,id
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],!=
shift:149
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,!=
shift:141
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.string,!=
shift:148
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,)
F->.num,!=
shift:147
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),!=
shift:142
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目324:
scanf_expression->.scanf(string);,scanf
shift:53
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:52
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->if(bool_expression)ifsentenceelse.sentence,scanf
if_expression->if(bool_expression)ifsentenceelse.sentence,printf
if_expression->if(bool_expression)ifsentenceelse.sentence,if
if_expression->if(bool_expression)ifsentenceelse.sentence,while
if_expression->if(bool_expression)ifsentenceelse.sentence,for
if_expression->if(bool_expression)ifsentenceelse.sentence,return
if_expression->if(bool_expression)ifsentenceelse.sentence,array
if_expression->if(bool_expression)ifsentenceelse.sentence,string
if_expression->if(bool_expression)ifsentenceelse.sentence,num
if_expression->if(bool_expression)ifsentenceelse.sentence,%
if_expression->if(bool_expression)ifsentenceelse.sentence,/
if_expression->if(bool_expression)ifsentenceelse.sentence,*
if_expression->if(bool_expression)ifsentenceelse.sentence,-
if_expression->if(bool_expression)ifsentenceelse.sentence,+
if_expression->if(bool_expression)ifsentenceelse.sentence,char
if_expression->if(bool_expression)ifsentenceelse.sentence,double
if_expression->if(bool_expression)ifsentenceelse.sentence,int
if_expression->if(bool_expression)ifsentenceelse.sentence,}
if_expression->if(bool_expression)ifsentenceelse.sentence,{
if_expression->if(bool_expression)ifsentenceelse.sentence,(
if_expression->if(bool_expression)ifsentenceelse.sentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:48
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:41
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:36
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目325:
printf_expression->printf(.string,expressions);,scanf
shift:358
printf_expression->printf(.string,expressions);,printf
printf_expression->printf(.string,expressions);,else
printf_expression->printf(.string,expressions);,if
printf_expression->printf(.string,expressions);,while
printf_expression->printf(.string,expressions);,for
printf_expression->printf(.string,expressions);,return
printf_expression->printf(.string,expressions);,array
printf_expression->printf(.string,expressions);,string
printf_expression->printf(.string,expressions);,num
printf_expression->printf(.string,expressions);,%
printf_expression->printf(.string,expressions);,/
printf_expression->printf(.string,expressions);,*
printf_expression->printf(.string,expressions);,-
printf_expression->printf(.string,expressions);,+
printf_expression->printf(.string,expressions);,char
printf_expression->printf(.string,expressions);,double
printf_expression->printf(.string,expressions);,int
printf_expression->printf(.string,expressions);,}
printf_expression->printf(.string,expressions);,{
printf_expression->printf(.string,expressions);,(
printf_expression->printf(.string,expressions);,id
printf_expression->printf(.string);,scanf
printf_expression->printf(.string);,printf
printf_expression->printf(.string);,else
printf_expression->printf(.string);,if
printf_expression->printf(.string);,while
printf_expression->printf(.string);,for
printf_expression->printf(.string);,return
printf_expression->printf(.string);,array
printf_expression->printf(.string);,string
printf_expression->printf(.string);,num
printf_expression->printf(.string);,%
printf_expression->printf(.string);,/
printf_expression->printf(.string);,*
printf_expression->printf(.string);,-
printf_expression->printf(.string);,+
printf_expression->printf(.string);,char
printf_expression->printf(.string);,double
printf_expression->printf(.string);,int
printf_expression->printf(.string);,}
printf_expression->printf(.string);,{
printf_expression->printf(.string);,(
printf_expression->printf(.string);,id
项目326:
scanf_expression->scanf(.string);,scanf
shift:359
scanf_expression->scanf(.string);,printf
scanf_expression->scanf(.string);,else
scanf_expression->scanf(.string);,if
scanf_expression->scanf(.string);,while
scanf_expression->scanf(.string);,for
scanf_expression->scanf(.string);,return
scanf_expression->scanf(.string);,array
scanf_expression->scanf(.string);,string
scanf_expression->scanf(.string);,num
scanf_expression->scanf(.string);,%
scanf_expression->scanf(.string);,/
scanf_expression->scanf(.string);,*
scanf_expression->scanf(.string);,-
scanf_expression->scanf(.string);,+
scanf_expression->scanf(.string);,char
scanf_expression->scanf(.string);,double
scanf_expression->scanf(.string);,int
scanf_expression->scanf(.string);,}
scanf_expression->scanf(.string);,{
scanf_expression->scanf(.string);,(
scanf_expression->scanf(.string);,id
scanf_expression->scanf(.string,expressions);,scanf
scanf_expression->scanf(.string,expressions);,printf
scanf_expression->scanf(.string,expressions);,else
scanf_expression->scanf(.string,expressions);,if
scanf_expression->scanf(.string,expressions);,while
scanf_expression->scanf(.string,expressions);,for
scanf_expression->scanf(.string,expressions);,return
scanf_expression->scanf(.string,expressions);,array
scanf_expression->scanf(.string,expressions);,string
scanf_expression->scanf(.string,expressions);,num
scanf_expression->scanf(.string,expressions);,%
scanf_expression->scanf(.string,expressions);,/
scanf_expression->scanf(.string,expressions);,*
scanf_expression->scanf(.string,expressions);,-
scanf_expression->scanf(.string,expressions);,+
scanf_expression->scanf(.string,expressions);,char
scanf_expression->scanf(.string,expressions);,double
scanf_expression->scanf(.string,expressions);,int
scanf_expression->scanf(.string,expressions);,}
scanf_expression->scanf(.string,expressions);,{
scanf_expression->scanf(.string,expressions);,(
scanf_expression->scanf(.string,expressions);,id
项目327:
printf_expression->printf(string,expressions).;,scanf
shift:360
printf_expression->printf(string,expressions).;,printf
printf_expression->printf(string,expressions).;,if
printf_expression->printf(string,expressions).;,while
printf_expression->printf(string,expressions).;,for
printf_expression->printf(string,expressions).;,return
printf_expression->printf(string,expressions).;,array
printf_expression->printf(string,expressions).;,string
printf_expression->printf(string,expressions).;,num
printf_expression->printf(string,expressions).;,%
printf_expression->printf(string,expressions).;,/
printf_expression->printf(string,expressions).;,*
printf_expression->printf(string,expressions).;,-
printf_expression->printf(string,expressions).;,+
printf_expression->printf(string,expressions).;,char
printf_expression->printf(string,expressions).;,double
printf_expression->printf(string,expressions).;,int
printf_expression->printf(string,expressions).;,}
printf_expression->printf(string,expressions).;,{
printf_expression->printf(string,expressions).;,(
printf_expression->printf(string,expressions).;,id
项目328:
getaddr->.&id,,
shift:291
getaddr->.&id,)
getaddr->.id,,
shift:288
getaddr->.id,)
expressions->.getaddr,)
expressions->getaddr,.expressions,)
expressions->.getaddr,expressions,)
项目329:
getaddr->&id,,
reduce:86
getaddr->&id,)
reduce:86
项目330:
scanf_expression->scanf(string,expressions).;,scanf
shift:362
scanf_expression->scanf(string,expressions).;,printf
scanf_expression->scanf(string,expressions).;,if
scanf_expression->scanf(string,expressions).;,while
scanf_expression->scanf(string,expressions).;,for
scanf_expression->scanf(string,expressions).;,return
scanf_expression->scanf(string,expressions).;,array
scanf_expression->scanf(string,expressions).;,string
scanf_expression->scanf(string,expressions).;,num
scanf_expression->scanf(string,expressions).;,%
scanf_expression->scanf(string,expressions).;,/
scanf_expression->scanf(string,expressions).;,*
scanf_expression->scanf(string,expressions).;,-
scanf_expression->scanf(string,expressions).;,+
scanf_expression->scanf(string,expressions).;,char
scanf_expression->scanf(string,expressions).;,double
scanf_expression->scanf(string,expressions).;,int
scanf_expression->scanf(string,expressions).;,}
scanf_expression->scanf(string,expressions).;,{
scanf_expression->scanf(string,expressions).;,(
scanf_expression->scanf(string,expressions).;,id
项目331:
nums->.num,}
shift:332
nums->.num,nums,}
define->typearray[num]={.nums};,scanf
define->typearray[num]={.nums};,printf
define->typearray[num]={.nums};,if
define->typearray[num]={.nums};,while
define->typearray[num]={.nums};,for
define->typearray[num]={.nums};,return
define->typearray[num]={.nums};,array
define->typearray[num]={.nums};,string
define->typearray[num]={.nums};,num
define->typearray[num]={.nums};,%
define->typearray[num]={.nums};,/
define->typearray[num]={.nums};,*
define->typearray[num]={.nums};,-
define->typearray[num]={.nums};,+
define->typearray[num]={.nums};,char
define->typearray[num]={.nums};,double
define->typearray[num]={.nums};,int
define->typearray[num]={.nums};,}
define->typearray[num]={.nums};,{
define->typearray[num]={.nums};,(
define->typearray[num]={.nums};,id
项目332:
nums->num,}
reduce:45
nums->num.,nums,}
shift:364
项目333:
define->typearray[]={string.};,scanf
shift:365
define->typearray[]={string.};,printf
define->typearray[]={string.};,if
define->typearray[]={string.};,while
define->typearray[]={string.};,for
define->typearray[]={string.};,return
define->typearray[]={string.};,array
define->typearray[]={string.};,string
define->typearray[]={string.};,num
define->typearray[]={string.};,%
define->typearray[]={string.};,/
define->typearray[]={string.};,*
define->typearray[]={string.};,-
define->typearray[]={string.};,+
define->typearray[]={string.};,char
define->typearray[]={string.};,double
define->typearray[]={string.};,int
define->typearray[]={string.};,}
define->typearray[]={string.};,{
define->typearray[]={string.};,(
define->typearray[]={string.};,id
项目334:
define->typearray[]={nums.};,scanf
shift:366
define->typearray[]={nums.};,printf
define->typearray[]={nums.};,if
define->typearray[]={nums.};,while
define->typearray[]={nums.};,for
define->typearray[]={nums.};,return
define->typearray[]={nums.};,array
define->typearray[]={nums.};,string
define->typearray[]={nums.};,num
define->typearray[]={nums.};,%
define->typearray[]={nums.};,/
define->typearray[]={nums.};,*
define->typearray[]={nums.};,-
define->typearray[]={nums.};,+
define->typearray[]={nums.};,char
define->typearray[]={nums.};,double
define->typearray[]={nums.};,int
define->typearray[]={nums.};,}
define->typearray[]={nums.};,{
define->typearray[]={nums.};,(
define->typearray[]={nums.};,id
项目335:
function_call->id(),!=
reduce:8
function_call->id(),==
reduce:8
function_call->id(),>
reduce:8
function_call->id(),<
reduce:8
function_call->id(),<=
reduce:8
function_call->id(),>=
reduce:8
function_call->id(),%
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
function_call->id(),;
reduce:8
项目336:
function_call->id(function_call_list.),!=
shift:367
function_call->id(function_call_list.),==
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),;
项目337:
F->(E),!=
reduce:29
F->(E),==
reduce:29
F->(E),>
reduce:29
F->(E),<
reduce:29
F->(E),<=
reduce:29
F->(E),>=
reduce:29
F->(E),%
reduce:29
F->(E),/
reduce:29
F->(E),*
reduce:29
F->(E),-
reduce:29
F->(E),+
reduce:29
F->(E),;
reduce:29
项目338:
F->array[E.],!=
shift:368
F->array[E.],==
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
shift:181
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:180
E->E.+T,-
E->E.+T,+
项目339:
Dec_expression->id.--,)
shift:370
Inc_expression->id.++,)
shift:369
项目340:
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,scanf
shift:371
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,id
项目341:
IncorDec->Inc_expression,)
reduce:68
项目342:
IncorDec->Dec_expression,)
reduce:69
项目343:
H->E,;
reduce:63
E->E.-T,-
shift:77
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:76
E->E.+T,+
E->E.+T,;
项目344:
bool_expression->GopH,;
reduce:55
项目345:
function_call->id(),!=
reduce:8
function_call->id(),==
reduce:8
function_call->id(),>
reduce:8
function_call->id(),<
reduce:8
function_call->id(),<=
reduce:8
function_call->id(),>=
reduce:8
function_call->id(),%
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
项目346:
function_call->id(function_call_list.),!=
shift:372
function_call->id(function_call_list.),==
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),%
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
项目347:
F->(E),!=
reduce:29
F->(E),==
reduce:29
F->(E),>
reduce:29
F->(E),<
reduce:29
F->(E),<=
reduce:29
F->(E),>=
reduce:29
F->(E),%
reduce:29
F->(E),/
reduce:29
F->(E),*
reduce:29
F->(E),-
reduce:29
F->(E),+
reduce:29
项目348:
F->array[E.],!=
shift:373
F->array[E.],==
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],%
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
E->E.-T,]
shift:181
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:180
E->E.+T,-
E->E.+T,+
项目349:
sentence->{block},scanf
reduce:19
sentence->{block},printf
reduce:19
sentence->{block},else
reduce:19
sentence->{block},if
reduce:19
sentence->{block},while
reduce:19
sentence->{block},for
reduce:19
sentence->{block},return
reduce:19
sentence->{block},array
reduce:19
sentence->{block},string
reduce:19
sentence->{block},num
reduce:19
sentence->{block},%
reduce:19
sentence->{block},/
reduce:19
sentence->{block},*
reduce:19
sentence->{block},-
reduce:19
sentence->{block},+
reduce:19
sentence->{block},char
reduce:19
sentence->{block},double
reduce:19
sentence->{block},int
reduce:19
sentence->{block},}
reduce:19
sentence->{block},{
reduce:19
sentence->{block},(
reduce:19
sentence->{block},id
reduce:19
项目350:
define->typearray[.num];,scanf
shift:374
define->typearray[.num];,printf
define->typearray[.num];,else
define->typearray[.num];,if
define->typearray[.num];,while
define->typearray[.num];,for
define->typearray[.num];,return
define->typearray[.num];,array
define->typearray[.num];,string
define->typearray[.num];,num
define->typearray[.num];,%
define->typearray[.num];,/
define->typearray[.num];,*
define->typearray[.num];,-
define->typearray[.num];,+
define->typearray[.num];,char
define->typearray[.num];,double
define->typearray[.num];,int
define->typearray[.num];,}
define->typearray[.num];,{
define->typearray[.num];,(
define->typearray[.num];,id
define->typearray[.]={nums};,scanf
shift:375
define->typearray[.]={nums};,printf
define->typearray[.]={nums};,else
define->typearray[.]={nums};,if
define->typearray[.]={nums};,while
define->typearray[.]={nums};,for
define->typearray[.]={nums};,return
define->typearray[.]={nums};,array
define->typearray[.]={nums};,string
define->typearray[.]={nums};,num
define->typearray[.]={nums};,%
define->typearray[.]={nums};,/
define->typearray[.]={nums};,*
define->typearray[.]={nums};,-
define->typearray[.]={nums};,+
define->typearray[.]={nums};,char
define->typearray[.]={nums};,double
define->typearray[.]={nums};,int
define->typearray[.]={nums};,}
define->typearray[.]={nums};,{
define->typearray[.]={nums};,(
define->typearray[.]={nums};,id
define->typearray[.num]={nums};,scanf
define->typearray[.num]={nums};,printf
define->typearray[.num]={nums};,else
define->typearray[.num]={nums};,if
define->typearray[.num]={nums};,while
define->typearray[.num]={nums};,for
define->typearray[.num]={nums};,return
define->typearray[.num]={nums};,array
define->typearray[.num]={nums};,string
define->typearray[.num]={nums};,num
define->typearray[.num]={nums};,%
define->typearray[.num]={nums};,/
define->typearray[.num]={nums};,*
define->typearray[.num]={nums};,-
define->typearray[.num]={nums};,+
define->typearray[.num]={nums};,char
define->typearray[.num]={nums};,double
define->typearray[.num]={nums};,int
define->typearray[.num]={nums};,}
define->typearray[.num]={nums};,{
define->typearray[.num]={nums};,(
define->typearray[.num]={nums};,id
define->typearray[.]={string};,scanf
define->typearray[.]={string};,printf
define->typearray[.]={string};,else
define->typearray[.]={string};,if
define->typearray[.]={string};,while
define->typearray[.]={string};,for
define->typearray[.]={string};,return
define->typearray[.]={string};,array
define->typearray[.]={string};,string
define->typearray[.]={string};,num
define->typearray[.]={string};,%
define->typearray[.]={string};,/
define->typearray[.]={string};,*
define->typearray[.]={string};,-
define->typearray[.]={string};,+
define->typearray[.]={string};,char
define->typearray[.]={string};,double
define->typearray[.]={string};,int
define->typearray[.]={string};,}
define->typearray[.]={string};,{
define->typearray[.]={string};,(
define->typearray[.]={string};,id
项目351:
define->typeid_name;,scanf
reduce:38
define->typeid_name;,printf
reduce:38
define->typeid_name;,else
reduce:38
define->typeid_name;,if
reduce:38
define->typeid_name;,while
reduce:38
define->typeid_name;,for
reduce:38
define->typeid_name;,return
reduce:38
define->typeid_name;,array
reduce:38
define->typeid_name;,string
reduce:38
define->typeid_name;,num
reduce:38
define->typeid_name;,%
reduce:38
define->typeid_name;,/
reduce:38
define->typeid_name;,*
reduce:38
define->typeid_name;,-
reduce:38
define->typeid_name;,+
reduce:38
define->typeid_name;,char
reduce:38
define->typeid_name;,double
reduce:38
define->typeid_name;,int
reduce:38
define->typeid_name;,}
reduce:38
define->typeid_name;,{
reduce:38
define->typeid_name;,(
reduce:38
define->typeid_name;,id
reduce:38
项目352:
define->typeid_name=.E;,scanf
define->typeid_name=.E;,printf
define->typeid_name=.E;,else
define->typeid_name=.E;,if
define->typeid_name=.E;,while
define->typeid_name=.E;,for
define->typeid_name=.E;,return
define->typeid_name=.E;,array
define->typeid_name=.E;,string
define->typeid_name=.E;,num
define->typeid_name=.E;,%
define->typeid_name=.E;,/
define->typeid_name=.E;,*
define->typeid_name=.E;,-
define->typeid_name=.E;,+
define->typeid_name=.E;,char
define->typeid_name=.E;,double
define->typeid_name=.E;,int
define->typeid_name=.E;,}
define->typeid_name=.E;,{
define->typeid_name=.E;,(
define->typeid_name=.E;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
shift:85
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
shift:83
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目353:
sentence->returnE;,scanf
reduce:35
sentence->returnE;,printf
reduce:35
sentence->returnE;,else
reduce:35
sentence->returnE;,if
reduce:35
sentence->returnE;,while
reduce:35
sentence->returnE;,for
reduce:35
sentence->returnE;,return
reduce:35
sentence->returnE;,array
reduce:35
sentence->returnE;,string
reduce:35
sentence->returnE;,num
reduce:35
sentence->returnE;,%
reduce:35
sentence->returnE;,/
reduce:35
sentence->returnE;,*
reduce:35
sentence->returnE;,-
reduce:35
sentence->returnE;,+
reduce:35
sentence->returnE;,char
reduce:35
sentence->returnE;,double
reduce:35
sentence->returnE;,int
reduce:35
sentence->returnE;,}
reduce:35
sentence->returnE;,{
reduce:35
sentence->returnE;,(
reduce:35
sentence->returnE;,id
reduce:35
项目354:
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,scanf
shift:377
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,id
项目355:
while_expression->while1(bool_expression.)whilesentence,scanf
shift:378
while_expression->while1(bool_expression.)whilesentence,printf
while_expression->while1(bool_expression.)whilesentence,else
while_expression->while1(bool_expression.)whilesentence,if
while_expression->while1(bool_expression.)whilesentence,while
while_expression->while1(bool_expression.)whilesentence,for
while_expression->while1(bool_expression.)whilesentence,return
while_expression->while1(bool_expression.)whilesentence,array
while_expression->while1(bool_expression.)whilesentence,string
while_expression->while1(bool_expression.)whilesentence,num
while_expression->while1(bool_expression.)whilesentence,%
while_expression->while1(bool_expression.)whilesentence,/
while_expression->while1(bool_expression.)whilesentence,*
while_expression->while1(bool_expression.)whilesentence,-
while_expression->while1(bool_expression.)whilesentence,+
while_expression->while1(bool_expression.)whilesentence,char
while_expression->while1(bool_expression.)whilesentence,double
while_expression->while1(bool_expression.)whilesentence,int
while_expression->while1(bool_expression.)whilesentence,}
while_expression->while1(bool_expression.)whilesentence,{
while_expression->while1(bool_expression.)whilesentence,(
while_expression->while1(bool_expression.)whilesentence,id
项目356:
if_expression->if(bool_expression.)ifsentenceelsesentence,scanf
shift:379
if_expression->if(bool_expression.)ifsentenceelsesentence,printf
if_expression->if(bool_expression.)ifsentenceelsesentence,else
if_expression->if(bool_expression.)ifsentenceelsesentence,if
if_expression->if(bool_expression.)ifsentenceelsesentence,while
if_expression->if(bool_expression.)ifsentenceelsesentence,for
if_expression->if(bool_expression.)ifsentenceelsesentence,return
if_expression->if(bool_expression.)ifsentenceelsesentence,array
if_expression->if(bool_expression.)ifsentenceelsesentence,string
if_expression->if(bool_expression.)ifsentenceelsesentence,num
if_expression->if(bool_expression.)ifsentenceelsesentence,%
if_expression->if(bool_expression.)ifsentenceelsesentence,/
if_expression->if(bool_expression.)ifsentenceelsesentence,*
if_expression->if(bool_expression.)ifsentenceelsesentence,-
if_expression->if(bool_expression.)ifsentenceelsesentence,+
if_expression->if(bool_expression.)ifsentenceelsesentence,char
if_expression->if(bool_expression.)ifsentenceelsesentence,double
if_expression->if(bool_expression.)ifsentenceelsesentence,int
if_expression->if(bool_expression.)ifsentenceelsesentence,}
if_expression->if(bool_expression.)ifsentenceelsesentence,{
if_expression->if(bool_expression.)ifsentenceelsesentence,(
if_expression->if(bool_expression.)ifsentenceelsesentence,id
if_expression->if(bool_expression.)sentence,scanf
if_expression->if(bool_expression.)sentence,printf
if_expression->if(bool_expression.)sentence,else
if_expression->if(bool_expression.)sentence,if
if_expression->if(bool_expression.)sentence,while
if_expression->if(bool_expression.)sentence,for
if_expression->if(bool_expression.)sentence,return
if_expression->if(bool_expression.)sentence,array
if_expression->if(bool_expression.)sentence,string
if_expression->if(bool_expression.)sentence,num
if_expression->if(bool_expression.)sentence,%
if_expression->if(bool_expression.)sentence,/
if_expression->if(bool_expression.)sentence,*
if_expression->if(bool_expression.)sentence,-
if_expression->if(bool_expression.)sentence,+
if_expression->if(bool_expression.)sentence,char
if_expression->if(bool_expression.)sentence,double
if_expression->if(bool_expression.)sentence,int
if_expression->if(bool_expression.)sentence,}
if_expression->if(bool_expression.)sentence,{
if_expression->if(bool_expression.)sentence,(
if_expression->if(bool_expression.)sentence,id
项目357:
if_expression->if(bool_expression)ifsentenceelsesentence,scanf
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,printf
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,if
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,while
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,for
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,return
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,array
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,string
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,num
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,%
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,/
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,*
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,-
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,+
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,char
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,double
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,int
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,}
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,{
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,(
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,id
reduce:74
项目358:
printf_expression->printf(string.,expressions);,scanf
shift:381
printf_expression->printf(string.,expressions);,printf
printf_expression->printf(string.,expressions);,else
printf_expression->printf(string.,expressions);,if
printf_expression->printf(string.,expressions);,while
printf_expression->printf(string.,expressions);,for
printf_expression->printf(string.,expressions);,return
printf_expression->printf(string.,expressions);,array
printf_expression->printf(string.,expressions);,string
printf_expression->printf(string.,expressions);,num
printf_expression->printf(string.,expressions);,%
printf_expression->printf(string.,expressions);,/
printf_expression->printf(string.,expressions);,*
printf_expression->printf(string.,expressions);,-
printf_expression->printf(string.,expressions);,+
printf_expression->printf(string.,expressions);,char
printf_expression->printf(string.,expressions);,double
printf_expression->printf(string.,expressions);,int
printf_expression->printf(string.,expressions);,}
printf_expression->printf(string.,expressions);,{
printf_expression->printf(string.,expressions);,(
printf_expression->printf(string.,expressions);,id
printf_expression->printf(string.);,scanf
shift:380
printf_expression->printf(string.);,printf
printf_expression->printf(string.);,else
printf_expression->printf(string.);,if
printf_expression->printf(string.);,while
printf_expression->printf(string.);,for
printf_expression->printf(string.);,return
printf_expression->printf(string.);,array
printf_expression->printf(string.);,string
printf_expression->printf(string.);,num
printf_expression->printf(string.);,%
printf_expression->printf(string.);,/
printf_expression->printf(string.);,*
printf_expression->printf(string.);,-
printf_expression->printf(string.);,+
printf_expression->printf(string.);,char
printf_expression->printf(string.);,double
printf_expression->printf(string.);,int
printf_expression->printf(string.);,}
printf_expression->printf(string.);,{
printf_expression->printf(string.);,(
printf_expression->printf(string.);,id
项目359:
scanf_expression->scanf(string.);,scanf
shift:382
scanf_expression->scanf(string.);,printf
scanf_expression->scanf(string.);,else
scanf_expression->scanf(string.);,if
scanf_expression->scanf(string.);,while
scanf_expression->scanf(string.);,for
scanf_expression->scanf(string.);,return
scanf_expression->scanf(string.);,array
scanf_expression->scanf(string.);,string
scanf_expression->scanf(string.);,num
scanf_expression->scanf(string.);,%
scanf_expression->scanf(string.);,/
scanf_expression->scanf(string.);,*
scanf_expression->scanf(string.);,-
scanf_expression->scanf(string.);,+
scanf_expression->scanf(string.);,char
scanf_expression->scanf(string.);,double
scanf_expression->scanf(string.);,int
scanf_expression->scanf(string.);,}
scanf_expression->scanf(string.);,{
scanf_expression->scanf(string.);,(
scanf_expression->scanf(string.);,id
scanf_expression->scanf(string.,expressions);,scanf
shift:383
scanf_expression->scanf(string.,expressions);,printf
scanf_expression->scanf(string.,expressions);,else
scanf_expression->scanf(string.,expressions);,if
scanf_expression->scanf(string.,expressions);,while
scanf_expression->scanf(string.,expressions);,for
scanf_expression->scanf(string.,expressions);,return
scanf_expression->scanf(string.,expressions);,array
scanf_expression->scanf(string.,expressions);,string
scanf_expression->scanf(string.,expressions);,num
scanf_expression->scanf(string.,expressions);,%
scanf_expression->scanf(string.,expressions);,/
scanf_expression->scanf(string.,expressions);,*
scanf_expression->scanf(string.,expressions);,-
scanf_expression->scanf(string.,expressions);,+
scanf_expression->scanf(string.,expressions);,char
scanf_expression->scanf(string.,expressions);,double
scanf_expression->scanf(string.,expressions);,int
scanf_expression->scanf(string.,expressions);,}
scanf_expression->scanf(string.,expressions);,{
scanf_expression->scanf(string.,expressions);,(
scanf_expression->scanf(string.,expressions);,id
项目360:
printf_expression->printf(string,expressions);,scanf
reduce:80
printf_expression->printf(string,expressions);,printf
reduce:80
printf_expression->printf(string,expressions);,if
reduce:80
printf_expression->printf(string,expressions);,while
reduce:80
printf_expression->printf(string,expressions);,for
reduce:80
printf_expression->printf(string,expressions);,return
reduce:80
printf_expression->printf(string,expressions);,array
reduce:80
printf_expression->printf(string,expressions);,string
reduce:80
printf_expression->printf(string,expressions);,num
reduce:80
printf_expression->printf(string,expressions);,%
reduce:80
printf_expression->printf(string,expressions);,/
reduce:80
printf_expression->printf(string,expressions);,*
reduce:80
printf_expression->printf(string,expressions);,-
reduce:80
printf_expression->printf(string,expressions);,+
reduce:80
printf_expression->printf(string,expressions);,char
reduce:80
printf_expression->printf(string,expressions);,double
reduce:80
printf_expression->printf(string,expressions);,int
reduce:80
printf_expression->printf(string,expressions);,}
reduce:80
printf_expression->printf(string,expressions);,{
reduce:80
printf_expression->printf(string,expressions);,(
reduce:80
printf_expression->printf(string,expressions);,id
reduce:80
项目361:
expressions->getaddr,expressions,)
reduce:81
项目362:
scanf_expression->scanf(string,expressions);,scanf
reduce:83
scanf_expression->scanf(string,expressions);,printf
reduce:83
scanf_expression->scanf(string,expressions);,if
reduce:83
scanf_expression->scanf(string,expressions);,while
reduce:83
scanf_expression->scanf(string,expressions);,for
reduce:83
scanf_expression->scanf(string,expressions);,return
reduce:83
scanf_expression->scanf(string,expressions);,array
reduce:83
scanf_expression->scanf(string,expressions);,string
reduce:83
scanf_expression->scanf(string,expressions);,num
reduce:83
scanf_expression->scanf(string,expressions);,%
reduce:83
scanf_expression->scanf(string,expressions);,/
reduce:83
scanf_expression->scanf(string,expressions);,*
reduce:83
scanf_expression->scanf(string,expressions);,-
reduce:83
scanf_expression->scanf(string,expressions);,+
reduce:83
scanf_expression->scanf(string,expressions);,char
reduce:83
scanf_expression->scanf(string,expressions);,double
reduce:83
scanf_expression->scanf(string,expressions);,int
reduce:83
scanf_expression->scanf(string,expressions);,}
reduce:83
scanf_expression->scanf(string,expressions);,{
reduce:83
scanf_expression->scanf(string,expressions);,(
reduce:83
scanf_expression->scanf(string,expressions);,id
reduce:83
项目363:
define->typearray[num]={nums.};,scanf
shift:384
define->typearray[num]={nums.};,printf
define->typearray[num]={nums.};,if
define->typearray[num]={nums.};,while
define->typearray[num]={nums.};,for
define->typearray[num]={nums.};,return
define->typearray[num]={nums.};,array
define->typearray[num]={nums.};,string
define->typearray[num]={nums.};,num
define->typearray[num]={nums.};,%
define->typearray[num]={nums.};,/
define->typearray[num]={nums.};,*
define->typearray[num]={nums.};,-
define->typearray[num]={nums.};,+
define->typearray[num]={nums.};,char
define->typearray[num]={nums.};,double
define->typearray[num]={nums.};,int
define->typearray[num]={nums.};,}
define->typearray[num]={nums.};,{
define->typearray[num]={nums.};,(
define->typearray[num]={nums.};,id
项目364:
nums->.num,}
shift:332
nums->num,.nums,}
nums->.num,nums,}
项目365:
define->typearray[]={string}.;,scanf
shift:386
define->typearray[]={string}.;,printf
define->typearray[]={string}.;,if
define->typearray[]={string}.;,while
define->typearray[]={string}.;,for
define->typearray[]={string}.;,return
define->typearray[]={string}.;,array
define->typearray[]={string}.;,string
define->typearray[]={string}.;,num
define->typearray[]={string}.;,%
define->typearray[]={string}.;,/
define->typearray[]={string}.;,*
define->typearray[]={string}.;,-
define->typearray[]={string}.;,+
define->typearray[]={string}.;,char
define->typearray[]={string}.;,double
define->typearray[]={string}.;,int
define->typearray[]={string}.;,}
define->typearray[]={string}.;,{
define->typearray[]={string}.;,(
define->typearray[]={string}.;,id
项目366:
define->typearray[]={nums}.;,scanf
shift:387
define->typearray[]={nums}.;,printf
define->typearray[]={nums}.;,if
define->typearray[]={nums}.;,while
define->typearray[]={nums}.;,for
define->typearray[]={nums}.;,return
define->typearray[]={nums}.;,array
define->typearray[]={nums}.;,string
define->typearray[]={nums}.;,num
define->typearray[]={nums}.;,%
define->typearray[]={nums}.;,/
define->typearray[]={nums}.;,*
define->typearray[]={nums}.;,-
define->typearray[]={nums}.;,+
define->typearray[]={nums}.;,char
define->typearray[]={nums}.;,double
define->typearray[]={nums}.;,int
define->typearray[]={nums}.;,}
define->typearray[]={nums}.;,{
define->typearray[]={nums}.;,(
define->typearray[]={nums}.;,id
项目367:
function_call->id(function_call_list),!=
reduce:9
function_call->id(function_call_list),==
reduce:9
function_call->id(function_call_list),>
reduce:9
function_call->id(function_call_list),<
reduce:9
function_call->id(function_call_list),<=
reduce:9
function_call->id(function_call_list),>=
reduce:9
function_call->id(function_call_list),%
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
function_call->id(function_call_list),;
reduce:9
项目368:
F->array[E],!=
reduce:33
F->array[E],==
reduce:33
F->array[E],>
reduce:33
F->array[E],<
reduce:33
F->array[E],<=
reduce:33
F->array[E],>=
reduce:33
F->array[E],%
reduce:33
F->array[E],/
reduce:33
F->array[E],*
reduce:33
F->array[E],-
reduce:33
F->array[E],+
reduce:33
F->array[E],;
reduce:33
项目369:
Inc_expression->id++,)
reduce:70
项目370:
Dec_expression->id--,)
reduce:71
项目371:
scanf_expression->.scanf(string);,scanf
shift:53
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:52
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:48
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
forsentence->.sentence,scanf
forsentence->.sentence,printf
forsentence->.sentence,if
forsentence->.sentence,while
forsentence->.sentence,for
forsentence->.sentence,return
forsentence->.sentence,array
forsentence->.sentence,string
forsentence->.sentence,num
forsentence->.sentence,%
forsentence->.sentence,/
forsentence->.sentence,*
forsentence->.sentence,-
forsentence->.sentence,+
forsentence->.sentence,char
forsentence->.sentence,double
forsentence->.sentence,int
forsentence->.sentence,}
forsentence->.sentence,{
forsentence->.sentence,(
forsentence->.sentence,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:41
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:36
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目372:
function_call->id(function_call_list),!=
reduce:9
function_call->id(function_call_list),==
reduce:9
function_call->id(function_call_list),>
reduce:9
function_call->id(function_call_list),<
reduce:9
function_call->id(function_call_list),<=
reduce:9
function_call->id(function_call_list),>=
reduce:9
function_call->id(function_call_list),%
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
项目373:
F->array[E],!=
reduce:33
F->array[E],==
reduce:33
F->array[E],>
reduce:33
F->array[E],<
reduce:33
F->array[E],<=
reduce:33
F->array[E],>=
reduce:33
F->array[E],%
reduce:33
F->array[E],/
reduce:33
F->array[E],*
reduce:33
F->array[E],-
reduce:33
F->array[E],+
reduce:33
项目374:
define->typearray[num.];,scanf
shift:390
define->typearray[num.];,printf
define->typearray[num.];,else
define->typearray[num.];,if
define->typearray[num.];,while
define->typearray[num.];,for
define->typearray[num.];,return
define->typearray[num.];,array
define->typearray[num.];,string
define->typearray[num.];,num
define->typearray[num.];,%
define->typearray[num.];,/
define->typearray[num.];,*
define->typearray[num.];,-
define->typearray[num.];,+
define->typearray[num.];,char
define->typearray[num.];,double
define->typearray[num.];,int
define->typearray[num.];,}
define->typearray[num.];,{
define->typearray[num.];,(
define->typearray[num.];,id
define->typearray[num.]={nums};,scanf
define->typearray[num.]={nums};,printf
define->typearray[num.]={nums};,else
define->typearray[num.]={nums};,if
define->typearray[num.]={nums};,while
define->typearray[num.]={nums};,for
define->typearray[num.]={nums};,return
define->typearray[num.]={nums};,array
define->typearray[num.]={nums};,string
define->typearray[num.]={nums};,num
define->typearray[num.]={nums};,%
define->typearray[num.]={nums};,/
define->typearray[num.]={nums};,*
define->typearray[num.]={nums};,-
define->typearray[num.]={nums};,+
define->typearray[num.]={nums};,char
define->typearray[num.]={nums};,double
define->typearray[num.]={nums};,int
define->typearray[num.]={nums};,}
define->typearray[num.]={nums};,{
define->typearray[num.]={nums};,(
define->typearray[num.]={nums};,id
项目375:
define->typearray[].={nums};,scanf
shift:391
define->typearray[].={nums};,printf
define->typearray[].={nums};,else
define->typearray[].={nums};,if
define->typearray[].={nums};,while
define->typearray[].={nums};,for
define->typearray[].={nums};,return
define->typearray[].={nums};,array
define->typearray[].={nums};,string
define->typearray[].={nums};,num
define->typearray[].={nums};,%
define->typearray[].={nums};,/
define->typearray[].={nums};,*
define->typearray[].={nums};,-
define->typearray[].={nums};,+
define->typearray[].={nums};,char
define->typearray[].={nums};,double
define->typearray[].={nums};,int
define->typearray[].={nums};,}
define->typearray[].={nums};,{
define->typearray[].={nums};,(
define->typearray[].={nums};,id
define->typearray[].={string};,scanf
define->typearray[].={string};,printf
define->typearray[].={string};,else
define->typearray[].={string};,if
define->typearray[].={string};,while
define->typearray[].={string};,for
define->typearray[].={string};,return
define->typearray[].={string};,array
define->typearray[].={string};,string
define->typearray[].={string};,num
define->typearray[].={string};,%
define->typearray[].={string};,/
define->typearray[].={string};,*
define->typearray[].={string};,-
define->typearray[].={string};,+
define->typearray[].={string};,char
define->typearray[].={string};,double
define->typearray[].={string};,int
define->typearray[].={string};,}
define->typearray[].={string};,{
define->typearray[].={string};,(
define->typearray[].={string};,id
项目376:
define->typeid_name=E.;,scanf
shift:392
define->typeid_name=E.;,printf
define->typeid_name=E.;,else
define->typeid_name=E.;,if
define->typeid_name=E.;,while
define->typeid_name=E.;,for
define->typeid_name=E.;,return
define->typeid_name=E.;,array
define->typeid_name=E.;,string
define->typeid_name=E.;,num
define->typeid_name=E.;,%
define->typeid_name=E.;,/
define->typeid_name=E.;,*
define->typeid_name=E.;,-
define->typeid_name=E.;,+
define->typeid_name=E.;,char
define->typeid_name=E.;,double
define->typeid_name=E.;,int
define->typeid_name=E.;,}
define->typeid_name=E.;,{
define->typeid_name=E.;,(
define->typeid_name=E.;,id
E->E.-T,-
shift:77
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:76
E->E.+T,+
E->E.+T,;
项目377:
G->.E,!=
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,;
bool_expression->.GopH,;
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,string
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,%
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,id
F->.function_call,!=
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],!=
shift:244
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,!=
shift:238
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,!=
shift:243
F->.string,==
F->.string,>
F->.string,<
F->.string,<=
F->.string,>=
F->.string,%
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,!=
shift:242
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,%
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),!=
shift:239
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),%
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,!=
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T%F,!=
T->.T%F,==
T->.T%F,>
T->.T%F,<
T->.T%F,<=
T->.T%F,>=
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T/F,!=
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,!=
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,!=
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,!=
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,!=
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),!=
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),!=
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目378:
scanf_expression->.scanf(string);,scanf
shift:286
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:285
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:280
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
whilesentence->.sentence,scanf
whilesentence->.sentence,printf
whilesentence->.sentence,else
whilesentence->.sentence,if
whilesentence->.sentence,while
whilesentence->.sentence,for
whilesentence->.sentence,return
whilesentence->.sentence,array
whilesentence->.sentence,string
whilesentence->.sentence,num
whilesentence->.sentence,%
whilesentence->.sentence,/
whilesentence->.sentence,*
whilesentence->.sentence,-
whilesentence->.sentence,+
whilesentence->.sentence,char
whilesentence->.sentence,double
whilesentence->.sentence,int
whilesentence->.sentence,}
whilesentence->.sentence,{
whilesentence->.sentence,(
whilesentence->.sentence,id
while1->.while,(
shift:44
while_expression->while1(bool_expression).whilesentence,scanf
while_expression->while1(bool_expression).whilesentence,printf
while_expression->while1(bool_expression).whilesentence,else
while_expression->while1(bool_expression).whilesentence,if
while_expression->while1(bool_expression).whilesentence,while
while_expression->while1(bool_expression).whilesentence,for
while_expression->while1(bool_expression).whilesentence,return
while_expression->while1(bool_expression).whilesentence,array
while_expression->while1(bool_expression).whilesentence,string
while_expression->while1(bool_expression).whilesentence,num
while_expression->while1(bool_expression).whilesentence,%
while_expression->while1(bool_expression).whilesentence,/
while_expression->while1(bool_expression).whilesentence,*
while_expression->while1(bool_expression).whilesentence,-
while_expression->while1(bool_expression).whilesentence,+
while_expression->while1(bool_expression).whilesentence,char
while_expression->while1(bool_expression).whilesentence,double
while_expression->while1(bool_expression).whilesentence,int
while_expression->while1(bool_expression).whilesentence,}
while_expression->while1(bool_expression).whilesentence,{
while_expression->while1(bool_expression).whilesentence,(
while_expression->while1(bool_expression).whilesentence,id
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:276
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:271
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:267
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目379:
scanf_expression->.scanf(string);,scanf
shift:286
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:285
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
ifsentence->.sentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,scanf
if_expression->if(bool_expression).ifsentenceelsesentence,printf
if_expression->if(bool_expression).ifsentenceelsesentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,if
if_expression->if(bool_expression).ifsentenceelsesentence,while
if_expression->if(bool_expression).ifsentenceelsesentence,for
if_expression->if(bool_expression).ifsentenceelsesentence,return
if_expression->if(bool_expression).ifsentenceelsesentence,array
if_expression->if(bool_expression).ifsentenceelsesentence,string
if_expression->if(bool_expression).ifsentenceelsesentence,num
if_expression->if(bool_expression).ifsentenceelsesentence,%
if_expression->if(bool_expression).ifsentenceelsesentence,/
if_expression->if(bool_expression).ifsentenceelsesentence,*
if_expression->if(bool_expression).ifsentenceelsesentence,-
if_expression->if(bool_expression).ifsentenceelsesentence,+
if_expression->if(bool_expression).ifsentenceelsesentence,char
if_expression->if(bool_expression).ifsentenceelsesentence,double
if_expression->if(bool_expression).ifsentenceelsesentence,int
if_expression->if(bool_expression).ifsentenceelsesentence,}
if_expression->if(bool_expression).ifsentenceelsesentence,{
if_expression->if(bool_expression).ifsentenceelsesentence,(
if_expression->if(bool_expression).ifsentenceelsesentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:280
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->if(bool_expression).sentence,scanf
if_expression->if(bool_expression).sentence,printf
if_expression->if(bool_expression).sentence,else
if_expression->if(bool_expression).sentence,if
if_expression->if(bool_expression).sentence,while
if_expression->if(bool_expression).sentence,for
if_expression->if(bool_expression).sentence,return
if_expression->if(bool_expression).sentence,array
if_expression->if(bool_expression).sentence,string
if_expression->if(bool_expression).sentence,num
if_expression->if(bool_expression).sentence,%
if_expression->if(bool_expression).sentence,/
if_expression->if(bool_expression).sentence,*
if_expression->if(bool_expression).sentence,-
if_expression->if(bool_expression).sentence,+
if_expression->if(bool_expression).sentence,char
if_expression->if(bool_expression).sentence,double
if_expression->if(bool_expression).sentence,int
if_expression->if(bool_expression).sentence,}
if_expression->if(bool_expression).sentence,{
if_expression->if(bool_expression).sentence,(
if_expression->if(bool_expression).sentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:276
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:271
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:267
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目380:
printf_expression->printf(string).;,scanf
shift:398
printf_expression->printf(string).;,printf
printf_expression->printf(string).;,else
printf_expression->printf(string).;,if
printf_expression->printf(string).;,while
printf_expression->printf(string).;,for
printf_expression->printf(string).;,return
printf_expression->printf(string).;,array
printf_expression->printf(string).;,string
printf_expression->printf(string).;,num
printf_expression->printf(string).;,%
printf_expression->printf(string).;,/
printf_expression->printf(string).;,*
printf_expression->printf(string).;,-
printf_expression->printf(string).;,+
printf_expression->printf(string).;,char
printf_expression->printf(string).;,double
printf_expression->printf(string).;,int
printf_expression->printf(string).;,}
printf_expression->printf(string).;,{
printf_expression->printf(string).;,(
printf_expression->printf(string).;,id
项目381:
getaddr->.&id,,
shift:291
getaddr->.&id,)
getaddr->.id,,
shift:288
getaddr->.id,)
expressions->.getaddr,)
expressions->.getaddr,expressions,)
printf_expression->printf(string,.expressions);,scanf
printf_expression->printf(string,.expressions);,printf
printf_expression->printf(string,.expressions);,else
printf_expression->printf(string,.expressions);,if
printf_expression->printf(string,.expressions);,while
printf_expression->printf(string,.expressions);,for
printf_expression->printf(string,.expressions);,return
printf_expression->printf(string,.expressions);,array
printf_expression->printf(string,.expressions);,string
printf_expression->printf(string,.expressions);,num
printf_expression->printf(string,.expressions);,%
printf_expression->printf(string,.expressions);,/
printf_expression->printf(string,.expressions);,*
printf_expression->printf(string,.expressions);,-
printf_expression->printf(string,.expressions);,+
printf_expression->printf(string,.expressions);,char
printf_expression->printf(string,.expressions);,double
printf_expression->printf(string,.expressions);,int
printf_expression->printf(string,.expressions);,}
printf_expression->printf(string,.expressions);,{
printf_expression->printf(string,.expressions);,(
printf_expression->printf(string,.expressions);,id
项目382:
scanf_expression->scanf(string).;,scanf
shift:400
scanf_expression->scanf(string).;,printf
scanf_expression->scanf(string).;,else
scanf_expression->scanf(string).;,if
scanf_expression->scanf(string).;,while
scanf_expression->scanf(string).;,for
scanf_expression->scanf(string).;,return
scanf_expression->scanf(string).;,array
scanf_expression->scanf(string).;,string
scanf_expression->scanf(string).;,num
scanf_expression->scanf(string).;,%
scanf_expression->scanf(string).;,/
scanf_expression->scanf(string).;,*
scanf_expression->scanf(string).;,-
scanf_expression->scanf(string).;,+
scanf_expression->scanf(string).;,char
scanf_expression->scanf(string).;,double
scanf_expression->scanf(string).;,int
scanf_expression->scanf(string).;,}
scanf_expression->scanf(string).;,{
scanf_expression->scanf(string).;,(
scanf_expression->scanf(string).;,id
项目383:
getaddr->.&id,,
shift:291
getaddr->.&id,)
getaddr->.id,,
shift:288
getaddr->.id,)
scanf_expression->scanf(string,.expressions);,scanf
scanf_expression->scanf(string,.expressions);,printf
scanf_expression->scanf(string,.expressions);,else
scanf_expression->scanf(string,.expressions);,if
scanf_expression->scanf(string,.expressions);,while
scanf_expression->scanf(string,.expressions);,for
scanf_expression->scanf(string,.expressions);,return
scanf_expression->scanf(string,.expressions);,array
scanf_expression->scanf(string,.expressions);,string
scanf_expression->scanf(string,.expressions);,num
scanf_expression->scanf(string,.expressions);,%
scanf_expression->scanf(string,.expressions);,/
scanf_expression->scanf(string,.expressions);,*
scanf_expression->scanf(string,.expressions);,-
scanf_expression->scanf(string,.expressions);,+
scanf_expression->scanf(string,.expressions);,char
scanf_expression->scanf(string,.expressions);,double
scanf_expression->scanf(string,.expressions);,int
scanf_expression->scanf(string,.expressions);,}
scanf_expression->scanf(string,.expressions);,{
scanf_expression->scanf(string,.expressions);,(
scanf_expression->scanf(string,.expressions);,id
expressions->.getaddr,)
expressions->.getaddr,expressions,)
项目384:
define->typearray[num]={nums}.;,scanf
shift:402
define->typearray[num]={nums}.;,printf
define->typearray[num]={nums}.;,if
define->typearray[num]={nums}.;,while
define->typearray[num]={nums}.;,for
define->typearray[num]={nums}.;,return
define->typearray[num]={nums}.;,array
define->typearray[num]={nums}.;,string
define->typearray[num]={nums}.;,num
define->typearray[num]={nums}.;,%
define->typearray[num]={nums}.;,/
define->typearray[num]={nums}.;,*
define->typearray[num]={nums}.;,-
define->typearray[num]={nums}.;,+
define->typearray[num]={nums}.;,char
define->typearray[num]={nums}.;,double
define->typearray[num]={nums}.;,int
define->typearray[num]={nums}.;,}
define->typearray[num]={nums}.;,{
define->typearray[num]={nums}.;,(
define->typearray[num]={nums}.;,id
项目385:
nums->num,nums,}
reduce:44
项目386:
define->typearray[]={string};,scanf
reduce:40
define->typearray[]={string};,printf
reduce:40
define->typearray[]={string};,if
reduce:40
define->typearray[]={string};,while
reduce:40
define->typearray[]={string};,for
reduce:40
define->typearray[]={string};,return
reduce:40
define->typearray[]={string};,array
reduce:40
define->typearray[]={string};,string
reduce:40
define->typearray[]={string};,num
reduce:40
define->typearray[]={string};,%
reduce:40
define->typearray[]={string};,/
reduce:40
define->typearray[]={string};,*
reduce:40
define->typearray[]={string};,-
reduce:40
define->typearray[]={string};,+
reduce:40
define->typearray[]={string};,char
reduce:40
define->typearray[]={string};,double
reduce:40
define->typearray[]={string};,int
reduce:40
define->typearray[]={string};,}
reduce:40
define->typearray[]={string};,{
reduce:40
define->typearray[]={string};,(
reduce:40
define->typearray[]={string};,id
reduce:40
项目387:
define->typearray[]={nums};,scanf
reduce:42
define->typearray[]={nums};,printf
reduce:42
define->typearray[]={nums};,if
reduce:42
define->typearray[]={nums};,while
reduce:42
define->typearray[]={nums};,for
reduce:42
define->typearray[]={nums};,return
reduce:42
define->typearray[]={nums};,array
reduce:42
define->typearray[]={nums};,string
reduce:42
define->typearray[]={nums};,num
reduce:42
define->typearray[]={nums};,%
reduce:42
define->typearray[]={nums};,/
reduce:42
define->typearray[]={nums};,*
reduce:42
define->typearray[]={nums};,-
reduce:42
define->typearray[]={nums};,+
reduce:42
define->typearray[]={nums};,char
reduce:42
define->typearray[]={nums};,double
reduce:42
define->typearray[]={nums};,int
reduce:42
define->typearray[]={nums};,}
reduce:42
define->typearray[]={nums};,{
reduce:42
define->typearray[]={nums};,(
reduce:42
define->typearray[]={nums};,id
reduce:42
项目388:
forsentence->sentence,scanf
reduce:65
forsentence->sentence,printf
reduce:65
forsentence->sentence,if
reduce:65
forsentence->sentence,while
reduce:65
forsentence->sentence,for
reduce:65
forsentence->sentence,return
reduce:65
forsentence->sentence,array
reduce:65
forsentence->sentence,string
reduce:65
forsentence->sentence,num
reduce:65
forsentence->sentence,%
reduce:65
forsentence->sentence,/
reduce:65
forsentence->sentence,*
reduce:65
forsentence->sentence,-
reduce:65
forsentence->sentence,+
reduce:65
forsentence->sentence,char
reduce:65
forsentence->sentence,double
reduce:65
forsentence->sentence,int
reduce:65
forsentence->sentence,}
reduce:65
forsentence->sentence,{
reduce:65
forsentence->sentence,(
reduce:65
forsentence->sentence,id
reduce:65
项目389:
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,scanf
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,printf
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,if
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,while
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,for
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,return
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,array
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,string
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,num
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,%
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,/
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,*
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,-
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,+
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,char
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,double
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,int
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,}
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,{
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,(
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,id
reduce:51
项目390:
define->typearray[num].;,scanf
shift:403
define->typearray[num].;,printf
define->typearray[num].;,else
define->typearray[num].;,if
define->typearray[num].;,while
define->typearray[num].;,for
define->typearray[num].;,return
define->typearray[num].;,array
define->typearray[num].;,string
define->typearray[num].;,num
define->typearray[num].;,%
define->typearray[num].;,/
define->typearray[num].;,*
define->typearray[num].;,-
define->typearray[num].;,+
define->typearray[num].;,char
define->typearray[num].;,double
define->typearray[num].;,int
define->typearray[num].;,}
define->typearray[num].;,{
define->typearray[num].;,(
define->typearray[num].;,id
define->typearray[num].={nums};,scanf
shift:404
define->typearray[num].={nums};,printf
define->typearray[num].={nums};,else
define->typearray[num].={nums};,if
define->typearray[num].={nums};,while
define->typearray[num].={nums};,for
define->typearray[num].={nums};,return
define->typearray[num].={nums};,array
define->typearray[num].={nums};,string
define->typearray[num].={nums};,num
define->typearray[num].={nums};,%
define->typearray[num].={nums};,/
define->typearray[num].={nums};,*
define->typearray[num].={nums};,-
define->typearray[num].={nums};,+
define->typearray[num].={nums};,char
define->typearray[num].={nums};,double
define->typearray[num].={nums};,int
define->typearray[num].={nums};,}
define->typearray[num].={nums};,{
define->typearray[num].={nums};,(
define->typearray[num].={nums};,id
项目391:
define->typearray[]=.{nums};,scanf
shift:405
define->typearray[]=.{nums};,printf
define->typearray[]=.{nums};,else
define->typearray[]=.{nums};,if
define->typearray[]=.{nums};,while
define->typearray[]=.{nums};,for
define->typearray[]=.{nums};,return
define->typearray[]=.{nums};,array
define->typearray[]=.{nums};,string
define->typearray[]=.{nums};,num
define->typearray[]=.{nums};,%
define->typearray[]=.{nums};,/
define->typearray[]=.{nums};,*
define->typearray[]=.{nums};,-
define->typearray[]=.{nums};,+
define->typearray[]=.{nums};,char
define->typearray[]=.{nums};,double
define->typearray[]=.{nums};,int
define->typearray[]=.{nums};,}
define->typearray[]=.{nums};,{
define->typearray[]=.{nums};,(
define->typearray[]=.{nums};,id
define->typearray[]=.{string};,scanf
define->typearray[]=.{string};,printf
define->typearray[]=.{string};,else
define->typearray[]=.{string};,if
define->typearray[]=.{string};,while
define->typearray[]=.{string};,for
define->typearray[]=.{string};,return
define->typearray[]=.{string};,array
define->typearray[]=.{string};,string
define->typearray[]=.{string};,num
define->typearray[]=.{string};,%
define->typearray[]=.{string};,/
define->typearray[]=.{string};,*
define->typearray[]=.{string};,-
define->typearray[]=.{string};,+
define->typearray[]=.{string};,char
define->typearray[]=.{string};,double
define->typearray[]=.{string};,int
define->typearray[]=.{string};,}
define->typearray[]=.{string};,{
define->typearray[]=.{string};,(
define->typearray[]=.{string};,id
项目392:
define->typeid_name=E;,scanf
reduce:37
define->typeid_name=E;,printf
reduce:37
define->typeid_name=E;,else
reduce:37
define->typeid_name=E;,if
reduce:37
define->typeid_name=E;,while
reduce:37
define->typeid_name=E;,for
reduce:37
define->typeid_name=E;,return
reduce:37
define->typeid_name=E;,array
reduce:37
define->typeid_name=E;,string
reduce:37
define->typeid_name=E;,num
reduce:37
define->typeid_name=E;,%
reduce:37
define->typeid_name=E;,/
reduce:37
define->typeid_name=E;,*
reduce:37
define->typeid_name=E;,-
reduce:37
define->typeid_name=E;,+
reduce:37
define->typeid_name=E;,char
reduce:37
define->typeid_name=E;,double
reduce:37
define->typeid_name=E;,int
reduce:37
define->typeid_name=E;,}
reduce:37
define->typeid_name=E;,{
reduce:37
define->typeid_name=E;,(
reduce:37
define->typeid_name=E;,id
reduce:37
项目393:
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,scanf
shift:406
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,id
项目394:
whilesentence->sentence,scanf
reduce:54
whilesentence->sentence,printf
reduce:54
whilesentence->sentence,else
reduce:54
whilesentence->sentence,if
reduce:54
whilesentence->sentence,while
reduce:54
whilesentence->sentence,for
reduce:54
whilesentence->sentence,return
reduce:54
whilesentence->sentence,array
reduce:54
whilesentence->sentence,string
reduce:54
whilesentence->sentence,num
reduce:54
whilesentence->sentence,%
reduce:54
whilesentence->sentence,/
reduce:54
whilesentence->sentence,*
reduce:54
whilesentence->sentence,-
reduce:54
whilesentence->sentence,+
reduce:54
whilesentence->sentence,char
reduce:54
whilesentence->sentence,double
reduce:54
whilesentence->sentence,int
reduce:54
whilesentence->sentence,}
reduce:54
whilesentence->sentence,{
reduce:54
whilesentence->sentence,(
reduce:54
whilesentence->sentence,id
reduce:54
项目395:
while_expression->while1(bool_expression)whilesentence,scanf
reduce:52
while_expression->while1(bool_expression)whilesentence,printf
reduce:52
while_expression->while1(bool_expression)whilesentence,else
reduce:52
while_expression->while1(bool_expression)whilesentence,if
reduce:52
while_expression->while1(bool_expression)whilesentence,while
reduce:52
while_expression->while1(bool_expression)whilesentence,for
reduce:52
while_expression->while1(bool_expression)whilesentence,return
reduce:52
while_expression->while1(bool_expression)whilesentence,array
reduce:52
while_expression->while1(bool_expression)whilesentence,string
reduce:52
while_expression->while1(bool_expression)whilesentence,num
reduce:52
while_expression->while1(bool_expression)whilesentence,%
reduce:52
while_expression->while1(bool_expression)whilesentence,/
reduce:52
while_expression->while1(bool_expression)whilesentence,*
reduce:52
while_expression->while1(bool_expression)whilesentence,-
reduce:52
while_expression->while1(bool_expression)whilesentence,+
reduce:52
while_expression->while1(bool_expression)whilesentence,char
reduce:52
while_expression->while1(bool_expression)whilesentence,double
reduce:52
while_expression->while1(bool_expression)whilesentence,int
reduce:52
while_expression->while1(bool_expression)whilesentence,}
reduce:52
while_expression->while1(bool_expression)whilesentence,{
reduce:52
while_expression->while1(bool_expression)whilesentence,(
reduce:52
while_expression->while1(bool_expression)whilesentence,id
reduce:52
项目396:
ifsentence->sentence,else
reduce:75
if_expression->if(bool_expression)sentence,scanf
reduce:73
if_expression->if(bool_expression)sentence,printf
reduce:73
if_expression->if(bool_expression)sentence,else
规约-规约冲突！
if_expression->if(bool_expression)sentence,if
reduce:73
if_expression->if(bool_expression)sentence,while
reduce:73
if_expression->if(bool_expression)sentence,for
reduce:73
if_expression->if(bool_expression)sentence,return
reduce:73
if_expression->if(bool_expression)sentence,array
reduce:73
if_expression->if(bool_expression)sentence,string
reduce:73
if_expression->if(bool_expression)sentence,num
reduce:73
if_expression->if(bool_expression)sentence,%
reduce:73
if_expression->if(bool_expression)sentence,/
reduce:73
if_expression->if(bool_expression)sentence,*
reduce:73
if_expression->if(bool_expression)sentence,-
reduce:73
if_expression->if(bool_expression)sentence,+
reduce:73
if_expression->if(bool_expression)sentence,char
reduce:73
if_expression->if(bool_expression)sentence,double
reduce:73
if_expression->if(bool_expression)sentence,int
reduce:73
if_expression->if(bool_expression)sentence,}
reduce:73
if_expression->if(bool_expression)sentence,{
reduce:73
if_expression->if(bool_expression)sentence,(
reduce:73
if_expression->if(bool_expression)sentence,id
reduce:73
项目397:
if_expression->if(bool_expression)ifsentence.elsesentence,scanf
shift:407
if_expression->if(bool_expression)ifsentence.elsesentence,printf
if_expression->if(bool_expression)ifsentence.elsesentence,else
if_expression->if(bool_expression)ifsentence.elsesentence,if
if_expression->if(bool_expression)ifsentence.elsesentence,while
if_expression->if(bool_expression)ifsentence.elsesentence,for
if_expression->if(bool_expression)ifsentence.elsesentence,return
if_expression->if(bool_expression)ifsentence.elsesentence,array
if_expression->if(bool_expression)ifsentence.elsesentence,string
if_expression->if(bool_expression)ifsentence.elsesentence,num
if_expression->if(bool_expression)ifsentence.elsesentence,%
if_expression->if(bool_expression)ifsentence.elsesentence,/
if_expression->if(bool_expression)ifsentence.elsesentence,*
if_expression->if(bool_expression)ifsentence.elsesentence,-
if_expression->if(bool_expression)ifsentence.elsesentence,+
if_expression->if(bool_expression)ifsentence.elsesentence,char
if_expression->if(bool_expression)ifsentence.elsesentence,double
if_expression->if(bool_expression)ifsentence.elsesentence,int
if_expression->if(bool_expression)ifsentence.elsesentence,}
if_expression->if(bool_expression)ifsentence.elsesentence,{
if_expression->if(bool_expression)ifsentence.elsesentence,(
if_expression->if(bool_expression)ifsentence.elsesentence,id
项目398:
printf_expression->printf(string);,scanf
reduce:79
printf_expression->printf(string);,printf
reduce:79
printf_expression->printf(string);,else
reduce:79
printf_expression->printf(string);,if
reduce:79
printf_expression->printf(string);,while
reduce:79
printf_expression->printf(string);,for
reduce:79
printf_expression->printf(string);,return
reduce:79
printf_expression->printf(string);,array
reduce:79
printf_expression->printf(string);,string
reduce:79
printf_expression->printf(string);,num
reduce:79
printf_expression->printf(string);,%
reduce:79
printf_expression->printf(string);,/
reduce:79
printf_expression->printf(string);,*
reduce:79
printf_expression->printf(string);,-
reduce:79
printf_expression->printf(string);,+
reduce:79
printf_expression->printf(string);,char
reduce:79
printf_expression->printf(string);,double
reduce:79
printf_expression->printf(string);,int
reduce:79
printf_expression->printf(string);,}
reduce:79
printf_expression->printf(string);,{
reduce:79
printf_expression->printf(string);,(
reduce:79
printf_expression->printf(string);,id
reduce:79
项目399:
printf_expression->printf(string,expressions.);,scanf
shift:408
printf_expression->printf(string,expressions.);,printf
printf_expression->printf(string,expressions.);,else
printf_expression->printf(string,expressions.);,if
printf_expression->printf(string,expressions.);,while
printf_expression->printf(string,expressions.);,for
printf_expression->printf(string,expressions.);,return
printf_expression->printf(string,expressions.);,array
printf_expression->printf(string,expressions.);,string
printf_expression->printf(string,expressions.);,num
printf_expression->printf(string,expressions.);,%
printf_expression->printf(string,expressions.);,/
printf_expression->printf(string,expressions.);,*
printf_expression->printf(string,expressions.);,-
printf_expression->printf(string,expressions.);,+
printf_expression->printf(string,expressions.);,char
printf_expression->printf(string,expressions.);,double
printf_expression->printf(string,expressions.);,int
printf_expression->printf(string,expressions.);,}
printf_expression->printf(string,expressions.);,{
printf_expression->printf(string,expressions.);,(
printf_expression->printf(string,expressions.);,id
项目400:
scanf_expression->scanf(string);,scanf
reduce:84
scanf_expression->scanf(string);,printf
reduce:84
scanf_expression->scanf(string);,else
reduce:84
scanf_expression->scanf(string);,if
reduce:84
scanf_expression->scanf(string);,while
reduce:84
scanf_expression->scanf(string);,for
reduce:84
scanf_expression->scanf(string);,return
reduce:84
scanf_expression->scanf(string);,array
reduce:84
scanf_expression->scanf(string);,string
reduce:84
scanf_expression->scanf(string);,num
reduce:84
scanf_expression->scanf(string);,%
reduce:84
scanf_expression->scanf(string);,/
reduce:84
scanf_expression->scanf(string);,*
reduce:84
scanf_expression->scanf(string);,-
reduce:84
scanf_expression->scanf(string);,+
reduce:84
scanf_expression->scanf(string);,char
reduce:84
scanf_expression->scanf(string);,double
reduce:84
scanf_expression->scanf(string);,int
reduce:84
scanf_expression->scanf(string);,}
reduce:84
scanf_expression->scanf(string);,{
reduce:84
scanf_expression->scanf(string);,(
reduce:84
scanf_expression->scanf(string);,id
reduce:84
项目401:
scanf_expression->scanf(string,expressions.);,scanf
shift:409
scanf_expression->scanf(string,expressions.);,printf
scanf_expression->scanf(string,expressions.);,else
scanf_expression->scanf(string,expressions.);,if
scanf_expression->scanf(string,expressions.);,while
scanf_expression->scanf(string,expressions.);,for
scanf_expression->scanf(string,expressions.);,return
scanf_expression->scanf(string,expressions.);,array
scanf_expression->scanf(string,expressions.);,string
scanf_expression->scanf(string,expressions.);,num
scanf_expression->scanf(string,expressions.);,%
scanf_expression->scanf(string,expressions.);,/
scanf_expression->scanf(string,expressions.);,*
scanf_expression->scanf(string,expressions.);,-
scanf_expression->scanf(string,expressions.);,+
scanf_expression->scanf(string,expressions.);,char
scanf_expression->scanf(string,expressions.);,double
scanf_expression->scanf(string,expressions.);,int
scanf_expression->scanf(string,expressions.);,}
scanf_expression->scanf(string,expressions.);,{
scanf_expression->scanf(string,expressions.);,(
scanf_expression->scanf(string,expressions.);,id
项目402:
define->typearray[num]={nums};,scanf
reduce:41
define->typearray[num]={nums};,printf
reduce:41
define->typearray[num]={nums};,if
reduce:41
define->typearray[num]={nums};,while
reduce:41
define->typearray[num]={nums};,for
reduce:41
define->typearray[num]={nums};,return
reduce:41
define->typearray[num]={nums};,array
reduce:41
define->typearray[num]={nums};,string
reduce:41
define->typearray[num]={nums};,num
reduce:41
define->typearray[num]={nums};,%
reduce:41
define->typearray[num]={nums};,/
reduce:41
define->typearray[num]={nums};,*
reduce:41
define->typearray[num]={nums};,-
reduce:41
define->typearray[num]={nums};,+
reduce:41
define->typearray[num]={nums};,char
reduce:41
define->typearray[num]={nums};,double
reduce:41
define->typearray[num]={nums};,int
reduce:41
define->typearray[num]={nums};,}
reduce:41
define->typearray[num]={nums};,{
reduce:41
define->typearray[num]={nums};,(
reduce:41
define->typearray[num]={nums};,id
reduce:41
项目403:
define->typearray[num];,scanf
reduce:43
define->typearray[num];,printf
reduce:43
define->typearray[num];,else
reduce:43
define->typearray[num];,if
reduce:43
define->typearray[num];,while
reduce:43
define->typearray[num];,for
reduce:43
define->typearray[num];,return
reduce:43
define->typearray[num];,array
reduce:43
define->typearray[num];,string
reduce:43
define->typearray[num];,num
reduce:43
define->typearray[num];,%
reduce:43
define->typearray[num];,/
reduce:43
define->typearray[num];,*
reduce:43
define->typearray[num];,-
reduce:43
define->typearray[num];,+
reduce:43
define->typearray[num];,char
reduce:43
define->typearray[num];,double
reduce:43
define->typearray[num];,int
reduce:43
define->typearray[num];,}
reduce:43
define->typearray[num];,{
reduce:43
define->typearray[num];,(
reduce:43
define->typearray[num];,id
reduce:43
项目404:
define->typearray[num]=.{nums};,scanf
shift:410
define->typearray[num]=.{nums};,printf
define->typearray[num]=.{nums};,else
define->typearray[num]=.{nums};,if
define->typearray[num]=.{nums};,while
define->typearray[num]=.{nums};,for
define->typearray[num]=.{nums};,return
define->typearray[num]=.{nums};,array
define->typearray[num]=.{nums};,string
define->typearray[num]=.{nums};,num
define->typearray[num]=.{nums};,%
define->typearray[num]=.{nums};,/
define->typearray[num]=.{nums};,*
define->typearray[num]=.{nums};,-
define->typearray[num]=.{nums};,+
define->typearray[num]=.{nums};,char
define->typearray[num]=.{nums};,double
define->typearray[num]=.{nums};,int
define->typearray[num]=.{nums};,}
define->typearray[num]=.{nums};,{
define->typearray[num]=.{nums};,(
define->typearray[num]=.{nums};,id
项目405:
nums->.num,}
shift:332
nums->.num,nums,}
define->typearray[]={.nums};,scanf
define->typearray[]={.nums};,printf
define->typearray[]={.nums};,else
define->typearray[]={.nums};,if
define->typearray[]={.nums};,while
define->typearray[]={.nums};,for
define->typearray[]={.nums};,return
define->typearray[]={.nums};,array
define->typearray[]={.nums};,string
define->typearray[]={.nums};,num
define->typearray[]={.nums};,%
define->typearray[]={.nums};,/
define->typearray[]={.nums};,*
define->typearray[]={.nums};,-
define->typearray[]={.nums};,+
define->typearray[]={.nums};,char
define->typearray[]={.nums};,double
define->typearray[]={.nums};,int
define->typearray[]={.nums};,}
define->typearray[]={.nums};,{
define->typearray[]={.nums};,(
define->typearray[]={.nums};,id
define->typearray[]={.string};,scanf
shift:411
define->typearray[]={.string};,printf
define->typearray[]={.string};,else
define->typearray[]={.string};,if
define->typearray[]={.string};,while
define->typearray[]={.string};,for
define->typearray[]={.string};,return
define->typearray[]={.string};,array
define->typearray[]={.string};,string
define->typearray[]={.string};,num
define->typearray[]={.string};,%
define->typearray[]={.string};,/
define->typearray[]={.string};,*
define->typearray[]={.string};,-
define->typearray[]={.string};,+
define->typearray[]={.string};,char
define->typearray[]={.string};,double
define->typearray[]={.string};,int
define->typearray[]={.string};,}
define->typearray[]={.string};,{
define->typearray[]={.string};,(
define->typearray[]={.string};,id
项目406:
Dec_expression->.id--,)
shift:339
Inc_expression->.id++,)
IncorDec->.Dec_expression,)
IncorDec->.Inc_expression,)
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,string
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,%
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,id
项目407:
scanf_expression->.scanf(string);,scanf
shift:286
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:285
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->if(bool_expression)ifsentenceelse.sentence,scanf
if_expression->if(bool_expression)ifsentenceelse.sentence,printf
if_expression->if(bool_expression)ifsentenceelse.sentence,else
if_expression->if(bool_expression)ifsentenceelse.sentence,if
if_expression->if(bool_expression)ifsentenceelse.sentence,while
if_expression->if(bool_expression)ifsentenceelse.sentence,for
if_expression->if(bool_expression)ifsentenceelse.sentence,return
if_expression->if(bool_expression)ifsentenceelse.sentence,array
if_expression->if(bool_expression)ifsentenceelse.sentence,string
if_expression->if(bool_expression)ifsentenceelse.sentence,num
if_expression->if(bool_expression)ifsentenceelse.sentence,%
if_expression->if(bool_expression)ifsentenceelse.sentence,/
if_expression->if(bool_expression)ifsentenceelse.sentence,*
if_expression->if(bool_expression)ifsentenceelse.sentence,-
if_expression->if(bool_expression)ifsentenceelse.sentence,+
if_expression->if(bool_expression)ifsentenceelse.sentence,char
if_expression->if(bool_expression)ifsentenceelse.sentence,double
if_expression->if(bool_expression)ifsentenceelse.sentence,int
if_expression->if(bool_expression)ifsentenceelse.sentence,}
if_expression->if(bool_expression)ifsentenceelse.sentence,{
if_expression->if(bool_expression)ifsentenceelse.sentence,(
if_expression->if(bool_expression)ifsentenceelse.sentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:280
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:276
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:271
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:267
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目408:
printf_expression->printf(string,expressions).;,scanf
shift:415
printf_expression->printf(string,expressions).;,printf
printf_expression->printf(string,expressions).;,else
printf_expression->printf(string,expressions).;,if
printf_expression->printf(string,expressions).;,while
printf_expression->printf(string,expressions).;,for
printf_expression->printf(string,expressions).;,return
printf_expression->printf(string,expressions).;,array
printf_expression->printf(string,expressions).;,string
printf_expression->printf(string,expressions).;,num
printf_expression->printf(string,expressions).;,%
printf_expression->printf(string,expressions).;,/
printf_expression->printf(string,expressions).;,*
printf_expression->printf(string,expressions).;,-
printf_expression->printf(string,expressions).;,+
printf_expression->printf(string,expressions).;,char
printf_expression->printf(string,expressions).;,double
printf_expression->printf(string,expressions).;,int
printf_expression->printf(string,expressions).;,}
printf_expression->printf(string,expressions).;,{
printf_expression->printf(string,expressions).;,(
printf_expression->printf(string,expressions).;,id
项目409:
scanf_expression->scanf(string,expressions).;,scanf
shift:416
scanf_expression->scanf(string,expressions).;,printf
scanf_expression->scanf(string,expressions).;,else
scanf_expression->scanf(string,expressions).;,if
scanf_expression->scanf(string,expressions).;,while
scanf_expression->scanf(string,expressions).;,for
scanf_expression->scanf(string,expressions).;,return
scanf_expression->scanf(string,expressions).;,array
scanf_expression->scanf(string,expressions).;,string
scanf_expression->scanf(string,expressions).;,num
scanf_expression->scanf(string,expressions).;,%
scanf_expression->scanf(string,expressions).;,/
scanf_expression->scanf(string,expressions).;,*
scanf_expression->scanf(string,expressions).;,-
scanf_expression->scanf(string,expressions).;,+
scanf_expression->scanf(string,expressions).;,char
scanf_expression->scanf(string,expressions).;,double
scanf_expression->scanf(string,expressions).;,int
scanf_expression->scanf(string,expressions).;,}
scanf_expression->scanf(string,expressions).;,{
scanf_expression->scanf(string,expressions).;,(
scanf_expression->scanf(string,expressions).;,id
项目410:
nums->.num,}
shift:332
nums->.num,nums,}
define->typearray[num]={.nums};,scanf
define->typearray[num]={.nums};,printf
define->typearray[num]={.nums};,else
define->typearray[num]={.nums};,if
define->typearray[num]={.nums};,while
define->typearray[num]={.nums};,for
define->typearray[num]={.nums};,return
define->typearray[num]={.nums};,array
define->typearray[num]={.nums};,string
define->typearray[num]={.nums};,num
define->typearray[num]={.nums};,%
define->typearray[num]={.nums};,/
define->typearray[num]={.nums};,*
define->typearray[num]={.nums};,-
define->typearray[num]={.nums};,+
define->typearray[num]={.nums};,char
define->typearray[num]={.nums};,double
define->typearray[num]={.nums};,int
define->typearray[num]={.nums};,}
define->typearray[num]={.nums};,{
define->typearray[num]={.nums};,(
define->typearray[num]={.nums};,id
项目411:
define->typearray[]={string.};,scanf
shift:418
define->typearray[]={string.};,printf
define->typearray[]={string.};,else
define->typearray[]={string.};,if
define->typearray[]={string.};,while
define->typearray[]={string.};,for
define->typearray[]={string.};,return
define->typearray[]={string.};,array
define->typearray[]={string.};,string
define->typearray[]={string.};,num
define->typearray[]={string.};,%
define->typearray[]={string.};,/
define->typearray[]={string.};,*
define->typearray[]={string.};,-
define->typearray[]={string.};,+
define->typearray[]={string.};,char
define->typearray[]={string.};,double
define->typearray[]={string.};,int
define->typearray[]={string.};,}
define->typearray[]={string.};,{
define->typearray[]={string.};,(
define->typearray[]={string.};,id
项目412:
define->typearray[]={nums.};,scanf
shift:419
define->typearray[]={nums.};,printf
define->typearray[]={nums.};,else
define->typearray[]={nums.};,if
define->typearray[]={nums.};,while
define->typearray[]={nums.};,for
define->typearray[]={nums.};,return
define->typearray[]={nums.};,array
define->typearray[]={nums.};,string
define->typearray[]={nums.};,num
define->typearray[]={nums.};,%
define->typearray[]={nums.};,/
define->typearray[]={nums.};,*
define->typearray[]={nums.};,-
define->typearray[]={nums.};,+
define->typearray[]={nums.};,char
define->typearray[]={nums.};,double
define->typearray[]={nums.};,int
define->typearray[]={nums.};,}
define->typearray[]={nums.};,{
define->typearray[]={nums.};,(
define->typearray[]={nums.};,id
项目413:
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,scanf
shift:420
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,id
项目414:
if_expression->if(bool_expression)ifsentenceelsesentence,scanf
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,printf
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,else
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,if
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,while
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,for
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,return
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,array
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,string
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,num
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,%
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,/
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,*
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,-
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,+
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,char
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,double
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,int
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,}
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,{
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,(
reduce:74
if_expression->if(bool_expression)ifsentenceelsesentence,id
reduce:74
项目415:
printf_expression->printf(string,expressions);,scanf
reduce:80
printf_expression->printf(string,expressions);,printf
reduce:80
printf_expression->printf(string,expressions);,else
reduce:80
printf_expression->printf(string,expressions);,if
reduce:80
printf_expression->printf(string,expressions);,while
reduce:80
printf_expression->printf(string,expressions);,for
reduce:80
printf_expression->printf(string,expressions);,return
reduce:80
printf_expression->printf(string,expressions);,array
reduce:80
printf_expression->printf(string,expressions);,string
reduce:80
printf_expression->printf(string,expressions);,num
reduce:80
printf_expression->printf(string,expressions);,%
reduce:80
printf_expression->printf(string,expressions);,/
reduce:80
printf_expression->printf(string,expressions);,*
reduce:80
printf_expression->printf(string,expressions);,-
reduce:80
printf_expression->printf(string,expressions);,+
reduce:80
printf_expression->printf(string,expressions);,char
reduce:80
printf_expression->printf(string,expressions);,double
reduce:80
printf_expression->printf(string,expressions);,int
reduce:80
printf_expression->printf(string,expressions);,}
reduce:80
printf_expression->printf(string,expressions);,{
reduce:80
printf_expression->printf(string,expressions);,(
reduce:80
printf_expression->printf(string,expressions);,id
reduce:80
项目416:
scanf_expression->scanf(string,expressions);,scanf
reduce:83
scanf_expression->scanf(string,expressions);,printf
reduce:83
scanf_expression->scanf(string,expressions);,else
reduce:83
scanf_expression->scanf(string,expressions);,if
reduce:83
scanf_expression->scanf(string,expressions);,while
reduce:83
scanf_expression->scanf(string,expressions);,for
reduce:83
scanf_expression->scanf(string,expressions);,return
reduce:83
scanf_expression->scanf(string,expressions);,array
reduce:83
scanf_expression->scanf(string,expressions);,string
reduce:83
scanf_expression->scanf(string,expressions);,num
reduce:83
scanf_expression->scanf(string,expressions);,%
reduce:83
scanf_expression->scanf(string,expressions);,/
reduce:83
scanf_expression->scanf(string,expressions);,*
reduce:83
scanf_expression->scanf(string,expressions);,-
reduce:83
scanf_expression->scanf(string,expressions);,+
reduce:83
scanf_expression->scanf(string,expressions);,char
reduce:83
scanf_expression->scanf(string,expressions);,double
reduce:83
scanf_expression->scanf(string,expressions);,int
reduce:83
scanf_expression->scanf(string,expressions);,}
reduce:83
scanf_expression->scanf(string,expressions);,{
reduce:83
scanf_expression->scanf(string,expressions);,(
reduce:83
scanf_expression->scanf(string,expressions);,id
reduce:83
项目417:
define->typearray[num]={nums.};,scanf
shift:421
define->typearray[num]={nums.};,printf
define->typearray[num]={nums.};,else
define->typearray[num]={nums.};,if
define->typearray[num]={nums.};,while
define->typearray[num]={nums.};,for
define->typearray[num]={nums.};,return
define->typearray[num]={nums.};,array
define->typearray[num]={nums.};,string
define->typearray[num]={nums.};,num
define->typearray[num]={nums.};,%
define->typearray[num]={nums.};,/
define->typearray[num]={nums.};,*
define->typearray[num]={nums.};,-
define->typearray[num]={nums.};,+
define->typearray[num]={nums.};,char
define->typearray[num]={nums.};,double
define->typearray[num]={nums.};,int
define->typearray[num]={nums.};,}
define->typearray[num]={nums.};,{
define->typearray[num]={nums.};,(
define->typearray[num]={nums.};,id
项目418:
define->typearray[]={string}.;,scanf
shift:422
define->typearray[]={string}.;,printf
define->typearray[]={string}.;,else
define->typearray[]={string}.;,if
define->typearray[]={string}.;,while
define->typearray[]={string}.;,for
define->typearray[]={string}.;,return
define->typearray[]={string}.;,array
define->typearray[]={string}.;,string
define->typearray[]={string}.;,num
define->typearray[]={string}.;,%
define->typearray[]={string}.;,/
define->typearray[]={string}.;,*
define->typearray[]={string}.;,-
define->typearray[]={string}.;,+
define->typearray[]={string}.;,char
define->typearray[]={string}.;,double
define->typearray[]={string}.;,int
define->typearray[]={string}.;,}
define->typearray[]={string}.;,{
define->typearray[]={string}.;,(
define->typearray[]={string}.;,id
项目419:
define->typearray[]={nums}.;,scanf
shift:423
define->typearray[]={nums}.;,printf
define->typearray[]={nums}.;,else
define->typearray[]={nums}.;,if
define->typearray[]={nums}.;,while
define->typearray[]={nums}.;,for
define->typearray[]={nums}.;,return
define->typearray[]={nums}.;,array
define->typearray[]={nums}.;,string
define->typearray[]={nums}.;,num
define->typearray[]={nums}.;,%
define->typearray[]={nums}.;,/
define->typearray[]={nums}.;,*
define->typearray[]={nums}.;,-
define->typearray[]={nums}.;,+
define->typearray[]={nums}.;,char
define->typearray[]={nums}.;,double
define->typearray[]={nums}.;,int
define->typearray[]={nums}.;,}
define->typearray[]={nums}.;,{
define->typearray[]={nums}.;,(
define->typearray[]={nums}.;,id
项目420:
scanf_expression->.scanf(string);,scanf
shift:286
scanf_expression->.scanf(string);,printf
scanf_expression->.scanf(string);,else
scanf_expression->.scanf(string);,if
scanf_expression->.scanf(string);,while
scanf_expression->.scanf(string);,for
scanf_expression->.scanf(string);,return
scanf_expression->.scanf(string);,array
scanf_expression->.scanf(string);,string
scanf_expression->.scanf(string);,num
scanf_expression->.scanf(string);,%
scanf_expression->.scanf(string);,/
scanf_expression->.scanf(string);,*
scanf_expression->.scanf(string);,-
scanf_expression->.scanf(string);,+
scanf_expression->.scanf(string);,char
scanf_expression->.scanf(string);,double
scanf_expression->.scanf(string);,int
scanf_expression->.scanf(string);,}
scanf_expression->.scanf(string);,{
scanf_expression->.scanf(string);,(
scanf_expression->.scanf(string);,id
scanf_expression->.scanf(string,expressions);,scanf
scanf_expression->.scanf(string,expressions);,printf
scanf_expression->.scanf(string,expressions);,else
scanf_expression->.scanf(string,expressions);,if
scanf_expression->.scanf(string,expressions);,while
scanf_expression->.scanf(string,expressions);,for
scanf_expression->.scanf(string,expressions);,return
scanf_expression->.scanf(string,expressions);,array
scanf_expression->.scanf(string,expressions);,string
scanf_expression->.scanf(string,expressions);,num
scanf_expression->.scanf(string,expressions);,%
scanf_expression->.scanf(string,expressions);,/
scanf_expression->.scanf(string,expressions);,*
scanf_expression->.scanf(string,expressions);,-
scanf_expression->.scanf(string,expressions);,+
scanf_expression->.scanf(string,expressions);,char
scanf_expression->.scanf(string,expressions);,double
scanf_expression->.scanf(string,expressions);,int
scanf_expression->.scanf(string,expressions);,}
scanf_expression->.scanf(string,expressions);,{
scanf_expression->.scanf(string,expressions);,(
scanf_expression->.scanf(string,expressions);,id
printf_expression->.printf(string,expressions);,scanf
shift:285
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,string
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,%
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,string
printf_expression->.printf(string);,num
printf_expression->.printf(string);,%
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,string
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,%
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,string
inout_expression->.printf_expression,num
inout_expression->.printf_expression,%
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,string
sentence->.inout_expression,num
sentence->.inout_expression,%
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:280
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,string
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,%
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,string
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,%
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,string
sentence->.if_expression,num
sentence->.if_expression,%
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,string
sentence->.IncorDec;,num
sentence->.IncorDec;,%
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
forsentence->.sentence,scanf
forsentence->.sentence,printf
forsentence->.sentence,else
forsentence->.sentence,if
forsentence->.sentence,while
forsentence->.sentence,for
forsentence->.sentence,return
forsentence->.sentence,array
forsentence->.sentence,string
forsentence->.sentence,num
forsentence->.sentence,%
forsentence->.sentence,/
forsentence->.sentence,*
forsentence->.sentence,-
forsentence->.sentence,+
forsentence->.sentence,char
forsentence->.sentence,double
forsentence->.sentence,int
forsentence->.sentence,}
forsentence->.sentence,{
forsentence->.sentence,(
forsentence->.sentence,id
while1->.while,(
shift:44
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,string
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,%
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,string
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,%
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:276
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,string
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,%
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,string
sentence->.while_expression,num
sentence->.while_expression,%
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,string
sentence->.loop_expression,num
sentence->.loop_expression,%
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:35
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,string
sentence->.set_value;,num
sentence->.set_value;,%
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,string
define->.typearray[num];,num
define->.typearray[num];,%
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,string
define->.typearray[]={nums};,num
define->.typearray[]={nums};,%
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,string
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,%
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typearray[]={string};,scanf
define->.typearray[]={string};,printf
define->.typearray[]={string};,else
define->.typearray[]={string};,if
define->.typearray[]={string};,while
define->.typearray[]={string};,for
define->.typearray[]={string};,return
define->.typearray[]={string};,array
define->.typearray[]={string};,string
define->.typearray[]={string};,num
define->.typearray[]={string};,%
define->.typearray[]={string};,/
define->.typearray[]={string};,*
define->.typearray[]={string};,-
define->.typearray[]={string};,+
define->.typearray[]={string};,char
define->.typearray[]={string};,double
define->.typearray[]={string};,int
define->.typearray[]={string};,}
define->.typearray[]={string};,{
define->.typearray[]={string};,(
define->.typearray[]={string};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,string
define->.typeid_name;,num
define->.typeid_name;,%
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,string
define->.typeid_name=E;,num
define->.typeid_name=E;,%
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,string
sentence->.define,num
sentence->.define,%
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:271
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,string
sentence->.returnE;,num
sentence->.returnE;,%
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,%
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],%
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,%
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.string,%
shift:34
F->.string,/
F->.string,*
F->.string,-
F->.string,+
F->.string,;
F->.num,%
shift:33
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),%
shift:21
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,%
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T%F,%
T->.T%F,/
T->.T%F,*
T->.T%F,-
T->.T%F,+
T->.T%F,;
T->.T/F,%
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,%
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,string
sentence->.E;,num
sentence->.E;,%
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:267
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},string
sentence->.{},num
sentence->.{},%
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},string
sentence->.{block},num
sentence->.{block},%
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),%
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),%
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目421:
define->typearray[num]={nums}.;,scanf
shift:426
define->typearray[num]={nums}.;,printf
define->typearray[num]={nums}.;,else
define->typearray[num]={nums}.;,if
define->typearray[num]={nums}.;,while
define->typearray[num]={nums}.;,for
define->typearray[num]={nums}.;,return
define->typearray[num]={nums}.;,array
define->typearray[num]={nums}.;,string
define->typearray[num]={nums}.;,num
define->typearray[num]={nums}.;,%
define->typearray[num]={nums}.;,/
define->typearray[num]={nums}.;,*
define->typearray[num]={nums}.;,-
define->typearray[num]={nums}.;,+
define->typearray[num]={nums}.;,char
define->typearray[num]={nums}.;,double
define->typearray[num]={nums}.;,int
define->typearray[num]={nums}.;,}
define->typearray[num]={nums}.;,{
define->typearray[num]={nums}.;,(
define->typearray[num]={nums}.;,id
项目422:
define->typearray[]={string};,scanf
reduce:40
define->typearray[]={string};,printf
reduce:40
define->typearray[]={string};,else
reduce:40
define->typearray[]={string};,if
reduce:40
define->typearray[]={string};,while
reduce:40
define->typearray[]={string};,for
reduce:40
define->typearray[]={string};,return
reduce:40
define->typearray[]={string};,array
reduce:40
define->typearray[]={string};,string
reduce:40
define->typearray[]={string};,num
reduce:40
define->typearray[]={string};,%
reduce:40
define->typearray[]={string};,/
reduce:40
define->typearray[]={string};,*
reduce:40
define->typearray[]={string};,-
reduce:40
define->typearray[]={string};,+
reduce:40
define->typearray[]={string};,char
reduce:40
define->typearray[]={string};,double
reduce:40
define->typearray[]={string};,int
reduce:40
define->typearray[]={string};,}
reduce:40
define->typearray[]={string};,{
reduce:40
define->typearray[]={string};,(
reduce:40
define->typearray[]={string};,id
reduce:40
项目423:
define->typearray[]={nums};,scanf
reduce:42
define->typearray[]={nums};,printf
reduce:42
define->typearray[]={nums};,else
reduce:42
define->typearray[]={nums};,if
reduce:42
define->typearray[]={nums};,while
reduce:42
define->typearray[]={nums};,for
reduce:42
define->typearray[]={nums};,return
reduce:42
define->typearray[]={nums};,array
reduce:42
define->typearray[]={nums};,string
reduce:42
define->typearray[]={nums};,num
reduce:42
define->typearray[]={nums};,%
reduce:42
define->typearray[]={nums};,/
reduce:42
define->typearray[]={nums};,*
reduce:42
define->typearray[]={nums};,-
reduce:42
define->typearray[]={nums};,+
reduce:42
define->typearray[]={nums};,char
reduce:42
define->typearray[]={nums};,double
reduce:42
define->typearray[]={nums};,int
reduce:42
define->typearray[]={nums};,}
reduce:42
define->typearray[]={nums};,{
reduce:42
define->typearray[]={nums};,(
reduce:42
define->typearray[]={nums};,id
reduce:42
项目424:
forsentence->sentence,scanf
reduce:65
forsentence->sentence,printf
reduce:65
forsentence->sentence,else
reduce:65
forsentence->sentence,if
reduce:65
forsentence->sentence,while
reduce:65
forsentence->sentence,for
reduce:65
forsentence->sentence,return
reduce:65
forsentence->sentence,array
reduce:65
forsentence->sentence,string
reduce:65
forsentence->sentence,num
reduce:65
forsentence->sentence,%
reduce:65
forsentence->sentence,/
reduce:65
forsentence->sentence,*
reduce:65
forsentence->sentence,-
reduce:65
forsentence->sentence,+
reduce:65
forsentence->sentence,char
reduce:65
forsentence->sentence,double
reduce:65
forsentence->sentence,int
reduce:65
forsentence->sentence,}
reduce:65
forsentence->sentence,{
reduce:65
forsentence->sentence,(
reduce:65
forsentence->sentence,id
reduce:65
项目425:
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,scanf
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,printf
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,else
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,if
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,while
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,for
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,return
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,array
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,string
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,num
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,%
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,/
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,*
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,-
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,+
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,char
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,double
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,int
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,}
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,{
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,(
reduce:51
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,id
reduce:51
项目426:
define->typearray[num]={nums};,scanf
reduce:41
define->typearray[num]={nums};,printf
reduce:41
define->typearray[num]={nums};,else
reduce:41
define->typearray[num]={nums};,if
reduce:41
define->typearray[num]={nums};,while
reduce:41
define->typearray[num]={nums};,for
reduce:41
define->typearray[num]={nums};,return
reduce:41
define->typearray[num]={nums};,array
reduce:41
define->typearray[num]={nums};,string
reduce:41
define->typearray[num]={nums};,num
reduce:41
define->typearray[num]={nums};,%
reduce:41
define->typearray[num]={nums};,/
reduce:41
define->typearray[num]={nums};,*
reduce:41
define->typearray[num]={nums};,-
reduce:41
define->typearray[num]={nums};,+
reduce:41
define->typearray[num]={nums};,char
reduce:41
define->typearray[num]={nums};,double
reduce:41
define->typearray[num]={nums};,int
reduce:41
define->typearray[num]={nums};,}
reduce:41
define->typearray[num]={nums};,{
reduce:41
define->typearray[num]={nums};,(
reduce:41
define->typearray[num]={nums};,id
reduce:41
Action Table:
        #      id       (       )       {       }    void       ,     int  double    char       ;       +       -       *       /       %     num  string   array       [       ]  return       =     for   while      >=      <=       <       >      ==      !=      ++      --      if    else  printf   scanf       &
 0    error   error   error   error   error   errorS      5   errorS      7S      8S      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 1 r     13   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 2 r      0   error   error   error   error   errorS      5   errorS      7S      8S      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 3    errorS     11   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 4    errorr      4   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 5    errorr      5   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 6      acc   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 7    errorr     14   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 8    errorr     15   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 9    errorr     16   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
10 r      1   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
11    error   errorS     12   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
12    error   error   errorS     13   error   error   error   errorS      7S      8S      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
13    error   error   error   errorS     16   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
14    error   error   errorS     17   error   error   errorS     18   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
15    errorS     19   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
16    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS     36   errorS     41S     44   error   error   error   error   error   error   error   errorS     48   errorS     52S     53   error
17    error   error   error   errorS     54   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
18    error   error   error   error   error   error   error   errorS      7S      8S      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
19    error   error   errorr      6   error   error   errorr      6   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
20    error   errorS     56   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32r     32   error   error   error   error   error   errorS     57   error   error   error   error   error   error   error   errorS     58S     59   error   error   error   error   error
21    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
22    errorS     20S     21   errorS     22S     70   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS     36   errorS     41S     44   error   error   error   error   error   error   error   errorS     48   errorS     52S     53   error
23    error   error   error   error   errorS     71   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
24    errorS     72   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     73   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
25    error   error   error   error   error   error   error   error   error   error   errorr     34r     34r     34r     34r     34r     34   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
26    error   error   error   error   error   error   error   error   error   error   errorS     75S     76S     77   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
27    errorr     14   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorr     14   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
28    errorr     15   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorr     15   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
29    errorr     16   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorr     16   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
30    errorS     20S     21   errorS     22r     17   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS     36   errorS     41S     44   error   error   error   error   error   error   error   errorS     48   errorS     52S     53   error
31    error   error   error   error   error   error   error   error   error   error   errorr     24r     24r     24S     79S     80S     81   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
32    error   error   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
33    error   error   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
34    error   error   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
35    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
36    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
37    errorr     36r     36   errorr     36r     36   error   errorr     36r     36r     36   errorr     36r     36r     36r     36r     36r     36r     36r     36   error   errorr     36   errorr     36r     36   error   error   error   error   error   error   error   errorr     36   errorr     36r     36   error
38    error   error   error   error   error   error   error   error   error   error   errorS     86   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
39    errorr     49r     49   errorr     49r     49   error   errorr     49r     49r     49   errorr     49r     49r     49r     49r     49r     49r     49r     49   error   errorr     49   errorr     49r     49   error   error   error   error   error   error   error   errorr     49   errorr     49r     49   error
40    errorr     50r     50   errorr     50r     50   error   errorr     50r     50r     50   errorr     50r     50r     50r     50r     50r     50r     50r     50   error   errorr     50   errorr     50r     50   error   error   error   error   error   error   error   errorr     50   errorr     50r     50   error
41    error   errorS     87   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
42    error   error   error   error   error   error   error   error   error   error   errorS     88   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
43    error   errorS     89   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
44    error   errorr     53   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
45    error   error   error   error   error   error   error   error   error   error   errorr     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
46    error   error   error   error   error   error   error   error   error   error   errorr     69   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
47    errorr     72r     72   errorr     72r     72   error   errorr     72r     72r     72   errorr     72r     72r     72r     72r     72r     72r     72r     72   error   errorr     72   errorr     72r     72   error   error   error   error   error   error   error   errorr     72   errorr     72r     72   error
48    error   errorS     90   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
49    errorr     76r     76   errorr     76r     76   error   errorr     76r     76r     76   errorr     76r     76r     76r     76r     76r     76r     76r     76   error   errorr     76   errorr     76r     76   error   error   error   error   error   error   error   errorr     76   errorr     76r     76   error
50    errorr     77r     77   errorr     77r     77   error   errorr     77r     77r     77   errorr     77r     77r     77r     77r     77r     77r     77r     77   error   errorr     77   errorr     77r     77   error   error   error   error   error   error   error   errorr     77   errorr     77r     77   error
51    errorr     78r     78   errorr     78r     78   error   errorr     78r     78r     78   errorr     78r     78r     78r     78r     78r     78r     78r     78   error   errorr     78   errorr     78r     78   error   error   error   error   error   error   error   errorr     78   errorr     78r     78   error
52    error   errorS     91   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
53    error   errorS     92   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
54    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS     36   errorS     41S     44   error   error   error   error   error   error   error   errorS     48   errorS     52S     53   error
55    errorS     94   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
56    errorS     95S     96S     97   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
57    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
58    error   error   error   error   error   error   error   error   error   error   errorr     70   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
59    error   error   error   error   error   error   error   error   error   error   errorr     71   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
60    error   errorS    108r     32   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
61    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
62    error   error   errorr     34   error   error   error   error   error   error   error   errorr     34r     34r     34r     34r     34   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
63    error   error   errorS    110   error   error   error   error   error   error   error   errorS    111S    112   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
64    error   error   errorr     24   error   error   error   error   error   error   error   errorr     24r     24S    113S    114S    115   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
65    error   error   errorr     28   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
66    error   error   errorr     30   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
67    error   error   errorr     31   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
68    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    116   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
69    error   error   error   error   errorS    117   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
70    errorr     20r     20   errorr     20r     20   error   errorr     20r     20r     20   errorr     20r     20r     20r     20r     20r     20r     20r     20   error   errorr     20   errorr     20r     20   error   error   error   error   error   error   error   errorr     20   errorr     20r     20   error
71 r      2   error   error   error   error   errorr      2   errorr      2r      2r      2   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
72    error   error   error   error   error   error   error   error   error   error   errorr     39   error   error   error   error   error   error   error   error   error   error   errorr     39   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
73    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    118   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
74    error   error   error   error   error   error   error   error   error   error   errorS    119   error   error   error   error   error   error   error   error   error   error   errorS    120   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
75    errorr     21r     21   errorr     21r     21   error   errorr     21r     21r     21   errorr     21r     21r     21r     21r     21r     21r     21r     21   error   errorr     21   errorr     21r     21   error   error   error   error   error   error   error   errorr     21   errorr     21r     21   error
76    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
77    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
78    error   error   error   error   errorr     18   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
79    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
80    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
81    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
82    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
83    error   errorS     56   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32r     32   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
84    error   error   error   error   error   error   error   error   error   error   errorS    135S     76S     77   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
85    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    136   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
86    errorr     46r     46   errorr     46r     46   error   errorr     46r     46r     46   errorr     46r     46r     46r     46r     46r     46r     46r     46   error   errorr     46   errorr     46r     46   error   error   error   error   error   error   error   errorr     46   errorr     46r     46   error
87    errorS    137   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    138   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
88    errorr     67r     67   errorr     67r     67   error   errorr     67r     67r     67   errorr     67r     67r     67r     67r     67r     67r     67r     67   error   errorr     67   errorr     67r     67   error   error   error   error   error   error   error   errorr     67   errorr     67r     67   error
89    errorS    141S    142   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    147S    148S    149   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
90    errorS    141S    142   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    147S    148S    149   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
91    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    153   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
92    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    154   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
93    error   error   error   error   errorS    155   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
94    error   error   errorr      7   error   error   errorr      7   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
95    error   errorS    156r     32   error   error   errorr     32   error   error   error   errorr     32r     32r     32r     32r     32   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
96    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
97    error   error   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
98    error   error   errorr     34   error   error   errorr     34   error   error   error   errorr     34r     34r     34r     34r     34   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
99    error   error   errorS    158   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
100    error   error   errorr     10   error   error   errorS    159   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
101    error   error   errorr     12   error   error   errorr     12   error   error   error   errorS    160S    161   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
102    error   error   errorr     24   error   error   errorr     24   error   error   error   errorr     24r     24S    162S    163S    164   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
103    error   error   errorr     28   error   error   errorr     28   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
104    error   error   errorr     30   error   error   errorr     30   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
105    error   error   errorr     31   error   error   errorr     31   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
106    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    165   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
107    error   error   error   error   error   error   error   error   error   error   errorr     47S     76S     77   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
108    errorS     95S     96S    166   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
109    error   error   errorS    168   error   error   error   error   error   error   error   errorS    111S    112   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
110    error   error   error   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
111    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
112    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
113    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
114    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
115    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
116    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
117    errorr     19r     19   errorr     19r     19   error   errorr     19r     19r     19   errorr     19r     19r     19r     19r     19r     19r     19r     19   error   errorr     19   errorr     19r     19   error   error   error   error   error   error   error   errorr     19   errorr     19r     19   error
118    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    175   error   error   errorS    176   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
119    errorr     38r     38   errorr     38r     38   error   errorr     38r     38r     38   errorr     38r     38r     38r     38r     38r     38r     38r     38   error   errorr     38   errorr     38r     38   error   error   error   error   error   error   error   errorr     38   errorr     38r     38   error
120    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
121    error   error   error   error   error   error   error   error   error   error   errorr     22r     22r     22S     79S     80S     81   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
122    error   error   error   error   error   error   error   error   error   error   errorr     23r     23r     23S     79S     80S     81   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
123    error   error   error   error   error   error   error   error   error   error   errorr     25r     25r     25r     25r     25r     25   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
124    error   error   error   error   error   error   error   error   error   error   errorr     26r     26r     26r     26r     26r     26   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
125    error   error   error   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27r     27   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
126    error   errorS    178   error   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32   error   error   error   errorr     32   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
127    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
128    error   error   error   error   error   error   error   error   error   error   error   errorr     34r     34r     34r     34r     34   error   error   error   errorr     34   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
129    error   error   error   error   error   error   error   error   error   error   error   errorS    180S    181   error   error   error   error   error   error   errorS    182   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
130    error   error   error   error   error   error   error   error   error   error   error   errorr     24r     24S    183S    184S    185   error   error   error   errorr     24   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
131    error   error   error   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   errorr     28   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
132    error   error   error   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   errorr     30   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
133    error   error   error   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   errorr     31   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
134    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    186   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
135    errorr     35r     35   errorr     35r     35   error   errorr     35r     35r     35   errorr     35r     35r     35r     35r     35r     35r     35r     35   error   errorr     35   errorr     35r     35   error   error   error   error   error   error   error   errorr     35   errorr     35r     35   error
136    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
137    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     57   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
138    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    188   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
139    error   error   error   error   error   error   error   error   error   error   errorr     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
140    error   error   error   error   error   error   error   error   error   error   errorS    189   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
141    error   errorS    190r     32   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32   error   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32r     32   error   error   error   error   error   error   error
142    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
143    error   error   errorr     34   error   error   error   error   error   error   error   errorr     34r     34r     34r     34r     34   error   error   error   error   error   error   error   error   errorr     34r     34r     34r     34r     34r     34   error   error   error   error   error   error   error
144    error   error   error   error   error   error   error   error   error   error   error   errorS    192S    193   error   error   error   error   error   error   error   error   error   error   error   errorr     64r     64r     64r     64r     64r     64   error   error   error   error   error   error   error
145    error   error   error   error   error   error   error   error   error   error   error   errorr     24r     24S    194S    195S    196   error   error   error   error   error   error   error   error   errorr     24r     24r     24r     24r     24r     24   error   error   error   error   error   error   error
146    error   error   errorr     56   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28r     28   error   error   error   error   error   error   error
147    error   error   errorr     30   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30r     30   error   error   error   error   error   error   error
148    error   error   errorr     31   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31r     31   error   error   error   error   error   error   error
149    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    197   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
150    error   error   errorS    198   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
151    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    200S    201S    202S    203S    204S    205   error   error   error   error   error   error   error
152    error   error   errorS    206   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
153    error   error   errorS    207   error   error   errorS    208   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
154    error   error   errorS    209   error   error   errorS    210   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
155 r      3   error   error   error   error   errorr      3   errorr      3r      3r      3   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
156    errorS     95S     96S    211   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
157    error   error   errorS    213   error   error   error   error   error   error   error   errorS    111S    112   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
158    error   error   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
159    errorS     95S     96   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
160    errorS     95S     96   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
161    errorS     95S     96   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
162    errorS     95S     96   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
163    errorS     95S     96   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
164    errorS     95S     96   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
165    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
166    error   error   errorr      8   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
167    error   error   errorS    221   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
168    error   error   errorr     29   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
169    error   error   errorr     22   error   error   error   error   error   error   error   errorr     22r     22S    113S    114S    115   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
170    error   error   errorr     23   error   error   error   error   error   error   error   errorr     23r     23S    113S    114S    115   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
171    error   error   errorr     25   error   error   error   error   error   error   error   errorr     25r     25r     25r     25r     25   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
172    error   error   errorr     26   error   error   error   error   error   error   error   errorr     26r     26r     26r     26r     26   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
173    error   error   errorr     27   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
174    error   error   error   error   error   error   error   error   error   error   error   errorS    180S    181   error   error   error   error   error   error   errorS    222   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
175    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    223   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
176    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    224   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
177    error   error   error   error   error   error   error   error   error   error   errorS    225S     76S     77   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
178    errorS     95S     96S    226   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
179    error   error   errorS    228   error   error   error   error   error   error   error   errorS    111S    112   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
180    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
181    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
182    error   error   error   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33r     33   error   error   error   error   error   errorS    231   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
183    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
184    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
185    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
186    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
187    error   error   error   error   error   error   error   error   error   error   error   errorS    180S    181   error   error   error   error   error   error   errorS    236   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
188    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
189    errorS    238S    239   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    242S    243S    244   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
190    errorS     95S     96S    247   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
191    error   error   errorS    249   error   error   error   error   error   error   error   errorS    111S    112   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
192    errorS    250S    251   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    255S    256S    257   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
193    errorS    250S    251   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    255S    256S    257   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
194    errorS    250S    251   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    255S    256S    257   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
195    errorS    250S    251   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    255S    256S    257   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
196    errorS    250S    251   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    255S    256S    257   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
197    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
198    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS     36   errorS     41S     44   error   error   error   error   error   error   error   errorS     48   errorS     52S     53   error
199    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
200    errorr     57r     57   error   error   error   error   error   error   error   error   errorr     57r     57r     57r     57r     57r     57r     57r     57   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
201    errorr     58r     58   error   error   error   error   error   error   error   error   errorr     58r     58r     58r     58r     58r     58r     58r     58   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
202    errorr     59r     59   error   error   error   error   error   error   error   error   errorr     59r     59r     59r     59r     59r     59r     59r     59   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
203    errorr     60r     60   error   error   error   error   error   error   error   error   errorr     60r     60r     60r     60r     60r     60r     60r     60   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
204    errorr     61r     61   error   error   error   error   error   error   error   error   errorr     61r     61r     61r     61r     61r     61r     61r     61   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
205    errorr     62r     62   error   error   error   error   error   error   error   error   errorr     62r     62r     62r     62r     62r     62r     62r     62   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
206    errorS     20S     21   errorS    267   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS    271   errorS    276S     44   error   error   error   error   error   error   error   errorS    280   errorS    285S    286   error
207    error   error   error   error   error   error   error   error   error   error   errorS    287   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
208    errorS    288   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    291
209    error   error   error   error   error   error   error   error   error   error   errorS    292   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
210    errorS    288   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    291
211    error   error   errorr      8   error   error   errorr      8   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
212    error   error   errorS    294   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
213    error   error   errorr     29   error   error   errorr     29   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
214    error   error   errorr     11   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
215    error   error   errorr     22   error   error   errorr     22   error   error   error   errorr     22r     22S    162S    163S    164   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
216    error   error   errorr     23   error   error   errorr     23   error   error   error   errorr     23r     23S    162S    163S    164   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
217    error   error   errorr     25   error   error   errorr     25   error   error   error   errorr     25r     25r     25r     25r     25   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
218    error   error   errorr     26   error   error   errorr     26   error   error   error   errorr     26r     26r     26r     26r     26   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
219    error   error   errorr     27   error   error   errorr     27   error   error   error   errorr     27r     27r     27r     27r     27   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
220    error   error   error   error   error   error   error   error   error   error   error   errorS    180S    181   error   error   error   error   error   error   errorS    295   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
221    error   error   errorr      9   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
222    error   error   errorr     33   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
223    error   error   error   error   error   error   error   error   error   error   errorS    296   error   error   error   error   error   error   error   error   error   error   errorS    297   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
224    error   error   error   errorS    298   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
225    errorr     37r     37   errorr     37r     37   error   errorr     37r     37r     37   errorr     37r     37r     37r     37r     37r     37r     37r     37   error   errorr     37   errorr     37r     37   error   error   error   error   error   error   error   errorr     37   errorr     37r     37   error
226    error   error   error   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   errorr      8   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
227    error   error   errorS    299   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
228    error   error   error   error   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   errorr     29   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
229    error   error   error   error   error   error   error   error   error   error   error   errorr     22r     22S    183S    184S    185   error   error   error   errorr     22   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
230    error   error   error   error   error   error   error   error   error   error   error   errorr     23r     23S    183S    184S    185   error   error   error   errorr     23   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
231    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
232    error   error   error   error   error   error   error   error   error   error   error   errorr     25r     25r     25r     25r     25   error   error   error   errorr     25   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
233    error   error   error   error   error   error   error   error   error   error   error   errorr     26r     26r     26r     26r     26   error   error   error   errorr     26   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
234    error   error   error   error   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27   error   error   error   errorr     27   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
235    error   error   error   error   error   error   error   error   error   error   error   errorS    180S    181   error   error   error   error   error   error   errorS    301   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
236    error   error   error   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33r     33   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
237    error   error   error   error   error   error   error   error   error   error   error   errorS    180S    181   error   error   error   error   error   error   errorS    302   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
238    error   errorS    303   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32r     32   error   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32r     32   error   error   error   error   error   error   error
239    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
240    error   error   error   error   error   error   error   error   error   error   errorr     34r     34r     34r     34r     34r     34   error   error   error   error   error   error   error   error   errorr     34r     34r     34r     34r     34r     34   error   error   error   error   error   error   error
241    error   error   error   error   error   error   error   error   error   error   errorr     56r     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28r     28   error   error   error   error   error   error   error
242    error   error   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30r     30   error   error   error   error   error   error   error
243    error   error   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31r     31   error   error   error   error   error   error   error
244    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    305   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
245    error   error   error   error   error   error   error   error   error   error   errorS    306   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
246    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    200S    201S    202S    203S    204S    205   error   error   error   error   error   error   error
247    error   error   errorr      8   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8r      8   error   error   error   error   error   error   error
248    error   error   errorS    308   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
249    error   error   errorr     29   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29r     29   error   error   error   error   error   error   error
250    error   errorS    309   error   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32   error   error   error   error   error   error   error   error   errorr     32r     32r     32r     32r     32r     32   error   error   error   error   error   error   error
251    errorS     60S     61   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     66S     67S     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
252    error   error   error   error   error   error   error   error   error   error   error   errorr     34r     34r     34r     34r     34   error   error   error   error   error   error   error   error   errorr     34r     34r     34r     34r     34r     34   error   error   error   error   error   error   error
253    error   error   error   error   error   error   error   error   error   error   error   errorr     22r     22S    194S    195S    196   error   error   error   error   error   error   error   error   errorr     22r     22r     22r     22r     22r     22   error   error   error   error   error   error   error
254    error   error   error   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28r     28   error   error   error   error   error   error   error
255    error   error   error   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30r     30   error   error   error   error   error   error   error
256    error   error   error   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31r     31   error   error   error   error   error   error   error
257    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    311   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
258    error   error   error   error   error   error   error   error   error   error   error   errorr     23r     23S    194S    195S    196   error   error   error   error   error   error   error   error   errorr     23r     23r     23r     23r     23r     23   error   error   error   error   error   error   error
259    error   error   error   error   error   error   error   error   error   error   error   errorr     25r     25r     25r     25r     25   error   error   error   error   error   error   error   error   errorr     25r     25r     25r     25r     25r     25   error   error   error   error   error   error   error
260    error   error   error   error   error   error   error   error   error   error   error   errorr     26r     26r     26r     26r     26   error   error   error   error   error   error   error   error   errorr     26r     26r     26r     26r     26r     26   error   error   error   error   error   error   error
261    error   error   error   error   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27   error   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27r     27   error   error   error   error   error   error   error
262    error   error   error   error   error   error   error   error   error   error   error   errorS    180S    181   error   error   error   error   error   error   errorS    312   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
263    errorr     54r     54   errorr     54r     54   error   errorr     54r     54r     54   errorr     54r     54r     54r     54r     54r     54r     54r     54   error   errorr     54   errorr     54r     54   error   error   error   error   error   error   error   errorr     54   errorr     54r     54   error
264    errorr     52r     52   errorr     52r     52   error   errorr     52r     52r     52   errorr     52r     52r     52r     52r     52r     52r     52r     52   error   errorr     52   errorr     52r     52   error   error   error   error   error   error   error   errorr     52   errorr     52r     52   error
265    error   error   errorr     63   error   error   error   error   error   error   error   errorS    111S    112   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
266    error   error   errorr     55   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
267    errorS     20S     21   errorS     22S    314   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS     36   errorS     41S     44   error   error   error   error   error   error   error   errorS     48   errorS     52S     53   error
268    errorS     72   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    315   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
269    error   error   error   error   error   error   error   error   error   error   errorS    317S     76S     77   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
270    errorr     73r     73   errorr     73r     73   error   errorr     73r     73r     73   errorr     73r     73r     73r     73r     73r     73r     73r     73   error   errorr     73   errorr     73r     73   error   error   error   error   error   error   error   errorr     73r     75r     73r     73   error
271    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
272    errorr     36r     36   errorr     36r     36   error   errorr     36r     36r     36   errorr     36r     36r     36r     36r     36r     36r     36r     36   error   errorr     36   errorr     36r     36   error   error   error   error   error   error   error   errorr     36r     36r     36r     36   error
273    error   error   error   error   error   error   error   error   error   error   errorS    319   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
274    errorr     49r     49   errorr     49r     49   error   errorr     49r     49r     49   errorr     49r     49r     49r     49r     49r     49r     49r     49   error   errorr     49   errorr     49r     49   error   error   error   error   error   error   error   errorr     49r     49r     49r     49   error
275    errorr     50r     50   errorr     50r     50   error   errorr     50r     50r     50   errorr     50r     50r     50r     50r     50r     50r     50r     50   error   errorr     50   errorr     50r     50   error   error   error   error   error   error   error   errorr     50r     50r     50r     50   error
276    error   errorS    320   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
277    error   error   error   error   error   error   error   error   error   error   errorS    321   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
278    error   errorS    322   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
279    errorr     72r     72   errorr     72r     72   error   errorr     72r     72r     72   errorr     72r     72r     72r     72r     72r     72r     72r     72   error   errorr     72   errorr     72r     72   error   error   error   error   error   error   error   errorr     72r     72r     72r     72   error
280    error   errorS    323   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
281    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    324   error   error   error
282    errorr     76r     76   errorr     76r     76   error   errorr     76r     76r     76   errorr     76r     76r     76r     76r     76r     76r     76r     76   error   errorr     76   errorr     76r     76   error   error   error   error   error   error   error   errorr     76r     76r     76r     76   error
283    errorr     77r     77   errorr     77r     77   error   errorr     77r     77r     77   errorr     77r     77r     77r     77r     77r     77r     77r     77   error   errorr     77   errorr     77r     77   error   error   error   error   error   error   error   errorr     77r     77r     77r     77   error
284    errorr     78r     78   errorr     78r     78   error   errorr     78r     78r     78   errorr     78r     78r     78r     78r     78r     78r     78r     78   error   errorr     78   errorr     78r     78   error   error   error   error   error   error   error   errorr     78r     78r     78r     78   error
285    error   errorS    325   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
286    error   errorS    326   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
287    errorr     79r     79   errorr     79r     79   error   errorr     79r     79r     79   errorr     79r     79r     79r     79r     79r     79r     79r     79   error   errorr     79   errorr     79r     79   error   error   error   error   error   error   error   errorr     79   errorr     79r     79   error
288    error   error   errorr     85   error   error   errorr     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
289    error   error   errorS    327   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
290    error   error   errorr     82   error   error   errorS    328   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
291    errorS    329   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
292    errorr     84r     84   errorr     84r     84   error   errorr     84r     84r     84   errorr     84r     84r     84r     84r     84r     84r     84r     84   error   errorr     84   errorr     84r     84   error   error   error   error   error   error   error   errorr     84   errorr     84r     84   error
293    error   error   errorS    330   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
294    error   error   errorr      9   error   error   errorr      9   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
295    error   error   errorr     33   error   error   errorr     33   error   error   error   errorr     33r     33r     33r     33r     33   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
296    errorr     43r     43   errorr     43r     43   error   errorr     43r     43r     43   errorr     43r     43r     43r     43r     43r     43r     43r     43   error   errorr     43   errorr     43r     43   error   error   error   error   error   error   error   errorr     43   errorr     43r     43   error
297    error   error   error   errorS    331   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
298    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    332S    333   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
299    error   error   error   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   errorr      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
300    error   error   error   error   error   error   error   error   error   error   errorr     48S     76S     77   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
301    error   error   error   error   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33   error   error   error   errorr     33   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
302    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    231   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
303    errorS     95S     96S    335   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
304    error   error   errorS    337   error   error   error   error   error   error   error   errorS    111S    112   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
305    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
306    errorS    339   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
307    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
308    error   error   errorr      9   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9r      9   error   error   error   error   error   error   error
309    errorS     95S     96S    345   error   error   error   error   error   error   error   error   error   error   error   error   errorS    104S    105S    106   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
310    error   error   errorS    347   error   error   error   error   error   error   error   errorS    111S    112   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
311    errorS    126S    127   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    132S    133S    134   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
312    error   error   errorr     33   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33   error   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33r     33   error   error   error   error   error   error   error
313    error   error   error   error   errorS    349   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
314    errorr     20r     20   errorr     20r     20   error   errorr     20r     20r     20   errorr     20r     20r     20r     20r     20r     20r     20r     20   error   errorr     20   errorr     20r     20   error   error   error   error   error   error   error   errorr     20r     20r     20r     20   error
315    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    350   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
316    error   error   error   error   error   error   error   error   error   error   errorS    351   error   error   error   error   error   error   error   error   error   error   errorS    352   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
317    errorr     21r     21   errorr     21r     21   error   errorr     21r     21r     21   errorr     21r     21r     21r     21r     21r     21r     21r     21   error   errorr     21   errorr     21r     21   error   error   error   error   error   error   error   errorr     21r     21r     21r     21   error
318    error   error   error   error   error   error   error   error   error   error   errorS    353S     76S     77   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
319    errorr     46r     46   errorr     46r     46   error   errorr     46r     46r     46   errorr     46r     46r     46r     46r     46r     46r     46r     46   error   errorr     46   errorr     46r     46   error   error   error   error   error   error   error   errorr     46r     46r     46r     46   error
320    errorS    137   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    138   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
321    errorr     67r     67   errorr     67r     67   error   errorr     67r     67r     67   errorr     67r     67r     67r     67r     67r     67r     67r     67   error   errorr     67   errorr     67r     67   error   error   error   error   error   error   error   errorr     67r     67r     67r     67   error
322    errorS    141S    142   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    147S    148S    149   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
323    errorS    141S    142   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    147S    148S    149   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
324    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS     36   errorS     41S     44   error   error   error   error   error   error   error   errorS     48   errorS     52S     53   error
325    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    358   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
326    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    359   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
327    error   error   error   error   error   error   error   error   error   error   errorS    360   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
328    errorS    288   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    291
329    error   error   errorr     86   error   error   errorr     86   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
330    error   error   error   error   error   error   error   error   error   error   errorS    362   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
331    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    332   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
332    error   error   error   error   errorr     45   errorS    364   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
333    error   error   error   error   errorS    365   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
334    error   error   error   error   errorS    366   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
335    error   error   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8r      8   error   error   error   error   error   error   error
336    error   error   errorS    367   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
337    error   error   error   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29r     29   error   error   error   error   error   error   error
338    error   error   error   error   error   error   error   error   error   error   error   errorS    180S    181   error   error   error   error   error   error   errorS    368   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
339    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    369S    370   error   error   error   error   error
340    error   error   errorS    371   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
341    error   error   errorr     68   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
342    error   error   errorr     69   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
343    error   error   error   error   error   error   error   error   error   error   errorr     63S     76S     77   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
344    error   error   error   error   error   error   error   error   error   error   errorr     55   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
345    error   error   error   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8r      8   error   error   error   error   error   error   error
346    error   error   errorS    372   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
347    error   error   error   error   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29r     29   error   error   error   error   error   error   error
348    error   error   error   error   error   error   error   error   error   error   error   errorS    180S    181   error   error   error   error   error   error   errorS    373   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
349    errorr     19r     19   errorr     19r     19   error   errorr     19r     19r     19   errorr     19r     19r     19r     19r     19r     19r     19r     19   error   errorr     19   errorr     19r     19   error   error   error   error   error   error   error   errorr     19r     19r     19r     19   error
350    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    374   error   error   errorS    375   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
351    errorr     38r     38   errorr     38r     38   error   errorr     38r     38r     38   errorr     38r     38r     38r     38r     38r     38r     38r     38   error   errorr     38   errorr     38r     38   error   error   error   error   error   error   error   errorr     38r     38r     38r     38   error
352    errorS     83S     21   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     34S     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
353    errorr     35r     35   errorr     35r     35   error   errorr     35r     35r     35   errorr     35r     35r     35r     35r     35r     35r     35r     35   error   errorr     35   errorr     35r     35   error   error   error   error   error   error   error   errorr     35r     35r     35r     35   error
354    error   error   error   error   error   error   error   error   error   error   errorS    377   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
355    error   error   errorS    378   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
356    error   error   errorS    379   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
357    errorr     74r     74   errorr     74r     74   error   errorr     74r     74r     74   errorr     74r     74r     74r     74r     74r     74r     74r     74   error   errorr     74   errorr     74r     74   error   error   error   error   error   error   error   errorr     74   errorr     74r     74   error
358    error   error   errorS    380   error   error   errorS    381   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
359    error   error   errorS    382   error   error   errorS    383   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
360    errorr     80r     80   errorr     80r     80   error   errorr     80r     80r     80   errorr     80r     80r     80r     80r     80r     80r     80r     80   error   errorr     80   errorr     80r     80   error   error   error   error   error   error   error   errorr     80   errorr     80r     80   error
361    error   error   errorr     81   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
362    errorr     83r     83   errorr     83r     83   error   errorr     83r     83r     83   errorr     83r     83r     83r     83r     83r     83r     83r     83   error   errorr     83   errorr     83r     83   error   error   error   error   error   error   error   errorr     83   errorr     83r     83   error
363    error   error   error   error   errorS    384   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
364    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    332   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
365    error   error   error   error   error   error   error   error   error   error   errorS    386   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
366    error   error   error   error   error   error   error   error   error   error   errorS    387   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
367    error   error   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9r      9   error   error   error   error   error   error   error
368    error   error   error   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33r     33   error   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33r     33   error   error   error   error   error   error   error
369    error   error   errorr     70   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
370    error   error   errorr     71   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
371    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS     36   errorS     41S     44   error   error   error   error   error   error   error   errorS     48   errorS     52S     53   error
372    error   error   error   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9r      9   error   error   error   error   error   error   error
373    error   error   error   error   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33   error   error   error   error   error   error   error   error   errorr     33r     33r     33r     33r     33r     33   error   error   error   error   error   error   error
374    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    390   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
375    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    391   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
376    error   error   error   error   error   error   error   error   error   error   errorS    392S     76S     77   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
377    errorS    238S    239   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    242S    243S    244   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
378    errorS     20S     21   errorS    267   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS    271   errorS    276S     44   error   error   error   error   error   error   error   errorS    280   errorS    285S    286   error
379    errorS     20S     21   errorS    267   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS    271   errorS    276S     44   error   error   error   error   error   error   error   errorS    280   errorS    285S    286   error
380    error   error   error   error   error   error   error   error   error   error   errorS    398   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
381    errorS    288   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    291
382    error   error   error   error   error   error   error   error   error   error   errorS    400   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
383    errorS    288   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    291
384    error   error   error   error   error   error   error   error   error   error   errorS    402   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
385    error   error   error   error   errorr     44   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
386    errorr     40r     40   errorr     40r     40   error   errorr     40r     40r     40   errorr     40r     40r     40r     40r     40r     40r     40r     40   error   errorr     40   errorr     40r     40   error   error   error   error   error   error   error   errorr     40   errorr     40r     40   error
387    errorr     42r     42   errorr     42r     42   error   errorr     42r     42r     42   errorr     42r     42r     42r     42r     42r     42r     42r     42   error   errorr     42   errorr     42r     42   error   error   error   error   error   error   error   errorr     42   errorr     42r     42   error
388    errorr     65r     65   errorr     65r     65   error   errorr     65r     65r     65   errorr     65r     65r     65r     65r     65r     65r     65r     65   error   errorr     65   errorr     65r     65   error   error   error   error   error   error   error   errorr     65   errorr     65r     65   error
389    errorr     51r     51   errorr     51r     51   error   errorr     51r     51r     51   errorr     51r     51r     51r     51r     51r     51r     51r     51   error   errorr     51   errorr     51r     51   error   error   error   error   error   error   error   errorr     51   errorr     51r     51   error
390    error   error   error   error   error   error   error   error   error   error   errorS    403   error   error   error   error   error   error   error   error   error   error   errorS    404   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
391    error   error   error   errorS    405   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
392    errorr     37r     37   errorr     37r     37   error   errorr     37r     37r     37   errorr     37r     37r     37r     37r     37r     37r     37r     37   error   errorr     37   errorr     37r     37   error   error   error   error   error   error   error   errorr     37r     37r     37r     37   error
393    error   error   error   error   error   error   error   error   error   error   errorS    406   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
394    errorr     54r     54   errorr     54r     54   error   errorr     54r     54r     54   errorr     54r     54r     54r     54r     54r     54r     54r     54   error   errorr     54   errorr     54r     54   error   error   error   error   error   error   error   errorr     54r     54r     54r     54   error
395    errorr     52r     52   errorr     52r     52   error   errorr     52r     52r     52   errorr     52r     52r     52r     52r     52r     52r     52r     52   error   errorr     52   errorr     52r     52   error   error   error   error   error   error   error   errorr     52r     52r     52r     52   error
396    errorr     73r     73   errorr     73r     73   error   errorr     73r     73r     73   errorr     73r     73r     73r     73r     73r     73r     73r     73   error   errorr     73   errorr     73r     73   error   error   error   error   error   error   error   errorr     73r     75r     73r     73   error
397    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    407   error   error   error
398    errorr     79r     79   errorr     79r     79   error   errorr     79r     79r     79   errorr     79r     79r     79r     79r     79r     79r     79r     79   error   errorr     79   errorr     79r     79   error   error   error   error   error   error   error   errorr     79r     79r     79r     79   error
399    error   error   errorS    408   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
400    errorr     84r     84   errorr     84r     84   error   errorr     84r     84r     84   errorr     84r     84r     84r     84r     84r     84r     84r     84   error   errorr     84   errorr     84r     84   error   error   error   error   error   error   error   errorr     84r     84r     84r     84   error
401    error   error   errorS    409   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
402    errorr     41r     41   errorr     41r     41   error   errorr     41r     41r     41   errorr     41r     41r     41r     41r     41r     41r     41r     41   error   errorr     41   errorr     41r     41   error   error   error   error   error   error   error   errorr     41   errorr     41r     41   error
403    errorr     43r     43   errorr     43r     43   error   errorr     43r     43r     43   errorr     43r     43r     43r     43r     43r     43r     43r     43   error   errorr     43   errorr     43r     43   error   error   error   error   error   error   error   errorr     43r     43r     43r     43   error
404    error   error   error   errorS    410   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
405    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    332S    411   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
406    errorS    339   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
407    errorS     20S     21   errorS    267   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS    271   errorS    276S     44   error   error   error   error   error   error   error   errorS    280   errorS    285S    286   error
408    error   error   error   error   error   error   error   error   error   error   errorS    415   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
409    error   error   error   error   error   error   error   error   error   error   errorS    416   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
410    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    332   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
411    error   error   error   error   errorS    418   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
412    error   error   error   error   errorS    419   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
413    error   error   errorS    420   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
414    errorr     74r     74   errorr     74r     74   error   errorr     74r     74r     74   errorr     74r     74r     74r     74r     74r     74r     74r     74   error   errorr     74   errorr     74r     74   error   error   error   error   error   error   error   errorr     74r     74r     74r     74   error
415    errorr     80r     80   errorr     80r     80   error   errorr     80r     80r     80   errorr     80r     80r     80r     80r     80r     80r     80r     80   error   errorr     80   errorr     80r     80   error   error   error   error   error   error   error   errorr     80r     80r     80r     80   error
416    errorr     83r     83   errorr     83r     83   error   errorr     83r     83r     83   errorr     83r     83r     83r     83r     83r     83r     83r     83   error   errorr     83   errorr     83r     83   error   error   error   error   error   error   error   errorr     83r     83r     83r     83   error
417    error   error   error   error   errorS    421   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
418    error   error   error   error   error   error   error   error   error   error   errorS    422   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
419    error   error   error   error   error   error   error   error   error   error   errorS    423   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
420    errorS     20S     21   errorS    267   error   error   errorS     27S     28S     29   error   error   error   error   error   errorS     33S     34S     35   error   errorS    271   errorS    276S     44   error   error   error   error   error   error   error   errorS    280   errorS    285S    286   error
421    error   error   error   error   error   error   error   error   error   error   errorS    426   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
422    errorr     40r     40   errorr     40r     40   error   errorr     40r     40r     40   errorr     40r     40r     40r     40r     40r     40r     40r     40   error   errorr     40   errorr     40r     40   error   error   error   error   error   error   error   errorr     40r     40r     40r     40   error
423    errorr     42r     42   errorr     42r     42   error   errorr     42r     42r     42   errorr     42r     42r     42r     42r     42r     42r     42r     42   error   errorr     42   errorr     42r     42   error   error   error   error   error   error   error   errorr     42r     42r     42r     42   error
424    errorr     65r     65   errorr     65r     65   error   errorr     65r     65r     65   errorr     65r     65r     65r     65r     65r     65r     65r     65   error   errorr     65   errorr     65r     65   error   error   error   error   error   error   error   errorr     65r     65r     65r     65   error
425    errorr     51r     51   errorr     51r     51   error   errorr     51r     51r     51   errorr     51r     51r     51r     51r     51r     51r     51r     51   error   errorr     51   errorr     51r     51   error   error   error   error   error   error   error   errorr     51r     51r     51r     51   error
426    errorr     41r     41   errorr     41r     41   error   errorr     41r     41r     41   errorr     41r     41r     41r     41r     41r     41r     41r     41   error   errorr     41   errorr     41r     41   error   error   error   error   error   error   error   errorr     41r     41r     41r     41   error
Goto Table:
      functionfunction_definefunction_type        blockfunction_define_list         typefunction_callfunction_call_list         list            E            S     sentence            T            F       define      id_name         nums    set_valueloop_expressionwhile_expressionfor_set_valuebool_expression     IncorDec  forsentence       while1whilesentence            G           op            HInc_expressionDec_expressionif_expression   ifsentenceinout_expressionprintf_expressionscanf_expression  expressions      getaddr           S'
 0             1             2             3            -1            -1             4            -1            -1            -1            -1             6            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

 2            10             2             3            -1            -1             4            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 









12            -1            -1            -1            -1            14            15            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 



16            -1            -1            -1            23            -1            24            25            -1            -1            26            -1            30            31            32            37            -1            -1            38            39            40            -1            -1            42            -1            43            -1            -1            -1            -1            45            46            47            -1            49            50            51            -1            -1            -1 

18            -1            -1            -1            -1            -1            55            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 


21            -1            -1            -1            -1            -1            -1            62            -1            -1            63            -1            -1            64            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
22            -1            -1            -1            69            -1            24            25            -1            -1            26            -1            30            31            32            37            -1            -1            38            39            40            -1            -1            42            -1            43            -1            -1            -1            -1            45            46            47            -1            49            50            51            -1            -1            -1 

24            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            74            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 





30            -1            -1            -1            78            -1            24            25            -1            -1            26            -1            30            31            32            37            -1            -1            38            39            40            -1            -1            42            -1            43            -1            -1            -1            -1            45            46            47            -1            49            50            51            -1            -1            -1 


33            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 


36            -1            -1            -1            -1            -1            -1            25            -1            -1            84            -1            -1            31            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
37            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 











49            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 




54            -1            -1            -1            93            -1            24            25            -1            -1            26            -1            30            31            32            37            -1            -1            38            39            40            -1            -1            42            -1            43            -1            -1            -1            -1            45            46            47            -1            49            50            51            -1            -1            -1 

56            -1            -1            -1            -1            -1            -1            98            99           100           101            -1            -1           102           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
57            -1            -1            -1            -1            -1            -1            25            -1            -1           107            -1            -1            31            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

59            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

61            -1            -1            -1            -1            -1            -1            62            -1            -1           109            -1            -1            64            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
62            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 


65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 



69            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 






76            -1            -1            -1            -1            -1            -1            25            -1            -1            -1            -1            -1           121            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
77            -1            -1            -1            -1            -1            -1            25            -1            -1            -1            -1            -1           122            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

79            -1            -1            -1            -1            -1            -1            25            -1            -1            -1            -1            -1            -1           123            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
80            -1            -1            -1            -1            -1            -1            25            -1            -1            -1            -1            -1            -1           124            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
81            -1            -1            -1            -1            -1            -1            25            -1            -1            -1            -1            -1            -1           125            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
82            -1            -1            -1            -1            -1            -1           128            -1            -1           129            -1            -1           130           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 




87            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           139            -1            -1           140            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

89            -1            -1            -1            -1            -1            -1           143            -1            -1           144            -1            -1           145           146            -1            -1            -1            -1            -1            -1            -1           150            -1            -1            -1            -1           151            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
90            -1            -1            -1            -1            -1            -1           143            -1            -1           144            -1            -1           145           146            -1            -1            -1            -1            -1            -1            -1           152            -1            -1            -1            -1           151            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 





96            -1            -1            -1            -1            -1            -1            62            -1            -1           157            -1            -1            64            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 



100            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

102            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
104            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
105            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
106            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
107            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
108            -1            -1            -1            -1            -1            -1            98           167           100           101            -1            -1           102           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
109            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
110            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
111            -1            -1            -1            -1            -1            -1            62            -1            -1            -1            -1            -1           169            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
112            -1            -1            -1            -1            -1            -1            62            -1            -1            -1            -1            -1           170            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
113            -1            -1            -1            -1            -1            -1            62            -1            -1            -1            -1            -1            -1           171            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
114            -1            -1            -1            -1            -1            -1            62            -1            -1            -1            -1            -1            -1           172            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
115            -1            -1            -1            -1            -1            -1            62            -1            -1            -1            -1            -1            -1           173            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
116            -1            -1            -1            -1            -1            -1           128            -1            -1           174            -1            -1           130           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
117            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
118            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
119            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
120            -1            -1            -1            -1            -1            -1            25            -1            -1           177            -1            -1            31            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
123            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
124            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
125            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
126            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
127            -1            -1            -1            -1            -1            -1            62            -1            -1           179            -1            -1            64            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
128            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
129            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
130            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

132            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
133            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
134            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
135            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
136            -1            -1            -1            -1            -1            -1           128            -1            -1           187            -1            -1           130           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
137            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
138            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
139            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
140            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

142            -1            -1            -1            -1            -1            -1            62            -1            -1           191            -1            -1            64            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
143            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
144            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
145            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
146            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
147            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
148            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
149            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
150            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
151            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           199            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
152            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
153            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
154            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
155            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
156            -1            -1            -1            -1            -1            -1            98           212           100           101            -1            -1           102           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
157            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
158            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
159            -1            -1            -1            -1            -1            -1            98           214           100           101            -1            -1           102           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
160            -1            -1            -1            -1            -1            -1            98            -1            -1            -1            -1            -1           215           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
161            -1            -1            -1            -1            -1            -1            98            -1            -1            -1            -1            -1           216           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
162            -1            -1            -1            -1            -1            -1            98            -1            -1            -1            -1            -1            -1           217            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
163            -1            -1            -1            -1            -1            -1            98            -1            -1            -1            -1            -1            -1           218            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
164            -1            -1            -1            -1            -1            -1            98            -1            -1            -1            -1            -1            -1           219            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
165            -1            -1            -1            -1            -1            -1           128            -1            -1           220            -1            -1           130           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
166            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
167            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
168            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
169            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
170            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

172            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
173            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
174            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
175            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
176            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
177            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
178            -1            -1            -1            -1            -1            -1            98           227           100           101            -1            -1           102           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
179            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
180            -1            -1            -1            -1            -1            -1           128            -1            -1            -1            -1            -1           229           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
181            -1            -1            -1            -1            -1            -1           128            -1            -1            -1            -1            -1           230           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
182            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
183            -1            -1            -1            -1            -1            -1           128            -1            -1            -1            -1            -1            -1           232            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
184            -1            -1            -1            -1            -1            -1           128            -1            -1            -1            -1            -1            -1           233            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
185            -1            -1            -1            -1            -1            -1           128            -1            -1            -1            -1            -1            -1           234            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
186            -1            -1            -1            -1            -1            -1           128            -1            -1           235            -1            -1           130           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
187            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
188            -1            -1            -1            -1            -1            -1           128            -1            -1           237            -1            -1           130           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
189            -1            -1            -1            -1            -1            -1           240            -1            -1           144            -1            -1           145           241            -1            -1            -1            -1            -1            -1            -1           245            -1            -1            -1            -1           246            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
190            -1            -1            -1            -1            -1            -1            98           248           100           101            -1            -1           102           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

192            -1            -1            -1            -1            -1            -1           252            -1            -1            -1            -1            -1           253           254            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
193            -1            -1            -1            -1            -1            -1           252            -1            -1            -1            -1            -1           258           254            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
194            -1            -1            -1            -1            -1            -1           252            -1            -1            -1            -1            -1            -1           259            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
195            -1            -1            -1            -1            -1            -1           252            -1            -1            -1            -1            -1            -1           260            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
196            -1            -1            -1            -1            -1            -1           252            -1            -1            -1            -1            -1            -1           261            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
197            -1            -1            -1            -1            -1            -1           128            -1            -1           262            -1            -1           130           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
198            -1            -1            -1            -1            -1            24            25            -1            -1            26            -1           263            31            32            37            -1            -1            38            39            40            -1            -1            42            -1            43           264            -1            -1            -1            45            46            47            -1            49            50            51            -1            -1            -1 
199            -1            -1            -1            -1            -1            -1            62            -1            -1           265            -1            -1            64            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           266            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
200            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

202            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
203            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
204            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
205            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
206            -1            -1            -1            -1            -1           268            25            -1            -1           269            -1           270            31            32           272            -1            -1           273           274           275            -1            -1           277            -1           278            -1            -1            -1            -1            45            46           279           281           282           283           284            -1            -1            -1 
207            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
208            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           289           290            -1 
209            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
210            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           293           290            -1 

212            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
213            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
214            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
215            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
216            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
217            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
218            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
219            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
220            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

222            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
223            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
224            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
225            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
226            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
227            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
228            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
229            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
230            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
231            -1            -1            -1            -1            -1            -1            25            -1            -1           300            -1            -1            31            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
232            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
233            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
234            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
235            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
236            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
237            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
238            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
239            -1            -1            -1            -1            -1            -1            62            -1            -1           304            -1            -1            64            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
240            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

242            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
243            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
244            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
245            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
246            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           307            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
247            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
248            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
249            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
250            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
251            -1            -1            -1            -1            -1            -1            62            -1            -1           310            -1            -1            64            65            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
252            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
253            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
254            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
255            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
256            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
257            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
258            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
259            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
260            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

262            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
263            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
264            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
265            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
266            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
267            -1            -1            -1           313            -1            24            25            -1            -1            26            -1            30            31            32            37            -1            -1            38            39            40            -1            -1            42            -1            43            -1            -1            -1            -1            45            46            47            -1            49            50            51            -1            -1            -1 
268            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           316            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
269            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
270            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
271            -1            -1            -1            -1            -1            -1            25            -1            -1           318            -1            -1            31            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
272            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
273            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
274            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
275            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
276            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
277            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
278            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
279            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
280            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

282            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
283            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
284            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
285            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
286            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
287            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
288            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
289            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
290            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

292            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
293            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
294            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
295            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
296            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
297            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
298            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           334            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
299            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
300            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

302            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
303            -1            -1            -1            -1            -1            -1            98           336           100           101            -1            -1           102           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
304            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
305            -1            -1            -1            -1            -1            -1           128            -1            -1           338            -1            -1           130           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
306            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           340            -1            -1            -1            -1            -1            -1           341           342            -1            -1            -1            -1            -1            -1            -1            -1 
307            -1            -1            -1            -1            -1            -1            25            -1            -1           343            -1            -1            31            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           344            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
308            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
309            -1            -1            -1            -1            -1            -1            98           346           100           101            -1            -1           102           103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
310            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
311            -1            -1            -1            -1            -1            -1           128            -1            -1           348            -1            -1           130           131            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
312            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
313            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
314            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
315            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
316            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
317            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
318            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
319            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
320            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           139            -1            -1           354            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

322            -1            -1            -1            -1            -1            -1           143            -1            -1           144            -1            -1           145           146            -1            -1            -1            -1            -1            -1            -1           355            -1            -1            -1            -1           151            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
323            -1            -1            -1            -1            -1            -1           143            -1            -1           144            -1            -1           145           146            -1            -1            -1            -1            -1            -1            -1           356            -1            -1            -1            -1           151            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
324            -1            -1            -1            -1            -1            24            25            -1            -1            26            -1           357            31            32            37            -1            -1            38            39            40            -1            -1            42            -1            43            -1            -1            -1            -1            45            46            47            -1            49            50            51            -1            -1            -1 
325            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
326            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
327            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
328            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           361           290            -1 
329            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
330            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
331            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           363            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
332            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
333            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
334            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
335            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
336            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
337            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
338            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
339            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
340            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

342            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
343            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
344            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
345            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
346            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
347            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
348            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
349            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
350            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

352            -1            -1            -1            -1            -1            -1            25            -1            -1           376            -1            -1            31            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
353            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
354            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
355            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
356            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
357            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
358            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
359            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
360            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

362            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
363            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
364            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           385            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
365            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
366            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
367            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
368            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
369            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
370            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
371            -1            -1            -1            -1            -1            24            25            -1            -1            26            -1           388            31            32            37            -1            -1            38            39            40            -1            -1            42           389            43            -1            -1            -1            -1            45            46            47            -1            49            50            51            -1            -1            -1 
372            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
373            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
374            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
375            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
376            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
377            -1            -1            -1            -1            -1            -1           240            -1            -1           144            -1            -1           145           241            -1            -1            -1            -1            -1            -1            -1           393            -1            -1            -1            -1           246            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
378            -1            -1            -1            -1            -1           268            25            -1            -1           269            -1           394            31            32           272            -1            -1           273           274           275            -1            -1           277            -1           278           395            -1            -1            -1            45            46           279            -1           282           283           284            -1            -1            -1 
379            -1            -1            -1            -1            -1           268            25            -1            -1           269            -1           396            31            32           272            -1            -1           273           274           275            -1            -1           277            -1           278            -1            -1            -1            -1            45            46           279           397           282           283           284            -1            -1            -1 
380            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
381            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           399           290            -1 
382            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
383            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           401           290            -1 
384            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
385            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
386            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
387            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
388            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
389            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
390            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

392            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
393            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
394            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
395            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
396            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
397            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
398            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
399            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
400            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

402            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
403            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
404            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
405            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           412            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
406            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           413            -1            -1            -1            -1            -1            -1           341           342            -1            -1            -1            -1            -1            -1            -1            -1 
407            -1            -1            -1            -1            -1           268            25            -1            -1           269            -1           414            31            32           272            -1            -1           273           274           275            -1            -1           277            -1           278            -1            -1            -1            -1            45            46           279            -1           282           283           284            -1            -1            -1 
408            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
409            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
410            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           417            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

412            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
413            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
414            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
415            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
416            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
417            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
418            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
419            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
420            -1            -1            -1            -1            -1           268            25            -1            -1           269            -1           424            31            32           272            -1            -1           273           274           275            -1            -1           277           425           278            -1            -1            -1            -1            45            46           279            -1           282           283           284            -1            -1            -1 

422            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
423            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
424            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
425            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
426            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
(INT,)
(ID, main)
(LPAREN,)
(RPAREN,)
(LBBRACKET,)
(WHILE,)
(LPAREN,)
(NUM, 2)
(LT,)
(NUM, 1)
(RPAREN,)
(LBBRACKET,)
(PRINTF,)
(LPAREN,)
(STR, asdfasdf
)
(RPAREN,)
(SEMI,)
(RBBRACKET,)
(RETURN,)
(NUM, 0)
(SEMI,)
(RBBRACKET,)
find sentence!
token:int
token:id
规约:index:7 type->int
token:id
规约:index:7 function_type->type
token:id
token:(
token:)
token:{
token:while
token:(
规约:index:11 while1->while
token:(
token:num
token:<
规约:index:2 F->num
token:<
规约:index:7 T->F
token:<
规约:index:7 E->T
token:<
规约:index:7 G->E
token:<
token:num
规约:index:7 op-><
token:num
token:)
规约:index:2 F->num
token:)
规约:index:7 T->F
token:)
规约:index:7 E->T
token:)
规约:index:7 H->E
token:)
规约:index:13 bool_expression->GopH
token:)
token:{
token:printf
token:(
token:string
token:)
token:;
token:}
规约:index:31 printf_expression->printf(string);
token:}
规约:inout_expression->printf_expression
token:}
规约:index:11 sentence->inout_expression
token:}
规约:index:7 block->sentence
token:}
token:return
规约:index:12 sentence->{block}
token:return
规约:index:16 whilesentence->sentence
token:return
规约:index:19 while_expression->while1(bool_expression)whilesentence
token:return
规约:index:11 sentence->while_expression
token:return
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
token:}
规约:index:26 sentence->returnE;
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
规约:index:25 function_define->function_typeid(){block}
规约:function->function_define
规约:S->function
语法分析完成！
string string0[10]
0:(<,2,1,2)
1:(jmp,,,16)
2:(mov,'a',,string0+0)
3:(mov,'s',,string0+1)
4:(mov,'d',,string0+2)
5:(mov,'f',,string0+3)
6:(mov,'a',,string0+4)
7:(mov,'s',,string0+5)
8:(mov,'d',,string0+6)
9:(mov,'f',,string0+7)
10:(mov,10,,string0+8)
11:(mov,0,,string0+9)
12:(lea,string0,,eax)
13:(push,,,eax)
14:(call,,,crt_printf)
15:(jmp,,,0)
16:(mov,0,,eax)
17:(ret,,,)
(INT,)
(ID, main)
(LPAREN,)
(RPAREN,)
(LBBRACKET,)
(WHILE,)
(LPAREN,)
(NUM, 2)
(LT,)
(NUM, 1)
(RPAREN,)
(LBBRACKET,)
(PRINTF,)
(LPAREN,)
(STR, asdfasdf
)
(RPAREN,)
(SEMI,)
(RBBRACKET,)
(RETURN,)
(NUM, 0)
(SEMI,)
(RBBRACKET,)
find sentence!
token:int
token:id
规约:index:7 type->int
token:id
规约:index:7 function_type->type
token:id
token:(
token:)
token:{
token:while
token:(
规约:index:11 while1->while
token:(
token:num
token:<
规约:index:2 F->num
token:<
规约:index:7 T->F
token:<
规约:index:7 E->T
token:<
规约:index:7 G->E
token:<
token:num
规约:index:7 op-><
token:num
token:)
规约:index:2 F->num
token:)
规约:index:7 T->F
token:)
规约:index:7 E->T
token:)
规约:index:7 H->E
token:)
规约:index:13 bool_expression->GopH
token:)
token:{
token:printf
token:(
token:string
token:)
token:;
token:}
规约:index:31 printf_expression->printf(string);
token:}
规约:inout_expression->printf_expression
token:}
规约:index:11 sentence->inout_expression
token:}
规约:index:7 block->sentence
token:}
token:return
规约:index:12 sentence->{block}
token:return
规约:index:16 whilesentence->sentence
token:return
规约:index:19 while_expression->while1(bool_expression)whilesentence
token:return
规约:index:11 sentence->while_expression
token:return
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
token:}
规约:index:26 sentence->returnE;
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
规约:index:25 function_define->function_typeid(){block}
规约:function->function_define
规约:S->function
语法分析完成！
string string0[10]
0:(<,2,1,2)
1:(jmp,,,16)
2:(mov,'a',,string0+0)
3:(mov,'s',,string0+1)
4:(mov,'d',,string0+2)
5:(mov,'f',,string0+3)
6:(mov,'a',,string0+4)
7:(mov,'s',,string0+5)
8:(mov,'d',,string0+6)
9:(mov,'f',,string0+7)
10:(mov,10,,string0+8)
11:(mov,0,,string0+9)
12:(lea,string0,,eax)
13:(push,,,eax)
14:(call,,,crt_printf)
15:(jmp,,,0)
16:(mov,0,,eax)
17:(ret,,,)
(INT,)
(ID, main)
(LPAREN,)
(RPAREN,)
(LBBRACKET,)
(WHILE,)
(LPAREN,)
(NUM, 2)
(GT,)
(NUM, 1)
(RPAREN,)
(LBBRACKET,)
(PRINTF,)
(LPAREN,)
(STR, asdfasdf
)
(RPAREN,)
(SEMI,)
(RBBRACKET,)
(RETURN,)
(NUM, 0)
(SEMI,)
(RBBRACKET,)
find sentence!
token:int
token:id
规约:index:7 type->int
token:id
规约:index:7 function_type->type
token:id
token:(
token:)
token:{
token:while
token:(
规约:index:11 while1->while
token:(
token:num
token:>
规约:index:2 F->num
token:>
规约:index:7 T->F
token:>
规约:index:7 E->T
token:>
规约:index:7 G->E
token:>
token:num
规约:index:7 op->>
token:num
token:)
规约:index:2 F->num
token:)
规约:index:7 T->F
token:)
规约:index:7 E->T
token:)
规约:index:7 H->E
token:)
规约:index:13 bool_expression->GopH
token:)
token:{
token:printf
token:(
token:string
token:)
token:;
token:}
规约:index:31 printf_expression->printf(string);
token:}
规约:inout_expression->printf_expression
token:}
规约:index:11 sentence->inout_expression
token:}
规约:index:7 block->sentence
token:}
token:return
规约:index:12 sentence->{block}
token:return
规约:index:16 whilesentence->sentence
token:return
规约:index:19 while_expression->while1(bool_expression)whilesentence
token:return
规约:index:11 sentence->while_expression
token:return
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
token:}
规约:index:26 sentence->returnE;
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
规约:index:25 function_define->function_typeid(){block}
规约:function->function_define
规约:S->function
语法分析完成！
string string0[10]
0:(>,2,1,2)
1:(jmp,,,16)
2:(mov,'a',,string0+0)
3:(mov,'s',,string0+1)
4:(mov,'d',,string0+2)
5:(mov,'f',,string0+3)
6:(mov,'a',,string0+4)
7:(mov,'s',,string0+5)
8:(mov,'d',,string0+6)
9:(mov,'f',,string0+7)
10:(mov,10,,string0+8)
11:(mov,0,,string0+9)
12:(lea,string0,,eax)
13:(push,,,eax)
14:(call,,,crt_printf)
15:(jmp,,,0)
16:(mov,0,,eax)
17:(ret,,,)
(INT,)
(ID, main)
(LPAREN,)
(RPAREN,)
(LBBRACKET,)
(INT,)
(ARRAY,)
(LMBRACKET,)
(NUM, 6)
(RMBRACKET,)
(ASSIGN,)
(LBBRACKET,)
(NUM, 76)
(COMMA,)
(NUM, 82)
(COMMA,)
(NUM, 90)
(COMMA,)
(NUM, 86)
(COMMA,)
(NUM, 79)
(COMMA,)
(NUM, 62)
(RBBRACKET,)
(SEMI,)
(INT,)
(ARRAY,)
(LMBRACKET,)
(NUM, 6)
(RMBRACKET,)
(ASSIGN,)
(LBBRACKET,)
(NUM, 2)
(COMMA,)
(NUM, 2)
(COMMA,)
(NUM, 1)
(COMMA,)
(NUM, 2)
(COMMA,)
(NUM, 2)
(COMMA,)
(NUM, 3)
(RBBRACKET,)
(SEMI,)
(INT,)
(ID, stu_number)
(SEMI,)
(INT,)
(ID, mean)
(SEMI,)
(INT,)
(ID, sum)
(SEMI,)
(INT,)
(ID, temp)
(SEMI,)
(INT,)
(ID, i)
(SEMI,)
(CHAR,)
(ARRAY,)
(LMBRACKET,)
(RMBRACKET,)
(ASSIGN,)
(LBBRACKET,)
(STR, asdfasdf)
(RBBRACKET,)
(SEMI,)
(PRINTF,)
(LPAREN,)
(STR, please input your student number:)
(RPAREN,)
(SEMI,)
(SCANF,)
(LPAREN,)
(STR, %d)
(COMMA,)
(ADDR,)
(ID, stu_number)
(RPAREN,)
(SEMI,)
(ID, sum)
(ASSIGN,)
(NUM, 0)
(SEMI,)
(ID, temp)
(ASSIGN,)
(NUM, 0)
(SEMI,)
(FOR,)
(LPAREN,)
(ID, i)
(ASSIGN,)
(NUM, 0)
(SEMI,)
(ID, i)
(LT,)
(NUM, 6)
(SEMI,)
(ID, i)
(PLUSPLUS,)
(RPAREN,)
(LBBRACKET,)
(ID, sum)
(ASSIGN,)
(ID, sum)
(PLUS,)
(ARRAY,)
(LMBRACKET,)
(ID, i)
(RMBRACKET,)
(MULTI,)
(ARRAY,)
(LMBRACKET,)
(ID, i)
(RMBRACKET,)
(SEMI,)
(ID, temp)
(ASSIGN,)
(ID, temp)
(PLUS,)
(ARRAY,)
(LMBRACKET,)
(ID, i)
(RMBRACKET,)
(SEMI,)
(RBBRACKET,)
(ID, mean)
(ASSIGN,)
(ID, sum)
(RDIV,)
(ID, temp)
(SEMI,)
(IF,)
(LPAREN,)
(ID, mean)
(GE,)
(NUM, 60)
(RPAREN,)
(LBBRACKET,)
(ID, mean)
(ASSIGN,)
(ID, mean)
(MINUS,)
(NUM, 60)
(SEMI,)
(PRINTF,)
(LPAREN,)
(STR, the score of student number %d is %d higher than 60.
)
(COMMA,)
(ID, stu_number)
(COMMA,)
(ID, mean)
(RPAREN,)
(SEMI,)
(RBBRACKET,)
(ELSE,)
(LBBRACKET,)
(ID, mean)
(ASSIGN,)
(NUM, 60)
(MINUS,)
(ID, mean)
(SEMI,)
(PRINTF,)
(LPAREN,)
(STR, the score of student number %d is %d lower than 60.
)
(COMMA,)
(ID, stu_number)
(COMMA,)
(ID, mean)
(RPAREN,)
(SEMI,)
(RBBRACKET,)
(RETURN,)
(NUM, 0)
(SEMI,)
(RBBRACKET,)
find sentence!
token:int
token:id
规约:index:7 type->int
token:id
规约:index:7 function_type->type
token:id
token:(
token:)
token:{
token:int
token:array
规约:index:7 type->int
token:array
token:[
token:num
token:]
token:=
token:{
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:}
规约:index:7 nums->num
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
token:;
token:int
规约:index:22 define->typearray[num]={nums};
token:int
规约:index:11 sentence->define
token:int
token:array
规约:index:7 type->int
token:array
token:[
token:num
token:]
token:=
token:{
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:}
规约:index:7 nums->num
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
token:;
token:int
规约:index:22 define->typearray[num]={nums};
token:int
规约:index:11 sentence->define
token:int
token:id
规约:index:7 type->int
token:id
token:;
规约:index:7 id_name->id
token:;
token:int
规约:index:1 define->typeid_name;
token:int
规约:index:11 sentence->define
token:int
token:id
规约:index:7 type->int
token:id
token:;
规约:index:7 id_name->id
token:;
token:int
规约:index:1 define->typeid_name;
token:int
规约:index:11 sentence->define
token:int
token:id
规约:index:7 type->int
token:id
token:;
规约:index:7 id_name->id
token:;
token:int
规约:index:1 define->typeid_name;
token:int
规约:index:11 sentence->define
token:int
token:id
规约:index:7 type->int
token:id
token:;
规约:index:7 id_name->id
token:;
token:int
规约:index:1 define->typeid_name;
token:int
规约:index:11 sentence->define
token:int
token:id
规约:index:7 type->int
token:id
token:;
规约:index:7 id_name->id
token:;
token:char
规约:index:1 define->typeid_name;
token:char
规约:index:11 sentence->define
token:char
token:array
规约:index:7 type->char
token:array
token:[
token:]
token:=
token:{
token:string
token:}
token:;
token:printf
规约:index:23 define->typearray[]={string};
token:printf
规约:index:11 sentence->define
token:printf
token:(
token:string
token:)
token:;
token:scanf
规约:index:31 printf_expression->printf(string);
token:scanf
规约:inout_expression->printf_expression
token:scanf
规约:index:11 sentence->inout_expression
token:scanf
token:(
token:string
token:,
token:&
token:id
token:)
规约:index:29 getaddr->&id
token:)
规约:expressions->getaddr
token:)
token:;
token:id
规约:index:32 scanf_expression->scanf(string,expressions);
token:id
规约:inout_expression->scanf_expression
token:id
规约:index:11 sentence->inout_expression
token:id
token:=
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
规约:index:9 set_value->id=E
token:;
token:id
规约:index:11 sentence->set_value;
token:id
token:=
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
规约:index:9 set_value->id=E
token:;
token:for
规约:index:11 sentence->set_value;
token:for
token:(
token:id
token:=
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
规约:index:9 set_value->id=E
token:;
规约:index:11 for_set_value->set_value
token:;
token:id
token:<
规约:index:3 F->id
token:<
规约:index:7 T->F
token:<
规约:index:7 E->T
token:<
规约:index:7 G->E
token:<
token:num
规约:index:7 op-><
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
规约:index:7 H->E
token:;
规约:index:13 bool_expression->GopH
token:;
token:id
token:++
token:)
规约:index:18 Inc_expression->id++
token:)
规约:index:11 IncorDec->Inc_expression
token:)
token:{
token:id
token:=
token:id
token:+
规约:index:3 F->id
token:+
规约:index:7 T->F
token:+
规约:index:7 E->T
token:+
token:array
token:[
token:id
token:]
规约:index:3 F->id
token:]
规约:index:7 T->F
token:]
规约:index:7 E->T
token:]
token:*
规约:index:3 F->array[E]
token:*
规约:index:7 T->F
token:*
token:array
token:[
token:id
token:]
规约:index:3 F->id
token:]
规约:index:7 T->F
token:]
规约:index:7 E->T
token:]
token:;
规约:index:3 F->array[E]
token:;
规约:index:6 T->T*F
token:;
规约:index:6 E->E+T
token:;
规约:index:9 set_value->id=E
token:;
token:id
规约:index:11 sentence->set_value;
token:id
token:=
token:id
token:+
规约:index:3 F->id
token:+
规约:index:7 T->F
token:+
规约:index:7 E->T
token:+
token:array
token:[
token:id
token:]
规约:index:3 F->id
token:]
规约:index:7 T->F
token:]
规约:index:7 E->T
token:]
token:;
规约:index:3 F->array[E]
token:;
规约:index:7 T->F
token:;
规约:index:6 E->E+T
token:;
规约:index:9 set_value->id=E
token:;
token:}
规约:index:11 sentence->set_value;
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
token:id
规约:index:12 sentence->{block}
token:id
规约:index:11 forsentence->sentence
token:id
规约:index:20 loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence
token:id
规约:index:11 sentence->loop_expression
token:id
token:=
token:id
token:/
规约:index:3 F->id
token:/
规约:index:7 T->F
token:/
token:id
token:;
规约:index:3 F->id
token:;
规约:index:6 T->T/F
token:;
规约:index:7 E->T
token:;
规约:index:9 set_value->id=E
token:;
token:if
规约:index:11 sentence->set_value;
token:if
token:(
token:id
token:>=
规约:index:3 F->id
token:>=
规约:index:7 T->F
token:>=
规约:index:7 E->T
token:>=
规约:index:7 G->E
token:>=
token:num
规约:index:7 op->>=
token:num
token:)
规约:index:2 F->num
token:)
规约:index:7 T->F
token:)
规约:index:7 E->T
token:)
规约:index:7 H->E
token:)
规约:index:13 bool_expression->GopH
token:)
token:{
token:id
token:=
token:id
token:-
规约:index:3 F->id
token:-
规约:index:7 T->F
token:-
规约:index:7 E->T
token:-
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:6 E->E-T
token:;
规约:index:9 set_value->id=E
token:;
token:printf
规约:index:11 sentence->set_value;
token:printf
token:(
token:string
token:,
token:id
token:,
规约:index:29 getaddr->id
token:,
token:id
token:)
规约:index:29 getaddr->id
token:)
规约:expressions->getaddr
token:)
规约:expressions->getaddr,expressions
token:)
token:;
token:}
规约:index:31 printf_expression->printf(string,expressions);
token:}
规约:inout_expression->printf_expression
token:}
规约:index:11 sentence->inout_expression
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
token:else
规约:index:12 sentence->{block}
token:else
规约:index:16 ifsentence->sentence
token:else
token:{
token:id
token:=
token:num
token:-
规约:index:2 F->num
token:-
规约:index:7 T->F
token:-
规约:index:7 E->T
token:-
token:id
token:;
规约:index:3 F->id
token:;
规约:index:7 T->F
token:;
规约:index:6 E->E-T
token:;
规约:index:9 set_value->id=E
token:;
token:printf
规约:index:11 sentence->set_value;
token:printf
token:(
token:string
token:,
token:id
token:,
规约:index:29 getaddr->id
token:,
token:id
token:)
规约:index:29 getaddr->id
token:)
规约:expressions->getaddr
token:)
规约:expressions->getaddr,expressions
token:)
token:;
token:}
规约:index:31 printf_expression->printf(string,expressions);
token:}
规约:inout_expression->printf_expression
token:}
规约:index:11 sentence->inout_expression
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
token:return
规约:index:12 sentence->{block}
token:return
规约:index:17 if_expression->if(bool_expression)ifsentenceelsesentence
token:return
规约:index:11 sentence->if_expression
token:return
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
token:}
规约:index:26 sentence->returnE;
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:index:25 function_define->function_typeid(){block}
规约:function->function_define
规约:S->function
语法分析完成！
int score[6]
int credit[6]
int stu_number
int mean
int sum
int temp
int i
char a[9]
string string0[34]
string string1[3]
string string2[54]
string string3[53]
0:(mov,76,,score+0)
1:(mov,82,,score+4)
2:(mov,90,,score+8)
3:(mov,86,,score+12)
4:(mov,79,,score+16)
5:(mov,62,,score+20)
6:(mov,2,,credit+0)
7:(mov,2,,credit+4)
8:(mov,1,,credit+8)
9:(mov,2,,credit+12)
10:(mov,2,,credit+16)
11:(mov,3,,credit+20)
12:(mov,'a',,a+0)
13:(mov,'s',,a+1)
14:(mov,'d',,a+2)
15:(mov,'f',,a+3)
16:(mov,'a',,a+4)
17:(mov,'s',,a+5)
18:(mov,'d',,a+6)
19:(mov,'f',,a+7)
20:(mov,0,,a+8)
21:(mov,'p',,string0+0)
22:(mov,'l',,string0+1)
23:(mov,'e',,string0+2)
24:(mov,'a',,string0+3)
25:(mov,'s',,string0+4)
26:(mov,'e',,string0+5)
27:(mov,' ',,string0+6)
28:(mov,'i',,string0+7)
29:(mov,'n',,string0+8)
30:(mov,'p',,string0+9)
31:(mov,'u',,string0+10)
32:(mov,'t',,string0+11)
33:(mov,' ',,string0+12)
34:(mov,'y',,string0+13)
35:(mov,'o',,string0+14)
36:(mov,'u',,string0+15)
37:(mov,'r',,string0+16)
38:(mov,' ',,string0+17)
39:(mov,'s',,string0+18)
40:(mov,'t',,string0+19)
41:(mov,'u',,string0+20)
42:(mov,'d',,string0+21)
43:(mov,'e',,string0+22)
44:(mov,'n',,string0+23)
45:(mov,'t',,string0+24)
46:(mov,' ',,string0+25)
47:(mov,'n',,string0+26)
48:(mov,'u',,string0+27)
49:(mov,'m',,string0+28)
50:(mov,'b',,string0+29)
51:(mov,'e',,string0+30)
52:(mov,'r',,string0+31)
53:(mov,':',,string0+32)
54:(mov,0,,string0+33)
55:(lea,string0,,eax)
56:(push,,,eax)
57:(call,,,crt_printf)
58:(lea,stu_number,,eax)
59:(push,,,eax)
60:(mov,'%',,string1+0)
61:(mov,'d',,string1+1)
62:(mov,0,,string1+2)
63:(lea,string1,,eax)
64:(push,,,eax)
65:(call,,,crt_scanf)
66:(mov,0,,sum)
67:(mov,0,,temp)
68:(mov,0,,i)
69:(<,i,6,71)
70:(jmp,,,84)
71:(*,i,4,ebx)
72:(mov,score+[ebx],,ebx)
73:(*,i,4,ecx)
74:(mov,credit+[ecx],,ecx)
75:(*,ebx,ecx,edx)
76:(+,sum,edx,ebx)
77:(mov,ebx,,sum)
78:(*,i,4,ebx)
79:(mov,credit+[ebx],,ebx)
80:(+,temp,ebx,ecx)
81:(mov,ecx,,temp)
82:(+,i,1,i)
83:(jmp,,,69)
84:(mov,sum,,ebx)
85:(/,ebx,temp,ebx)
86:(mov,ebx,,mean)
87:(>=,mean,60,89)
88:(jmp,,,151)
89:(-,mean,60,ebx)
90:(mov,ebx,,mean)
91:(push,,,stu_number)
92:(push,,,mean)
93:(mov,'t',,string2+0)
94:(mov,'h',,string2+1)
95:(mov,'e',,string2+2)
96:(mov,' ',,string2+3)
97:(mov,'s',,string2+4)
98:(mov,'c',,string2+5)
99:(mov,'o',,string2+6)
100:(mov,'r',,string2+7)
101:(mov,'e',,string2+8)
102:(mov,' ',,string2+9)
103:(mov,'o',,string2+10)
104:(mov,'f',,string2+11)
105:(mov,' ',,string2+12)
106:(mov,'s',,string2+13)
107:(mov,'t',,string2+14)
108:(mov,'u',,string2+15)
109:(mov,'d',,string2+16)
110:(mov,'e',,string2+17)
111:(mov,'n',,string2+18)
112:(mov,'t',,string2+19)
113:(mov,' ',,string2+20)
114:(mov,'n',,string2+21)
115:(mov,'u',,string2+22)
116:(mov,'m',,string2+23)
117:(mov,'b',,string2+24)
118:(mov,'e',,string2+25)
119:(mov,'r',,string2+26)
120:(mov,' ',,string2+27)
121:(mov,'%',,string2+28)
122:(mov,'d',,string2+29)
123:(mov,' ',,string2+30)
124:(mov,'i',,string2+31)
125:(mov,'s',,string2+32)
126:(mov,' ',,string2+33)
127:(mov,'%',,string2+34)
128:(mov,'d',,string2+35)
129:(mov,' ',,string2+36)
130:(mov,'h',,string2+37)
131:(mov,'i',,string2+38)
132:(mov,'g',,string2+39)
133:(mov,'h',,string2+40)
134:(mov,'e',,string2+41)
135:(mov,'r',,string2+42)
136:(mov,' ',,string2+43)
137:(mov,'t',,string2+44)
138:(mov,'h',,string2+45)
139:(mov,'a',,string2+46)
140:(mov,'n',,string2+47)
141:(mov,' ',,string2+48)
142:(mov,'6',,string2+49)
143:(mov,'0',,string2+50)
144:(mov,'.',,string2+51)
145:(mov,10,,string2+52)
146:(mov,0,,string2+53)
147:(lea,string2,,eax)
148:(push,,,eax)
149:(call,,,crt_printf)
150:(jmp,,,211)
151:(-,60,mean,ebx)
152:(mov,ebx,,mean)
153:(push,,,stu_number)
154:(push,,,mean)
155:(mov,'t',,string3+0)
156:(mov,'h',,string3+1)
157:(mov,'e',,string3+2)
158:(mov,' ',,string3+3)
159:(mov,'s',,string3+4)
160:(mov,'c',,string3+5)
161:(mov,'o',,string3+6)
162:(mov,'r',,string3+7)
163:(mov,'e',,string3+8)
164:(mov,' ',,string3+9)
165:(mov,'o',,string3+10)
166:(mov,'f',,string3+11)
167:(mov,' ',,string3+12)
168:(mov,'s',,string3+13)
169:(mov,'t',,string3+14)
170:(mov,'u',,string3+15)
171:(mov,'d',,string3+16)
172:(mov,'e',,string3+17)
173:(mov,'n',,string3+18)
174:(mov,'t',,string3+19)
175:(mov,' ',,string3+20)
176:(mov,'n',,string3+21)
177:(mov,'u',,string3+22)
178:(mov,'m',,string3+23)
179:(mov,'b',,string3+24)
180:(mov,'e',,string3+25)
181:(mov,'r',,string3+26)
182:(mov,' ',,string3+27)
183:(mov,'%',,string3+28)
184:(mov,'d',,string3+29)
185:(mov,' ',,string3+30)
186:(mov,'i',,string3+31)
187:(mov,'s',,string3+32)
188:(mov,' ',,string3+33)
189:(mov,'%',,string3+34)
190:(mov,'d',,string3+35)
191:(mov,' ',,string3+36)
192:(mov,'l',,string3+37)
193:(mov,'o',,string3+38)
194:(mov,'w',,string3+39)
195:(mov,'e',,string3+40)
196:(mov,'r',,string3+41)
197:(mov,' ',,string3+42)
198:(mov,'t',,string3+43)
199:(mov,'h',,string3+44)
200:(mov,'a',,string3+45)
201:(mov,'n',,string3+46)
202:(mov,' ',,string3+47)
203:(mov,'6',,string3+48)
204:(mov,'0',,string3+49)
205:(mov,'.',,string3+50)
206:(mov,10,,string3+51)
207:(mov,0,,string3+52)
208:(lea,string3,,eax)
209:(push,,,eax)
210:(call,,,crt_printf)
211:(mov,0,,eax)
212:(ret,,,)
