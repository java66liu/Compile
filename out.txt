0:S
1:whilesentence
2:while1
3:while_expression
4:function
5:function_define
6:function_type
7:function_define_list
8:function_call
9:function_call_list
10:type
11:block
12:sentence
13:E
14:T
15:F
16:id_name
17:nums
18:set_value
19:left
20:loop_expression
21:bool_expression
22:op
23:H
24:forsentence
25:for_set_value
26:IncorDec
27:Inc_expression
28:Dec_expression
29:if_expression
30:ifsentence
31:inout_expression
32:printf_expression
33:expressions
34:scanf_expression
35:getaddr
36:G
37:define
38:main
39:else
40:if
41:int
42:double
43:char
44:return
45:void
46:while
47:for
48:<=
49:>=
50:==
51:!=
52:/*
53:*/
54:<
55:>
56:=
57:+
58:-
59:*
60:/
61:;
62:,
63:(
64:)
65:[
66:]
67:{
68:}
69:num
70:id
71:string
72:&
73:++
74:--
75:printf
76:scanf
77:array
function->function_define 
function->function function_define 
function_define->function_type id ( ) { block } 
function_define->function_type id ( function_define_list ) { block } 
function_type->type 
function_type->void 
function_define_list->type id 
function_define_list->function_define_list , type id 
function_call->id ( ) 
function_call->id ( function_call_list ) 
function_call_list->F 
function_call_list->function_call_list , F 
S->function 
index:7 type->int 
index:7 type->double 
index:7 type->char 
index:7 block->sentence 
block->sentence block 
index:12 sentence->{ block } 
index:11 sentence->{ } 
index:11 sentence->E ; 
index:6 E->E + T 
index:6 E->E - T 
index:7 E->T 
index:6 T->T * F 
index:6 T->T / F 
index:7 T->F 
index:8 F->( E ) 
index:2 F->num 
index:3 F->id 
index:3 F->array [ E ] 
index:5 F->function_call 
index:11 sentence->return E ; 
index:11 sentence->define 
index:10 define->type id_name = E ; 
index:1 define->type id_name ; 
index:7 id_name->id 
index:22 define->type array [ num ] = { nums } ; 
index:22 define->type array [ ] = { nums } ; 
index:22 define->type array [ num ] ; 
index:21 nums->num , nums 
index:7 nums->num 
index:11 sentence->set_value ; 
index:9 set_value->id = E 
index:9 set_value->array [ E ] = E 
index:11 sentence->loop_expression 
index:11 sentence->while_expression 
index:20 loop_expression->for ( for_set_value ; bool_expression ; IncorDec ) forsentence 
index:19 while_expression->while1 ( bool_expression ) whilesentence 
index:11 while1->while 
index:16 whilesentence->sentence 
index:13 bool_expression->G op H 
index:14 bool_expression->F 
index:7 op->>= 
index:7 op-><= 
index:7 op->< 
index:7 op->> 
index:7 op->== 
index:7 H->E 
index:7 G->E 
index:11 forsentence->sentence 
index:11 for_set_value->set_value 
index:11 sentence->IncorDec ; 
index:11 IncorDec->Inc_expression 
index:11 IncorDec->Dec_expression 
index:18 Inc_expression->id ++ 
index:18 Dec_expression->id -- 
index:11 sentence->if_expression 
index:15 if_expression->if ( bool_expression ) sentence 
index:17 if_expression->if ( bool_expression ) ifsentence else sentence 
index:16 ifsentence->sentence 
未知元素：i
index:11 sentence->inout_expression 
inout_expression->printf_expression 
inout_expression->scanf_expression 
printf_expression->printf ( string ) ; 
printf_expression->printf ( string , expressions ) ; 
expressions->id , expressions 
expressions->id 
scanf_expression->scanf ( string , getaddr ) ; 
getaddr->& id 
符号集：
0:1 #
1:2 function
2:2 function_define
3:2 function_type
4:1 id
5:1 (
6:1 )
7:1 {
8:2 block
9:1 }
10:2 function_define_list
11:2 type
12:1 void
13:1 ,
14:2 function_call
15:2 function_call_list
16:2 F
17:2 S
18:1 int
19:1 double
20:1 char
21:2 sentence
22:2 E
23:1 ;
24:1 +
25:2 T
26:1 -
27:1 *
28:1 /
29:1 num
30:1 array
31:1 [
32:1 ]
33:1 return
34:2 define
35:2 id_name
36:1 =
37:2 nums
38:2 set_value
39:2 loop_expression
40:2 while_expression
41:1 for
42:2 for_set_value
43:2 bool_expression
44:2 IncorDec
45:2 forsentence
46:2 while1
47:2 whilesentence
48:1 while
49:2 G
50:2 op
51:2 H
52:1 >=
53:1 <=
54:1 <
55:1 >
56:1 ==
57:2 Inc_expression
58:2 Dec_expression
59:1 ++
60:1 --
61:2 if_expression
62:1 if
63:2 ifsentence
64:1 else
65:2 inout_expression
66:2 printf_expression
67:2 scanf_expression
68:1 printf
69:1 string
70:2 expressions
71:1 scanf
72:2 getaddr
73:1 &
74:2 S'
规则集:
function->function_define
function->functionfunction_define
function_define->function_typeid(){block}
function_define->function_typeid(function_define_list){block}
function_type->type
function_type->void
function_define_list->typeid
function_define_list->function_define_list,typeid
function_call->id()
function_call->id(function_call_list)
function_call_list->F
function_call_list->function_call_list,F
S->function
index:7 type->int
index:7 type->double
index:7 type->char
index:7 block->sentence
block->sentenceblock
index:12 sentence->{block}
index:11 sentence->{}
index:11 sentence->E;
index:6 E->E+T
index:6 E->E-T
index:7 E->T
index:6 T->T*F
index:6 T->T/F
index:7 T->F
index:8 F->(E)
index:2 F->num
index:3 F->id
index:3 F->array[E]
index:5 F->function_call
index:11 sentence->returnE;
index:11 sentence->define
index:10 define->typeid_name=E;
index:1 define->typeid_name;
index:7 id_name->id
index:22 define->typearray[num]={nums};
index:22 define->typearray[]={nums};
index:22 define->typearray[num];
index:21 nums->num,nums
index:7 nums->num
index:11 sentence->set_value;
index:9 set_value->id=E
index:9 set_value->array[E]=E
index:11 sentence->loop_expression
index:11 sentence->while_expression
index:20 loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence
index:19 while_expression->while1(bool_expression)whilesentence
index:11 while1->while
index:16 whilesentence->sentence
index:13 bool_expression->GopH
index:14 bool_expression->F
index:7 op->>=
index:7 op-><=
index:7 op-><
index:7 op->>
index:7 op->==
index:7 H->E
index:7 G->E
index:11 forsentence->sentence
index:11 for_set_value->set_value
index:11 sentence->IncorDec;
index:11 IncorDec->Inc_expression
index:11 IncorDec->Dec_expression
index:18 Inc_expression->id++
index:18 Dec_expression->id--
index:11 sentence->if_expression
index:15 if_expression->if(bool_expression)sentence
index:17 if_expression->if(bool_expression)ifsentenceelsesentence
index:16 ifsentence->sentence
index:11 sentence->inout_expression
inout_expression->printf_expression
inout_expression->scanf_expression
printf_expression->printf(string);
printf_expression->printf(string,expressions);
expressions->id,expressions
expressions->id
scanf_expression->scanf(string,getaddr);
getaddr->&id
S'->S
项目集0:
S'->.S,#
type->.char,id
type->.double,id
type->.int,id
S->.function,#
function_type->.void,id
function_type->.type,id
function_define->.function_typeid(function_define_list){block},char
function_define->.function_typeid(function_define_list){block},double
function_define->.function_typeid(function_define_list){block},int
function_define->.function_typeid(function_define_list){block},void
function_define->.function_typeid(function_define_list){block},#
function_define->.function_typeid(){block},char
function_define->.function_typeid(){block},double
function_define->.function_typeid(){block},int
function_define->.function_typeid(){block},void
function_define->.function_typeid(){block},#
function->.functionfunction_define,char
function->.functionfunction_define,double
function->.functionfunction_define,int
function->.functionfunction_define,void
function->.functionfunction_define,#
function->.function_define,char
function->.function_define,double
function->.function_define,int
function->.function_define,void
function->.function_define,#
项目集1:
type->.char,id
type->.double,id
type->.int,id
S->function,#
function_type->.void,id
function_type->.type,id
function_define->.function_typeid(function_define_list){block},char
function_define->.function_typeid(function_define_list){block},double
function_define->.function_typeid(function_define_list){block},int
function_define->.function_typeid(function_define_list){block},void
function_define->.function_typeid(function_define_list){block},#
function_define->.function_typeid(){block},char
function_define->.function_typeid(){block},double
function_define->.function_typeid(){block},int
function_define->.function_typeid(){block},void
function_define->.function_typeid(){block},#
function->function.function_define,char
function->function.function_define,double
function->function.function_define,int
function->function.function_define,void
function->function.function_define,#
项目集2:
function->function_define,char
function->function_define,double
function->function_define,int
function->function_define,void
function->function_define,#
项目集3:
function_define->function_type.id(function_define_list){block},char
function_define->function_type.id(function_define_list){block},double
function_define->function_type.id(function_define_list){block},int
function_define->function_type.id(function_define_list){block},void
function_define->function_type.id(function_define_list){block},#
function_define->function_type.id(){block},char
function_define->function_type.id(){block},double
function_define->function_type.id(){block},int
function_define->function_type.id(){block},void
function_define->function_type.id(){block},#
项目集4:
function_type->type,id
项目集5:
function_type->void,id
项目集6:
S'->S,#
项目集7:
type->int,id
项目集8:
type->double,id
项目集9:
type->char,id
项目集10:
function->functionfunction_define,char
function->functionfunction_define,double
function->functionfunction_define,int
function->functionfunction_define,void
function->functionfunction_define,#
项目集11:
function_define->function_typeid.(function_define_list){block},char
function_define->function_typeid.(function_define_list){block},double
function_define->function_typeid.(function_define_list){block},int
function_define->function_typeid.(function_define_list){block},void
function_define->function_typeid.(function_define_list){block},#
function_define->function_typeid.(){block},char
function_define->function_typeid.(){block},double
function_define->function_typeid.(){block},int
function_define->function_typeid.(){block},void
function_define->function_typeid.(){block},#
项目集12:
type->.char,id
type->.double,id
type->.int,id
function_define_list->.function_define_list,typeid,,
function_define_list->.function_define_list,typeid,)
function_define_list->.typeid,,
function_define_list->.typeid,)
function_define->function_typeid(.function_define_list){block},char
function_define->function_typeid(.function_define_list){block},double
function_define->function_typeid(.function_define_list){block},int
function_define->function_typeid(.function_define_list){block},void
function_define->function_typeid(.function_define_list){block},#
function_define->function_typeid(.){block},char
function_define->function_typeid(.){block},double
function_define->function_typeid(.){block},int
function_define->function_typeid(.){block},void
function_define->function_typeid(.){block},#
项目集13:
function_define->function_typeid().{block},char
function_define->function_typeid().{block},double
function_define->function_typeid().{block},int
function_define->function_typeid().{block},void
function_define->function_typeid().{block},#
项目集14:
function_define_list->function_define_list.,typeid,,
function_define_list->function_define_list.,typeid,)
function_define->function_typeid(function_define_list.){block},char
function_define->function_typeid(function_define_list.){block},double
function_define->function_typeid(function_define_list.){block},int
function_define->function_typeid(function_define_list.){block},void
function_define->function_typeid(function_define_list.){block},#
项目集15:
function_define_list->type.id,,
function_define_list->type.id,)
项目集16:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
function_define->function_typeid(){.block},char
function_define->function_typeid(){.block},double
function_define->function_typeid(){.block},int
function_define->function_typeid(){.block},void
function_define->function_typeid(){.block},#
项目集17:
function_define->function_typeid(function_define_list).{block},char
function_define->function_typeid(function_define_list).{block},double
function_define->function_typeid(function_define_list).{block},int
function_define->function_typeid(function_define_list).{block},void
function_define->function_typeid(function_define_list).{block},#
项目集18:
type->.char,id
type->.double,id
type->.int,id
function_define_list->function_define_list,.typeid,,
function_define_list->function_define_list,.typeid,)
项目集19:
function_define_list->typeid,,
function_define_list->typeid,)
项目集20:
Dec_expression->id.--,;
Inc_expression->id.++,;
set_value->id.=E,;
F->id,/
F->id,*
F->id,-
F->id,+
F->id,;
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目集21:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集22:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->{.},scanf
sentence->{.},printf
sentence->{.},if
sentence->{.},while
sentence->{.},for
sentence->{.},return
sentence->{.},array
sentence->{.},num
sentence->{.},/
sentence->{.},*
sentence->{.},-
sentence->{.},+
sentence->{.},char
sentence->{.},double
sentence->{.},int
sentence->{.},}
sentence->{.},{
sentence->{.},(
sentence->{.},id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->{.block},scanf
sentence->{.block},printf
sentence->{.block},if
sentence->{.block},while
sentence->{.block},for
sentence->{.block},return
sentence->{.block},array
sentence->{.block},num
sentence->{.block},/
sentence->{.block},*
sentence->{.block},-
sentence->{.block},+
sentence->{.block},char
sentence->{.block},double
sentence->{.block},int
sentence->{.block},}
sentence->{.block},{
sentence->{.block},(
sentence->{.block},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集23:
function_define->function_typeid(){block.},char
function_define->function_typeid(){block.},double
function_define->function_typeid(){block.},int
function_define->function_typeid(){block.},void
function_define->function_typeid(){block.},#
项目集24:
define->type.array[num];,scanf
define->type.array[num];,printf
define->type.array[num];,if
define->type.array[num];,while
define->type.array[num];,for
define->type.array[num];,return
define->type.array[num];,array
define->type.array[num];,num
define->type.array[num];,/
define->type.array[num];,*
define->type.array[num];,-
define->type.array[num];,+
define->type.array[num];,char
define->type.array[num];,double
define->type.array[num];,int
define->type.array[num];,}
define->type.array[num];,{
define->type.array[num];,(
define->type.array[num];,id
define->type.array[]={nums};,scanf
define->type.array[]={nums};,printf
define->type.array[]={nums};,if
define->type.array[]={nums};,while
define->type.array[]={nums};,for
define->type.array[]={nums};,return
define->type.array[]={nums};,array
define->type.array[]={nums};,num
define->type.array[]={nums};,/
define->type.array[]={nums};,*
define->type.array[]={nums};,-
define->type.array[]={nums};,+
define->type.array[]={nums};,char
define->type.array[]={nums};,double
define->type.array[]={nums};,int
define->type.array[]={nums};,}
define->type.array[]={nums};,{
define->type.array[]={nums};,(
define->type.array[]={nums};,id
define->type.array[num]={nums};,scanf
define->type.array[num]={nums};,printf
define->type.array[num]={nums};,if
define->type.array[num]={nums};,while
define->type.array[num]={nums};,for
define->type.array[num]={nums};,return
define->type.array[num]={nums};,array
define->type.array[num]={nums};,num
define->type.array[num]={nums};,/
define->type.array[num]={nums};,*
define->type.array[num]={nums};,-
define->type.array[num]={nums};,+
define->type.array[num]={nums};,char
define->type.array[num]={nums};,double
define->type.array[num]={nums};,int
define->type.array[num]={nums};,}
define->type.array[num]={nums};,{
define->type.array[num]={nums};,(
define->type.array[num]={nums};,id
id_name->.id,=
id_name->.id,;
define->type.id_name;,scanf
define->type.id_name;,printf
define->type.id_name;,if
define->type.id_name;,while
define->type.id_name;,for
define->type.id_name;,return
define->type.id_name;,array
define->type.id_name;,num
define->type.id_name;,/
define->type.id_name;,*
define->type.id_name;,-
define->type.id_name;,+
define->type.id_name;,char
define->type.id_name;,double
define->type.id_name;,int
define->type.id_name;,}
define->type.id_name;,{
define->type.id_name;,(
define->type.id_name;,id
define->type.id_name=E;,scanf
define->type.id_name=E;,printf
define->type.id_name=E;,if
define->type.id_name=E;,while
define->type.id_name=E;,for
define->type.id_name=E;,return
define->type.id_name=E;,array
define->type.id_name=E;,num
define->type.id_name=E;,/
define->type.id_name=E;,*
define->type.id_name=E;,-
define->type.id_name=E;,+
define->type.id_name=E;,char
define->type.id_name=E;,double
define->type.id_name=E;,int
define->type.id_name=E;,}
define->type.id_name=E;,{
define->type.id_name=E;,(
define->type.id_name=E;,id
项目集25:
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
F->function_call,;
项目集26:
T->F,/
T->F,*
T->F,-
T->F,+
T->F,;
项目集27:
type->int,array
type->int,id
项目集28:
type->double,array
type->double,id
项目集29:
type->char,array
type->char,id
项目集30:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->sentence.block,}
block->.sentenceblock,}
block->sentence,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集31:
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
sentence->E.;,scanf
sentence->E.;,printf
sentence->E.;,if
sentence->E.;,while
sentence->E.;,for
sentence->E.;,return
sentence->E.;,array
sentence->E.;,num
sentence->E.;,/
sentence->E.;,*
sentence->E.;,-
sentence->E.;,+
sentence->E.;,char
sentence->E.;,double
sentence->E.;,int
sentence->E.;,}
sentence->E.;,{
sentence->E.;,(
sentence->E.;,id
项目集32:
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->T,-
E->T,+
E->T,;
项目集33:
F->num,/
F->num,*
F->num,-
F->num,+
F->num,;
项目集34:
set_value->array.[E]=E,;
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目集35:
sentence->return.E;,scanf
sentence->return.E;,printf
sentence->return.E;,if
sentence->return.E;,while
sentence->return.E;,for
sentence->return.E;,return
sentence->return.E;,array
sentence->return.E;,num
sentence->return.E;,/
sentence->return.E;,*
sentence->return.E;,-
sentence->return.E;,+
sentence->return.E;,char
sentence->return.E;,double
sentence->return.E;,int
sentence->return.E;,}
sentence->return.E;,{
sentence->return.E;,(
sentence->return.E;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集36:
sentence->define,scanf
sentence->define,printf
sentence->define,if
sentence->define,while
sentence->define,for
sentence->define,return
sentence->define,array
sentence->define,num
sentence->define,/
sentence->define,*
sentence->define,-
sentence->define,+
sentence->define,char
sentence->define,double
sentence->define,int
sentence->define,}
sentence->define,{
sentence->define,(
sentence->define,id
项目集37:
sentence->set_value.;,scanf
sentence->set_value.;,printf
sentence->set_value.;,if
sentence->set_value.;,while
sentence->set_value.;,for
sentence->set_value.;,return
sentence->set_value.;,array
sentence->set_value.;,num
sentence->set_value.;,/
sentence->set_value.;,*
sentence->set_value.;,-
sentence->set_value.;,+
sentence->set_value.;,char
sentence->set_value.;,double
sentence->set_value.;,int
sentence->set_value.;,}
sentence->set_value.;,{
sentence->set_value.;,(
sentence->set_value.;,id
项目集38:
sentence->loop_expression,scanf
sentence->loop_expression,printf
sentence->loop_expression,if
sentence->loop_expression,while
sentence->loop_expression,for
sentence->loop_expression,return
sentence->loop_expression,array
sentence->loop_expression,num
sentence->loop_expression,/
sentence->loop_expression,*
sentence->loop_expression,-
sentence->loop_expression,+
sentence->loop_expression,char
sentence->loop_expression,double
sentence->loop_expression,int
sentence->loop_expression,}
sentence->loop_expression,{
sentence->loop_expression,(
sentence->loop_expression,id
项目集39:
sentence->while_expression,scanf
sentence->while_expression,printf
sentence->while_expression,if
sentence->while_expression,while
sentence->while_expression,for
sentence->while_expression,return
sentence->while_expression,array
sentence->while_expression,num
sentence->while_expression,/
sentence->while_expression,*
sentence->while_expression,-
sentence->while_expression,+
sentence->while_expression,char
sentence->while_expression,double
sentence->while_expression,int
sentence->while_expression,}
sentence->while_expression,{
sentence->while_expression,(
sentence->while_expression,id
项目集40:
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,id
项目集41:
sentence->IncorDec.;,scanf
sentence->IncorDec.;,printf
sentence->IncorDec.;,if
sentence->IncorDec.;,while
sentence->IncorDec.;,for
sentence->IncorDec.;,return
sentence->IncorDec.;,array
sentence->IncorDec.;,num
sentence->IncorDec.;,/
sentence->IncorDec.;,*
sentence->IncorDec.;,-
sentence->IncorDec.;,+
sentence->IncorDec.;,char
sentence->IncorDec.;,double
sentence->IncorDec.;,int
sentence->IncorDec.;,}
sentence->IncorDec.;,{
sentence->IncorDec.;,(
sentence->IncorDec.;,id
项目集42:
while_expression->while1.(bool_expression)whilesentence,scanf
while_expression->while1.(bool_expression)whilesentence,printf
while_expression->while1.(bool_expression)whilesentence,if
while_expression->while1.(bool_expression)whilesentence,while
while_expression->while1.(bool_expression)whilesentence,for
while_expression->while1.(bool_expression)whilesentence,return
while_expression->while1.(bool_expression)whilesentence,array
while_expression->while1.(bool_expression)whilesentence,num
while_expression->while1.(bool_expression)whilesentence,/
while_expression->while1.(bool_expression)whilesentence,*
while_expression->while1.(bool_expression)whilesentence,-
while_expression->while1.(bool_expression)whilesentence,+
while_expression->while1.(bool_expression)whilesentence,char
while_expression->while1.(bool_expression)whilesentence,double
while_expression->while1.(bool_expression)whilesentence,int
while_expression->while1.(bool_expression)whilesentence,}
while_expression->while1.(bool_expression)whilesentence,{
while_expression->while1.(bool_expression)whilesentence,(
while_expression->while1.(bool_expression)whilesentence,id
项目集43:
while1->while,(
项目集44:
IncorDec->Inc_expression,;
项目集45:
IncorDec->Dec_expression,;
项目集46:
sentence->if_expression,scanf
sentence->if_expression,printf
sentence->if_expression,if
sentence->if_expression,while
sentence->if_expression,for
sentence->if_expression,return
sentence->if_expression,array
sentence->if_expression,num
sentence->if_expression,/
sentence->if_expression,*
sentence->if_expression,-
sentence->if_expression,+
sentence->if_expression,char
sentence->if_expression,double
sentence->if_expression,int
sentence->if_expression,}
sentence->if_expression,{
sentence->if_expression,(
sentence->if_expression,id
项目集47:
if_expression->if.(bool_expression)ifsentenceelsesentence,scanf
if_expression->if.(bool_expression)ifsentenceelsesentence,printf
if_expression->if.(bool_expression)ifsentenceelsesentence,if
if_expression->if.(bool_expression)ifsentenceelsesentence,while
if_expression->if.(bool_expression)ifsentenceelsesentence,for
if_expression->if.(bool_expression)ifsentenceelsesentence,return
if_expression->if.(bool_expression)ifsentenceelsesentence,array
if_expression->if.(bool_expression)ifsentenceelsesentence,num
if_expression->if.(bool_expression)ifsentenceelsesentence,/
if_expression->if.(bool_expression)ifsentenceelsesentence,*
if_expression->if.(bool_expression)ifsentenceelsesentence,-
if_expression->if.(bool_expression)ifsentenceelsesentence,+
if_expression->if.(bool_expression)ifsentenceelsesentence,char
if_expression->if.(bool_expression)ifsentenceelsesentence,double
if_expression->if.(bool_expression)ifsentenceelsesentence,int
if_expression->if.(bool_expression)ifsentenceelsesentence,}
if_expression->if.(bool_expression)ifsentenceelsesentence,{
if_expression->if.(bool_expression)ifsentenceelsesentence,(
if_expression->if.(bool_expression)ifsentenceelsesentence,id
if_expression->if.(bool_expression)sentence,scanf
if_expression->if.(bool_expression)sentence,printf
if_expression->if.(bool_expression)sentence,if
if_expression->if.(bool_expression)sentence,while
if_expression->if.(bool_expression)sentence,for
if_expression->if.(bool_expression)sentence,return
if_expression->if.(bool_expression)sentence,array
if_expression->if.(bool_expression)sentence,num
if_expression->if.(bool_expression)sentence,/
if_expression->if.(bool_expression)sentence,*
if_expression->if.(bool_expression)sentence,-
if_expression->if.(bool_expression)sentence,+
if_expression->if.(bool_expression)sentence,char
if_expression->if.(bool_expression)sentence,double
if_expression->if.(bool_expression)sentence,int
if_expression->if.(bool_expression)sentence,}
if_expression->if.(bool_expression)sentence,{
if_expression->if.(bool_expression)sentence,(
if_expression->if.(bool_expression)sentence,id
项目集48:
sentence->inout_expression,scanf
sentence->inout_expression,printf
sentence->inout_expression,if
sentence->inout_expression,while
sentence->inout_expression,for
sentence->inout_expression,return
sentence->inout_expression,array
sentence->inout_expression,num
sentence->inout_expression,/
sentence->inout_expression,*
sentence->inout_expression,-
sentence->inout_expression,+
sentence->inout_expression,char
sentence->inout_expression,double
sentence->inout_expression,int
sentence->inout_expression,}
sentence->inout_expression,{
sentence->inout_expression,(
sentence->inout_expression,id
项目集49:
inout_expression->printf_expression,scanf
inout_expression->printf_expression,printf
inout_expression->printf_expression,if
inout_expression->printf_expression,while
inout_expression->printf_expression,for
inout_expression->printf_expression,return
inout_expression->printf_expression,array
inout_expression->printf_expression,num
inout_expression->printf_expression,/
inout_expression->printf_expression,*
inout_expression->printf_expression,-
inout_expression->printf_expression,+
inout_expression->printf_expression,char
inout_expression->printf_expression,double
inout_expression->printf_expression,int
inout_expression->printf_expression,}
inout_expression->printf_expression,{
inout_expression->printf_expression,(
inout_expression->printf_expression,id
项目集50:
inout_expression->scanf_expression,scanf
inout_expression->scanf_expression,printf
inout_expression->scanf_expression,if
inout_expression->scanf_expression,while
inout_expression->scanf_expression,for
inout_expression->scanf_expression,return
inout_expression->scanf_expression,array
inout_expression->scanf_expression,num
inout_expression->scanf_expression,/
inout_expression->scanf_expression,*
inout_expression->scanf_expression,-
inout_expression->scanf_expression,+
inout_expression->scanf_expression,char
inout_expression->scanf_expression,double
inout_expression->scanf_expression,int
inout_expression->scanf_expression,}
inout_expression->scanf_expression,{
inout_expression->scanf_expression,(
inout_expression->scanf_expression,id
项目集51:
printf_expression->printf.(string,expressions);,scanf
printf_expression->printf.(string,expressions);,printf
printf_expression->printf.(string,expressions);,if
printf_expression->printf.(string,expressions);,while
printf_expression->printf.(string,expressions);,for
printf_expression->printf.(string,expressions);,return
printf_expression->printf.(string,expressions);,array
printf_expression->printf.(string,expressions);,num
printf_expression->printf.(string,expressions);,/
printf_expression->printf.(string,expressions);,*
printf_expression->printf.(string,expressions);,-
printf_expression->printf.(string,expressions);,+
printf_expression->printf.(string,expressions);,char
printf_expression->printf.(string,expressions);,double
printf_expression->printf.(string,expressions);,int
printf_expression->printf.(string,expressions);,}
printf_expression->printf.(string,expressions);,{
printf_expression->printf.(string,expressions);,(
printf_expression->printf.(string,expressions);,id
printf_expression->printf.(string);,scanf
printf_expression->printf.(string);,printf
printf_expression->printf.(string);,if
printf_expression->printf.(string);,while
printf_expression->printf.(string);,for
printf_expression->printf.(string);,return
printf_expression->printf.(string);,array
printf_expression->printf.(string);,num
printf_expression->printf.(string);,/
printf_expression->printf.(string);,*
printf_expression->printf.(string);,-
printf_expression->printf.(string);,+
printf_expression->printf.(string);,char
printf_expression->printf.(string);,double
printf_expression->printf.(string);,int
printf_expression->printf.(string);,}
printf_expression->printf.(string);,{
printf_expression->printf.(string);,(
printf_expression->printf.(string);,id
项目集52:
scanf_expression->scanf.(string,getaddr);,scanf
scanf_expression->scanf.(string,getaddr);,printf
scanf_expression->scanf.(string,getaddr);,if
scanf_expression->scanf.(string,getaddr);,while
scanf_expression->scanf.(string,getaddr);,for
scanf_expression->scanf.(string,getaddr);,return
scanf_expression->scanf.(string,getaddr);,array
scanf_expression->scanf.(string,getaddr);,num
scanf_expression->scanf.(string,getaddr);,/
scanf_expression->scanf.(string,getaddr);,*
scanf_expression->scanf.(string,getaddr);,-
scanf_expression->scanf.(string,getaddr);,+
scanf_expression->scanf.(string,getaddr);,char
scanf_expression->scanf.(string,getaddr);,double
scanf_expression->scanf.(string,getaddr);,int
scanf_expression->scanf.(string,getaddr);,}
scanf_expression->scanf.(string,getaddr);,{
scanf_expression->scanf.(string,getaddr);,(
scanf_expression->scanf.(string,getaddr);,id
项目集53:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
function_define->function_typeid(function_define_list){.block},char
function_define->function_typeid(function_define_list){.block},double
function_define->function_typeid(function_define_list){.block},int
function_define->function_typeid(function_define_list){.block},void
function_define->function_typeid(function_define_list){.block},#
项目集54:
function_define_list->function_define_list,type.id,,
function_define_list->function_define_list,type.id,)
项目集55:
F->.function_call,,
F->.function_call,)
F->.array[E],,
F->.array[E],)
F->.id,,
F->.id,)
F->.num,,
F->.num,)
F->.(E),,
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),;
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),;
function_call->.id(),,
function_call->.id(),)
项目集56:
set_value->id=.E,;
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集57:
Inc_expression->id++,;
项目集58:
Dec_expression->id--,;
项目集59:
F->id,/
F->id,*
F->id,-
F->id,+
F->id,)
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),)
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),)
项目集60:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),)
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集61:
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
F->function_call,)
项目集62:
T->F,/
T->F,*
T->F,-
T->F,+
T->F,)
项目集63:
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),;
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集64:
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->T,-
E->T,+
E->T,)
项目集65:
F->num,/
F->num,*
F->num,-
F->num,+
F->num,)
项目集66:
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],)
项目集67:
sentence->{block.},scanf
sentence->{block.},printf
sentence->{block.},if
sentence->{block.},while
sentence->{block.},for
sentence->{block.},return
sentence->{block.},array
sentence->{block.},num
sentence->{block.},/
sentence->{block.},*
sentence->{block.},-
sentence->{block.},+
sentence->{block.},char
sentence->{block.},double
sentence->{block.},int
sentence->{block.},}
sentence->{block.},{
sentence->{block.},(
sentence->{block.},id
项目集68:
sentence->{},scanf
sentence->{},printf
sentence->{},if
sentence->{},while
sentence->{},for
sentence->{},return
sentence->{},array
sentence->{},num
sentence->{},/
sentence->{},*
sentence->{},-
sentence->{},+
sentence->{},char
sentence->{},double
sentence->{},int
sentence->{},}
sentence->{},{
sentence->{},(
sentence->{},id
项目集69:
function_define->function_typeid(){block},char
function_define->function_typeid(){block},double
function_define->function_typeid(){block},int
function_define->function_typeid(){block},void
function_define->function_typeid(){block},#
项目集70:
id_name->id,=
id_name->id,;
项目集71:
define->typearray.[num];,scanf
define->typearray.[num];,printf
define->typearray.[num];,if
define->typearray.[num];,while
define->typearray.[num];,for
define->typearray.[num];,return
define->typearray.[num];,array
define->typearray.[num];,num
define->typearray.[num];,/
define->typearray.[num];,*
define->typearray.[num];,-
define->typearray.[num];,+
define->typearray.[num];,char
define->typearray.[num];,double
define->typearray.[num];,int
define->typearray.[num];,}
define->typearray.[num];,{
define->typearray.[num];,(
define->typearray.[num];,id
define->typearray.[]={nums};,scanf
define->typearray.[]={nums};,printf
define->typearray.[]={nums};,if
define->typearray.[]={nums};,while
define->typearray.[]={nums};,for
define->typearray.[]={nums};,return
define->typearray.[]={nums};,array
define->typearray.[]={nums};,num
define->typearray.[]={nums};,/
define->typearray.[]={nums};,*
define->typearray.[]={nums};,-
define->typearray.[]={nums};,+
define->typearray.[]={nums};,char
define->typearray.[]={nums};,double
define->typearray.[]={nums};,int
define->typearray.[]={nums};,}
define->typearray.[]={nums};,{
define->typearray.[]={nums};,(
define->typearray.[]={nums};,id
define->typearray.[num]={nums};,scanf
define->typearray.[num]={nums};,printf
define->typearray.[num]={nums};,if
define->typearray.[num]={nums};,while
define->typearray.[num]={nums};,for
define->typearray.[num]={nums};,return
define->typearray.[num]={nums};,array
define->typearray.[num]={nums};,num
define->typearray.[num]={nums};,/
define->typearray.[num]={nums};,*
define->typearray.[num]={nums};,-
define->typearray.[num]={nums};,+
define->typearray.[num]={nums};,char
define->typearray.[num]={nums};,double
define->typearray.[num]={nums};,int
define->typearray.[num]={nums};,}
define->typearray.[num]={nums};,{
define->typearray.[num]={nums};,(
define->typearray.[num]={nums};,id
项目集72:
define->typeid_name.;,scanf
define->typeid_name.;,printf
define->typeid_name.;,if
define->typeid_name.;,while
define->typeid_name.;,for
define->typeid_name.;,return
define->typeid_name.;,array
define->typeid_name.;,num
define->typeid_name.;,/
define->typeid_name.;,*
define->typeid_name.;,-
define->typeid_name.;,+
define->typeid_name.;,char
define->typeid_name.;,double
define->typeid_name.;,int
define->typeid_name.;,}
define->typeid_name.;,{
define->typeid_name.;,(
define->typeid_name.;,id
define->typeid_name.=E;,scanf
define->typeid_name.=E;,printf
define->typeid_name.=E;,if
define->typeid_name.=E;,while
define->typeid_name.=E;,for
define->typeid_name.=E;,return
define->typeid_name.=E;,array
define->typeid_name.=E;,num
define->typeid_name.=E;,/
define->typeid_name.=E;,*
define->typeid_name.=E;,-
define->typeid_name.=E;,+
define->typeid_name.=E;,char
define->typeid_name.=E;,double
define->typeid_name.=E;,int
define->typeid_name.=E;,}
define->typeid_name.=E;,{
define->typeid_name.=E;,(
define->typeid_name.=E;,id
项目集73:
block->sentenceblock,}
项目集74:
sentence->E;,scanf
sentence->E;,printf
sentence->E;,if
sentence->E;,while
sentence->E;,for
sentence->E;,return
sentence->E;,array
sentence->E;,num
sentence->E;,/
sentence->E;,*
sentence->E;,-
sentence->E;,+
sentence->E;,char
sentence->E;,double
sentence->E;,int
sentence->E;,}
sentence->E;,{
sentence->E;,(
sentence->E;,id
项目集75:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->E+.T,-
E->E+.T,+
E->E+.T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集76:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->E-.T,-
E->E-.T,+
E->E-.T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集77:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集78:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集79:
set_value->array[.E]=E,;
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集80:
F->id,/
F->id,*
F->id,-
F->id,+
F->id,;
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目集81:
sentence->returnE.;,scanf
sentence->returnE.;,printf
sentence->returnE.;,if
sentence->returnE.;,while
sentence->returnE.;,for
sentence->returnE.;,return
sentence->returnE.;,array
sentence->returnE.;,num
sentence->returnE.;,/
sentence->returnE.;,*
sentence->returnE.;,-
sentence->returnE.;,+
sentence->returnE.;,char
sentence->returnE.;,double
sentence->returnE.;,int
sentence->returnE.;,}
sentence->returnE.;,{
sentence->returnE.;,(
sentence->returnE.;,id
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集82:
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目集83:
sentence->set_value;,scanf
sentence->set_value;,printf
sentence->set_value;,if
sentence->set_value;,while
sentence->set_value;,for
sentence->set_value;,return
sentence->set_value;,array
sentence->set_value;,num
sentence->set_value;,/
sentence->set_value;,*
sentence->set_value;,-
sentence->set_value;,+
sentence->set_value;,char
sentence->set_value;,double
sentence->set_value;,int
sentence->set_value;,}
sentence->set_value;,{
sentence->set_value;,(
sentence->set_value;,id
项目集84:
for_set_value->.set_value,;
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,id
set_value->.array[E]=E,;
set_value->.id=E,;
项目集85:
sentence->IncorDec;,scanf
sentence->IncorDec;,printf
sentence->IncorDec;,if
sentence->IncorDec;,while
sentence->IncorDec;,for
sentence->IncorDec;,return
sentence->IncorDec;,array
sentence->IncorDec;,num
sentence->IncorDec;,/
sentence->IncorDec;,*
sentence->IncorDec;,-
sentence->IncorDec;,+
sentence->IncorDec;,char
sentence->IncorDec;,double
sentence->IncorDec;,int
sentence->IncorDec;,}
sentence->IncorDec;,{
sentence->IncorDec;,(
sentence->IncorDec;,id
项目集86:
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
while_expression->while1(.bool_expression)whilesentence,scanf
while_expression->while1(.bool_expression)whilesentence,printf
while_expression->while1(.bool_expression)whilesentence,if
while_expression->while1(.bool_expression)whilesentence,while
while_expression->while1(.bool_expression)whilesentence,for
while_expression->while1(.bool_expression)whilesentence,return
while_expression->while1(.bool_expression)whilesentence,array
while_expression->while1(.bool_expression)whilesentence,num
while_expression->while1(.bool_expression)whilesentence,/
while_expression->while1(.bool_expression)whilesentence,*
while_expression->while1(.bool_expression)whilesentence,-
while_expression->while1(.bool_expression)whilesentence,+
while_expression->while1(.bool_expression)whilesentence,char
while_expression->while1(.bool_expression)whilesentence,double
while_expression->while1(.bool_expression)whilesentence,int
while_expression->while1(.bool_expression)whilesentence,}
while_expression->while1(.bool_expression)whilesentence,{
while_expression->while1(.bool_expression)whilesentence,(
while_expression->while1(.bool_expression)whilesentence,id
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集87:
if_expression->if(.bool_expression)ifsentenceelsesentence,scanf
if_expression->if(.bool_expression)ifsentenceelsesentence,printf
if_expression->if(.bool_expression)ifsentenceelsesentence,if
if_expression->if(.bool_expression)ifsentenceelsesentence,while
if_expression->if(.bool_expression)ifsentenceelsesentence,for
if_expression->if(.bool_expression)ifsentenceelsesentence,return
if_expression->if(.bool_expression)ifsentenceelsesentence,array
if_expression->if(.bool_expression)ifsentenceelsesentence,num
if_expression->if(.bool_expression)ifsentenceelsesentence,/
if_expression->if(.bool_expression)ifsentenceelsesentence,*
if_expression->if(.bool_expression)ifsentenceelsesentence,-
if_expression->if(.bool_expression)ifsentenceelsesentence,+
if_expression->if(.bool_expression)ifsentenceelsesentence,char
if_expression->if(.bool_expression)ifsentenceelsesentence,double
if_expression->if(.bool_expression)ifsentenceelsesentence,int
if_expression->if(.bool_expression)ifsentenceelsesentence,}
if_expression->if(.bool_expression)ifsentenceelsesentence,{
if_expression->if(.bool_expression)ifsentenceelsesentence,(
if_expression->if(.bool_expression)ifsentenceelsesentence,id
if_expression->if(.bool_expression)sentence,scanf
if_expression->if(.bool_expression)sentence,printf
if_expression->if(.bool_expression)sentence,if
if_expression->if(.bool_expression)sentence,while
if_expression->if(.bool_expression)sentence,for
if_expression->if(.bool_expression)sentence,return
if_expression->if(.bool_expression)sentence,array
if_expression->if(.bool_expression)sentence,num
if_expression->if(.bool_expression)sentence,/
if_expression->if(.bool_expression)sentence,*
if_expression->if(.bool_expression)sentence,-
if_expression->if(.bool_expression)sentence,+
if_expression->if(.bool_expression)sentence,char
if_expression->if(.bool_expression)sentence,double
if_expression->if(.bool_expression)sentence,int
if_expression->if(.bool_expression)sentence,}
if_expression->if(.bool_expression)sentence,{
if_expression->if(.bool_expression)sentence,(
if_expression->if(.bool_expression)sentence,id
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集88:
printf_expression->printf(.string,expressions);,scanf
printf_expression->printf(.string,expressions);,printf
printf_expression->printf(.string,expressions);,if
printf_expression->printf(.string,expressions);,while
printf_expression->printf(.string,expressions);,for
printf_expression->printf(.string,expressions);,return
printf_expression->printf(.string,expressions);,array
printf_expression->printf(.string,expressions);,num
printf_expression->printf(.string,expressions);,/
printf_expression->printf(.string,expressions);,*
printf_expression->printf(.string,expressions);,-
printf_expression->printf(.string,expressions);,+
printf_expression->printf(.string,expressions);,char
printf_expression->printf(.string,expressions);,double
printf_expression->printf(.string,expressions);,int
printf_expression->printf(.string,expressions);,}
printf_expression->printf(.string,expressions);,{
printf_expression->printf(.string,expressions);,(
printf_expression->printf(.string,expressions);,id
printf_expression->printf(.string);,scanf
printf_expression->printf(.string);,printf
printf_expression->printf(.string);,if
printf_expression->printf(.string);,while
printf_expression->printf(.string);,for
printf_expression->printf(.string);,return
printf_expression->printf(.string);,array
printf_expression->printf(.string);,num
printf_expression->printf(.string);,/
printf_expression->printf(.string);,*
printf_expression->printf(.string);,-
printf_expression->printf(.string);,+
printf_expression->printf(.string);,char
printf_expression->printf(.string);,double
printf_expression->printf(.string);,int
printf_expression->printf(.string);,}
printf_expression->printf(.string);,{
printf_expression->printf(.string);,(
printf_expression->printf(.string);,id
项目集89:
scanf_expression->scanf(.string,getaddr);,scanf
scanf_expression->scanf(.string,getaddr);,printf
scanf_expression->scanf(.string,getaddr);,if
scanf_expression->scanf(.string,getaddr);,while
scanf_expression->scanf(.string,getaddr);,for
scanf_expression->scanf(.string,getaddr);,return
scanf_expression->scanf(.string,getaddr);,array
scanf_expression->scanf(.string,getaddr);,num
scanf_expression->scanf(.string,getaddr);,/
scanf_expression->scanf(.string,getaddr);,*
scanf_expression->scanf(.string,getaddr);,-
scanf_expression->scanf(.string,getaddr);,+
scanf_expression->scanf(.string,getaddr);,char
scanf_expression->scanf(.string,getaddr);,double
scanf_expression->scanf(.string,getaddr);,int
scanf_expression->scanf(.string,getaddr);,}
scanf_expression->scanf(.string,getaddr);,{
scanf_expression->scanf(.string,getaddr);,(
scanf_expression->scanf(.string,getaddr);,id
项目集90:
function_define->function_typeid(function_define_list){block.},char
function_define->function_typeid(function_define_list){block.},double
function_define->function_typeid(function_define_list){block.},int
function_define->function_typeid(function_define_list){block.},void
function_define->function_typeid(function_define_list){block.},#
项目集91:
function_define_list->function_define_list,typeid,,
function_define_list->function_define_list,typeid,)
项目集92:
F->id,,
F->id,)
function_call->id.(function_call_list),,
function_call->id.(function_call_list),)
function_call->id.(),,
function_call->id.(),)
项目集93:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),,
F->(.E),)
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集94:
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
function_call->id(),;
项目集95:
F->function_call,,
F->function_call,)
项目集96:
function_call_list->function_call_list.,F,,
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),;
项目集97:
function_call_list->F,,
function_call_list->F,)
项目集98:
F->num,,
F->num,)
项目集99:
F->array.[E],,
F->array.[E],)
项目集100:
set_value->id=E,;
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集101:
F->.function_call,,
F->.function_call,)
F->.array[E],,
F->.array[E],)
F->.id,,
F->.id,)
F->.num,,
F->.num,)
F->.(E),,
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),)
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),)
function_call->.id(),,
function_call->.id(),)
项目集102:
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),)
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集103:
F->(E),/
F->(E),*
F->(E),-
F->(E),+
F->(E),;
项目集104:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->E+.T,-
E->E+.T,+
E->E+.T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集105:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->E-.T,-
E->E-.T,+
E->E-.T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集106:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集107:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集108:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],)
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集109:
sentence->{block},scanf
sentence->{block},printf
sentence->{block},if
sentence->{block},while
sentence->{block},for
sentence->{block},return
sentence->{block},array
sentence->{block},num
sentence->{block},/
sentence->{block},*
sentence->{block},-
sentence->{block},+
sentence->{block},char
sentence->{block},double
sentence->{block},int
sentence->{block},}
sentence->{block},{
sentence->{block},(
sentence->{block},id
项目集110:
define->typearray[.num];,scanf
define->typearray[.num];,printf
define->typearray[.num];,if
define->typearray[.num];,while
define->typearray[.num];,for
define->typearray[.num];,return
define->typearray[.num];,array
define->typearray[.num];,num
define->typearray[.num];,/
define->typearray[.num];,*
define->typearray[.num];,-
define->typearray[.num];,+
define->typearray[.num];,char
define->typearray[.num];,double
define->typearray[.num];,int
define->typearray[.num];,}
define->typearray[.num];,{
define->typearray[.num];,(
define->typearray[.num];,id
define->typearray[.]={nums};,scanf
define->typearray[.]={nums};,printf
define->typearray[.]={nums};,if
define->typearray[.]={nums};,while
define->typearray[.]={nums};,for
define->typearray[.]={nums};,return
define->typearray[.]={nums};,array
define->typearray[.]={nums};,num
define->typearray[.]={nums};,/
define->typearray[.]={nums};,*
define->typearray[.]={nums};,-
define->typearray[.]={nums};,+
define->typearray[.]={nums};,char
define->typearray[.]={nums};,double
define->typearray[.]={nums};,int
define->typearray[.]={nums};,}
define->typearray[.]={nums};,{
define->typearray[.]={nums};,(
define->typearray[.]={nums};,id
define->typearray[.num]={nums};,scanf
define->typearray[.num]={nums};,printf
define->typearray[.num]={nums};,if
define->typearray[.num]={nums};,while
define->typearray[.num]={nums};,for
define->typearray[.num]={nums};,return
define->typearray[.num]={nums};,array
define->typearray[.num]={nums};,num
define->typearray[.num]={nums};,/
define->typearray[.num]={nums};,*
define->typearray[.num]={nums};,-
define->typearray[.num]={nums};,+
define->typearray[.num]={nums};,char
define->typearray[.num]={nums};,double
define->typearray[.num]={nums};,int
define->typearray[.num]={nums};,}
define->typearray[.num]={nums};,{
define->typearray[.num]={nums};,(
define->typearray[.num]={nums};,id
项目集111:
define->typeid_name;,scanf
define->typeid_name;,printf
define->typeid_name;,if
define->typeid_name;,while
define->typeid_name;,for
define->typeid_name;,return
define->typeid_name;,array
define->typeid_name;,num
define->typeid_name;,/
define->typeid_name;,*
define->typeid_name;,-
define->typeid_name;,+
define->typeid_name;,char
define->typeid_name;,double
define->typeid_name;,int
define->typeid_name;,}
define->typeid_name;,{
define->typeid_name;,(
define->typeid_name;,id
项目集112:
define->typeid_name=.E;,scanf
define->typeid_name=.E;,printf
define->typeid_name=.E;,if
define->typeid_name=.E;,while
define->typeid_name=.E;,for
define->typeid_name=.E;,return
define->typeid_name=.E;,array
define->typeid_name=.E;,num
define->typeid_name=.E;,/
define->typeid_name=.E;,*
define->typeid_name=.E;,-
define->typeid_name=.E;,+
define->typeid_name=.E;,char
define->typeid_name=.E;,double
define->typeid_name=.E;,int
define->typeid_name=.E;,}
define->typeid_name=.E;,{
define->typeid_name=.E;,(
define->typeid_name=.E;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集113:
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->E+T,-
E->E+T,+
E->E+T,;
项目集114:
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->E-T,-
E->E-T,+
E->E-T,;
项目集115:
T->T*F,/
T->T*F,*
T->T*F,-
T->T*F,+
T->T*F,;
项目集116:
T->T/F,/
T->T/F,*
T->T/F,-
T->T/F,+
T->T/F,;
项目集117:
F->id,]
F->id,/
F->id,*
F->id,-
F->id,+
function_call->id.(function_call_list),]
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(),]
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
项目集118:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),]
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集119:
F->function_call,]
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
项目集120:
T->F,]
T->F,/
T->F,*
T->F,-
T->F,+
项目集121:
set_value->array[E.]=E,;
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集122:
T->T./F,]
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->T,]
E->T,-
E->T,+
项目集123:
F->num,]
F->num,/
F->num,*
F->num,-
F->num,+
项目集124:
F->array.[E],]
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
项目集125:
sentence->returnE;,scanf
sentence->returnE;,printf
sentence->returnE;,if
sentence->returnE;,while
sentence->returnE;,for
sentence->returnE;,return
sentence->returnE;,array
sentence->returnE;,num
sentence->returnE;,/
sentence->returnE;,*
sentence->returnE;,-
sentence->returnE;,+
sentence->returnE;,char
sentence->returnE;,double
sentence->returnE;,int
sentence->returnE;,}
sentence->returnE;,{
sentence->returnE;,(
sentence->returnE;,id
项目集126:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集127:
set_value->id.=E,;
项目集128:
set_value->array.[E]=E,;
项目集129:
for_set_value->set_value,;
项目集130:
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,id
项目集131:
F->id,==
F->id,>
F->id,<
F->id,<=
F->id,>=
F->id,/
F->id,*
F->id,-
F->id,+
F->id,)
function_call->id.(function_call_list),==
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),)
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),)
项目集132:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),)
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集133:
F->function_call,==
F->function_call,>
F->function_call,<
F->function_call,<=
F->function_call,>=
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
F->function_call,)
项目集134:
bool_expression->F,)
T->F,==
T->F,>
T->F,<
T->F,<=
T->F,>=
T->F,/
T->F,*
T->F,-
T->F,+
项目集135:
G->E,==
G->E,>
G->E,<
G->E,<=
G->E,>=
E->E.-T,==
E->E.-T,>
E->E.-T,<
E->E.-T,<=
E->E.-T,>=
E->E.-T,-
E->E.-T,+
E->E.+T,==
E->E.+T,>
E->E.+T,<
E->E.+T,<=
E->E.+T,>=
E->E.+T,-
E->E.+T,+
项目集136:
T->T./F,==
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,==
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->T,==
E->T,>
E->T,<
E->T,<=
E->T,>=
E->T,-
E->T,+
项目集137:
F->num,==
F->num,>
F->num,<
F->num,<=
F->num,>=
F->num,/
F->num,*
F->num,-
F->num,+
F->num,)
项目集138:
F->array.[E],==
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],)
项目集139:
while_expression->while1(bool_expression.)whilesentence,scanf
while_expression->while1(bool_expression.)whilesentence,printf
while_expression->while1(bool_expression.)whilesentence,if
while_expression->while1(bool_expression.)whilesentence,while
while_expression->while1(bool_expression.)whilesentence,for
while_expression->while1(bool_expression.)whilesentence,return
while_expression->while1(bool_expression.)whilesentence,array
while_expression->while1(bool_expression.)whilesentence,num
while_expression->while1(bool_expression.)whilesentence,/
while_expression->while1(bool_expression.)whilesentence,*
while_expression->while1(bool_expression.)whilesentence,-
while_expression->while1(bool_expression.)whilesentence,+
while_expression->while1(bool_expression.)whilesentence,char
while_expression->while1(bool_expression.)whilesentence,double
while_expression->while1(bool_expression.)whilesentence,int
while_expression->while1(bool_expression.)whilesentence,}
while_expression->while1(bool_expression.)whilesentence,{
while_expression->while1(bool_expression.)whilesentence,(
while_expression->while1(bool_expression.)whilesentence,id
项目集140:
op->.==,array
op->.==,num
op->.==,/
op->.==,*
op->.==,-
op->.==,+
op->.==,(
op->.==,id
op->.>,array
op->.>,num
op->.>,/
op->.>,*
op->.>,-
op->.>,+
op->.>,(
op->.>,id
op->.<,array
op->.<,num
op->.<,/
op->.<,*
op->.<,-
op->.<,+
op->.<,(
op->.<,id
op->.<=,array
op->.<=,num
op->.<=,/
op->.<=,*
op->.<=,-
op->.<=,+
op->.<=,(
op->.<=,id
op->.>=,array
op->.>=,num
op->.>=,/
op->.>=,*
op->.>=,-
op->.>=,+
op->.>=,(
op->.>=,id
bool_expression->G.opH,)
项目集141:
if_expression->if(bool_expression.)ifsentenceelsesentence,scanf
if_expression->if(bool_expression.)ifsentenceelsesentence,printf
if_expression->if(bool_expression.)ifsentenceelsesentence,if
if_expression->if(bool_expression.)ifsentenceelsesentence,while
if_expression->if(bool_expression.)ifsentenceelsesentence,for
if_expression->if(bool_expression.)ifsentenceelsesentence,return
if_expression->if(bool_expression.)ifsentenceelsesentence,array
if_expression->if(bool_expression.)ifsentenceelsesentence,num
if_expression->if(bool_expression.)ifsentenceelsesentence,/
if_expression->if(bool_expression.)ifsentenceelsesentence,*
if_expression->if(bool_expression.)ifsentenceelsesentence,-
if_expression->if(bool_expression.)ifsentenceelsesentence,+
if_expression->if(bool_expression.)ifsentenceelsesentence,char
if_expression->if(bool_expression.)ifsentenceelsesentence,double
if_expression->if(bool_expression.)ifsentenceelsesentence,int
if_expression->if(bool_expression.)ifsentenceelsesentence,}
if_expression->if(bool_expression.)ifsentenceelsesentence,{
if_expression->if(bool_expression.)ifsentenceelsesentence,(
if_expression->if(bool_expression.)ifsentenceelsesentence,id
if_expression->if(bool_expression.)sentence,scanf
if_expression->if(bool_expression.)sentence,printf
if_expression->if(bool_expression.)sentence,if
if_expression->if(bool_expression.)sentence,while
if_expression->if(bool_expression.)sentence,for
if_expression->if(bool_expression.)sentence,return
if_expression->if(bool_expression.)sentence,array
if_expression->if(bool_expression.)sentence,num
if_expression->if(bool_expression.)sentence,/
if_expression->if(bool_expression.)sentence,*
if_expression->if(bool_expression.)sentence,-
if_expression->if(bool_expression.)sentence,+
if_expression->if(bool_expression.)sentence,char
if_expression->if(bool_expression.)sentence,double
if_expression->if(bool_expression.)sentence,int
if_expression->if(bool_expression.)sentence,}
if_expression->if(bool_expression.)sentence,{
if_expression->if(bool_expression.)sentence,(
if_expression->if(bool_expression.)sentence,id
项目集142:
printf_expression->printf(string.,expressions);,scanf
printf_expression->printf(string.,expressions);,printf
printf_expression->printf(string.,expressions);,if
printf_expression->printf(string.,expressions);,while
printf_expression->printf(string.,expressions);,for
printf_expression->printf(string.,expressions);,return
printf_expression->printf(string.,expressions);,array
printf_expression->printf(string.,expressions);,num
printf_expression->printf(string.,expressions);,/
printf_expression->printf(string.,expressions);,*
printf_expression->printf(string.,expressions);,-
printf_expression->printf(string.,expressions);,+
printf_expression->printf(string.,expressions);,char
printf_expression->printf(string.,expressions);,double
printf_expression->printf(string.,expressions);,int
printf_expression->printf(string.,expressions);,}
printf_expression->printf(string.,expressions);,{
printf_expression->printf(string.,expressions);,(
printf_expression->printf(string.,expressions);,id
printf_expression->printf(string.);,scanf
printf_expression->printf(string.);,printf
printf_expression->printf(string.);,if
printf_expression->printf(string.);,while
printf_expression->printf(string.);,for
printf_expression->printf(string.);,return
printf_expression->printf(string.);,array
printf_expression->printf(string.);,num
printf_expression->printf(string.);,/
printf_expression->printf(string.);,*
printf_expression->printf(string.);,-
printf_expression->printf(string.);,+
printf_expression->printf(string.);,char
printf_expression->printf(string.);,double
printf_expression->printf(string.);,int
printf_expression->printf(string.);,}
printf_expression->printf(string.);,{
printf_expression->printf(string.);,(
printf_expression->printf(string.);,id
项目集143:
scanf_expression->scanf(string.,getaddr);,scanf
scanf_expression->scanf(string.,getaddr);,printf
scanf_expression->scanf(string.,getaddr);,if
scanf_expression->scanf(string.,getaddr);,while
scanf_expression->scanf(string.,getaddr);,for
scanf_expression->scanf(string.,getaddr);,return
scanf_expression->scanf(string.,getaddr);,array
scanf_expression->scanf(string.,getaddr);,num
scanf_expression->scanf(string.,getaddr);,/
scanf_expression->scanf(string.,getaddr);,*
scanf_expression->scanf(string.,getaddr);,-
scanf_expression->scanf(string.,getaddr);,+
scanf_expression->scanf(string.,getaddr);,char
scanf_expression->scanf(string.,getaddr);,double
scanf_expression->scanf(string.,getaddr);,int
scanf_expression->scanf(string.,getaddr);,}
scanf_expression->scanf(string.,getaddr);,{
scanf_expression->scanf(string.,getaddr);,(
scanf_expression->scanf(string.,getaddr);,id
项目集144:
function_define->function_typeid(function_define_list){block},char
function_define->function_typeid(function_define_list){block},double
function_define->function_typeid(function_define_list){block},int
function_define->function_typeid(function_define_list){block},void
function_define->function_typeid(function_define_list){block},#
项目集145:
F->.function_call,,
F->.function_call,)
F->.array[E],,
F->.array[E],)
F->.id,,
F->.id,)
F->.num,,
F->.num,)
F->.(E),,
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),,
function_call->id(.function_call_list),)
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),,
function_call->id(.),)
function_call->.id(),,
function_call->.id(),)
项目集146:
F->(E.),,
F->(E.),)
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集147:
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
function_call->id(function_call_list),;
项目集148:
F->.function_call,,
F->.function_call,)
F->.array[E],,
F->.array[E],)
F->.id,,
F->.id,)
F->.num,,
F->.num,)
F->.(E),,
F->.(E),)
function_call_list->function_call_list,.F,,
function_call_list->function_call_list,.F,)
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),,
function_call->.id(),)
项目集149:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],,
F->array[.E],)
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集150:
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
function_call->id(),)
项目集151:
function_call_list->function_call_list.,F,,
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),)
项目集152:
F->(E),/
F->(E),*
F->(E),-
F->(E),+
F->(E),)
项目集153:
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->E+T,-
E->E+T,+
E->E+T,)
项目集154:
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->E-T,-
E->E-T,+
E->E-T,)
项目集155:
T->T*F,/
T->T*F,*
T->T*F,-
T->T*F,+
T->T*F,)
项目集156:
T->T/F,/
T->T/F,*
T->T/F,-
T->T/F,+
T->T/F,)
项目集157:
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],)
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集158:
define->typearray[num.];,scanf
define->typearray[num.];,printf
define->typearray[num.];,if
define->typearray[num.];,while
define->typearray[num.];,for
define->typearray[num.];,return
define->typearray[num.];,array
define->typearray[num.];,num
define->typearray[num.];,/
define->typearray[num.];,*
define->typearray[num.];,-
define->typearray[num.];,+
define->typearray[num.];,char
define->typearray[num.];,double
define->typearray[num.];,int
define->typearray[num.];,}
define->typearray[num.];,{
define->typearray[num.];,(
define->typearray[num.];,id
define->typearray[num.]={nums};,scanf
define->typearray[num.]={nums};,printf
define->typearray[num.]={nums};,if
define->typearray[num.]={nums};,while
define->typearray[num.]={nums};,for
define->typearray[num.]={nums};,return
define->typearray[num.]={nums};,array
define->typearray[num.]={nums};,num
define->typearray[num.]={nums};,/
define->typearray[num.]={nums};,*
define->typearray[num.]={nums};,-
define->typearray[num.]={nums};,+
define->typearray[num.]={nums};,char
define->typearray[num.]={nums};,double
define->typearray[num.]={nums};,int
define->typearray[num.]={nums};,}
define->typearray[num.]={nums};,{
define->typearray[num.]={nums};,(
define->typearray[num.]={nums};,id
项目集159:
define->typearray[].={nums};,scanf
define->typearray[].={nums};,printf
define->typearray[].={nums};,if
define->typearray[].={nums};,while
define->typearray[].={nums};,for
define->typearray[].={nums};,return
define->typearray[].={nums};,array
define->typearray[].={nums};,num
define->typearray[].={nums};,/
define->typearray[].={nums};,*
define->typearray[].={nums};,-
define->typearray[].={nums};,+
define->typearray[].={nums};,char
define->typearray[].={nums};,double
define->typearray[].={nums};,int
define->typearray[].={nums};,}
define->typearray[].={nums};,{
define->typearray[].={nums};,(
define->typearray[].={nums};,id
项目集160:
define->typeid_name=E.;,scanf
define->typeid_name=E.;,printf
define->typeid_name=E.;,if
define->typeid_name=E.;,while
define->typeid_name=E.;,for
define->typeid_name=E.;,return
define->typeid_name=E.;,array
define->typeid_name=E.;,num
define->typeid_name=E.;,/
define->typeid_name=E.;,*
define->typeid_name=E.;,-
define->typeid_name=E.;,+
define->typeid_name=E.;,char
define->typeid_name=E.;,double
define->typeid_name=E.;,int
define->typeid_name=E.;,}
define->typeid_name=E.;,{
define->typeid_name=E.;,(
define->typeid_name=E.;,id
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集161:
F->.function_call,,
F->.function_call,)
F->.array[E],,
F->.array[E],)
F->.id,,
F->.id,)
F->.num,,
F->.num,)
F->.(E),,
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),]
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),]
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->.id(),,
function_call->.id(),)
项目集162:
F->(E.),]
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集163:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E+.T,]
E->E+.T,-
E->E+.T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集164:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E-.T,]
E->E-.T,-
E->E-.T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集165:
set_value->array[E].=E,;
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],;
项目集166:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T*.F,]
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集167:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T/.F,]
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集168:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],]
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集169:
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集170:
set_value->array[.E]=E,;
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集171:
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,;
bool_expression->.GopH,;
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,id
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集172:
F->.function_call,,
F->.function_call,)
F->.array[E],,
F->.array[E],)
F->.id,,
F->.id,)
F->.num,,
F->.num,)
F->.(E),,
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),)
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),==
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),)
function_call->.id(),,
function_call->.id(),)
项目集173:
F->(E.),==
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),)
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集174:
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E+.T,==
E->E+.T,>
E->E+.T,<
E->E+.T,<=
E->E+.T,>=
E->E+.T,-
E->E+.T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集175:
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E-.T,==
E->E-.T,>
E->E-.T,<
E->E-.T,<=
E->E-.T,>=
E->E-.T,-
E->E-.T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集176:
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T*.F,==
T->T*.F,>
T->T*.F,<
T->T*.F,<=
T->T*.F,>=
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集177:
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T/.F,==
T->T/.F,>
T->T/.F,<
T->T/.F,<=
T->T/.F,>=
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集178:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],)
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集179:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
whilesentence->.sentence,scanf
whilesentence->.sentence,printf
whilesentence->.sentence,if
whilesentence->.sentence,while
whilesentence->.sentence,for
whilesentence->.sentence,return
whilesentence->.sentence,array
whilesentence->.sentence,num
whilesentence->.sentence,/
whilesentence->.sentence,*
whilesentence->.sentence,-
whilesentence->.sentence,+
whilesentence->.sentence,char
whilesentence->.sentence,double
whilesentence->.sentence,int
whilesentence->.sentence,}
whilesentence->.sentence,{
whilesentence->.sentence,(
whilesentence->.sentence,id
while1->.while,(
while_expression->while1(bool_expression).whilesentence,scanf
while_expression->while1(bool_expression).whilesentence,printf
while_expression->while1(bool_expression).whilesentence,if
while_expression->while1(bool_expression).whilesentence,while
while_expression->while1(bool_expression).whilesentence,for
while_expression->while1(bool_expression).whilesentence,return
while_expression->while1(bool_expression).whilesentence,array
while_expression->while1(bool_expression).whilesentence,num
while_expression->while1(bool_expression).whilesentence,/
while_expression->while1(bool_expression).whilesentence,*
while_expression->while1(bool_expression).whilesentence,-
while_expression->while1(bool_expression).whilesentence,+
while_expression->while1(bool_expression).whilesentence,char
while_expression->while1(bool_expression).whilesentence,double
while_expression->while1(bool_expression).whilesentence,int
while_expression->while1(bool_expression).whilesentence,}
while_expression->while1(bool_expression).whilesentence,{
while_expression->while1(bool_expression).whilesentence,(
while_expression->while1(bool_expression).whilesentence,id
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集180:
H->.E,)
bool_expression->Gop.H,)
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集181:
op->>=,array
op->>=,num
op->>=,/
op->>=,*
op->>=,-
op->>=,+
op->>=,(
op->>=,id
项目集182:
op-><=,array
op-><=,num
op-><=,/
op-><=,*
op-><=,-
op-><=,+
op-><=,(
op-><=,id
项目集183:
op-><,array
op-><,num
op-><,/
op-><,*
op-><,-
op-><,+
op-><,(
op-><,id
项目集184:
op->>,array
op->>,num
op->>,/
op->>,*
op->>,-
op->>,+
op->>,(
op->>,id
项目集185:
op->==,array
op->==,num
op->==,/
op->==,*
op->==,-
op->==,+
op->==,(
op->==,id
项目集186:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
ifsentence->.sentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,scanf
if_expression->if(bool_expression).ifsentenceelsesentence,printf
if_expression->if(bool_expression).ifsentenceelsesentence,if
if_expression->if(bool_expression).ifsentenceelsesentence,while
if_expression->if(bool_expression).ifsentenceelsesentence,for
if_expression->if(bool_expression).ifsentenceelsesentence,return
if_expression->if(bool_expression).ifsentenceelsesentence,array
if_expression->if(bool_expression).ifsentenceelsesentence,num
if_expression->if(bool_expression).ifsentenceelsesentence,/
if_expression->if(bool_expression).ifsentenceelsesentence,*
if_expression->if(bool_expression).ifsentenceelsesentence,-
if_expression->if(bool_expression).ifsentenceelsesentence,+
if_expression->if(bool_expression).ifsentenceelsesentence,char
if_expression->if(bool_expression).ifsentenceelsesentence,double
if_expression->if(bool_expression).ifsentenceelsesentence,int
if_expression->if(bool_expression).ifsentenceelsesentence,}
if_expression->if(bool_expression).ifsentenceelsesentence,{
if_expression->if(bool_expression).ifsentenceelsesentence,(
if_expression->if(bool_expression).ifsentenceelsesentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->if(bool_expression).sentence,scanf
if_expression->if(bool_expression).sentence,printf
if_expression->if(bool_expression).sentence,if
if_expression->if(bool_expression).sentence,while
if_expression->if(bool_expression).sentence,for
if_expression->if(bool_expression).sentence,return
if_expression->if(bool_expression).sentence,array
if_expression->if(bool_expression).sentence,num
if_expression->if(bool_expression).sentence,/
if_expression->if(bool_expression).sentence,*
if_expression->if(bool_expression).sentence,-
if_expression->if(bool_expression).sentence,+
if_expression->if(bool_expression).sentence,char
if_expression->if(bool_expression).sentence,double
if_expression->if(bool_expression).sentence,int
if_expression->if(bool_expression).sentence,}
if_expression->if(bool_expression).sentence,{
if_expression->if(bool_expression).sentence,(
if_expression->if(bool_expression).sentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集187:
printf_expression->printf(string).;,scanf
printf_expression->printf(string).;,printf
printf_expression->printf(string).;,if
printf_expression->printf(string).;,while
printf_expression->printf(string).;,for
printf_expression->printf(string).;,return
printf_expression->printf(string).;,array
printf_expression->printf(string).;,num
printf_expression->printf(string).;,/
printf_expression->printf(string).;,*
printf_expression->printf(string).;,-
printf_expression->printf(string).;,+
printf_expression->printf(string).;,char
printf_expression->printf(string).;,double
printf_expression->printf(string).;,int
printf_expression->printf(string).;,}
printf_expression->printf(string).;,{
printf_expression->printf(string).;,(
printf_expression->printf(string).;,id
项目集188:
expressions->.id,)
expressions->.id,expressions,)
printf_expression->printf(string,.expressions);,scanf
printf_expression->printf(string,.expressions);,printf
printf_expression->printf(string,.expressions);,if
printf_expression->printf(string,.expressions);,while
printf_expression->printf(string,.expressions);,for
printf_expression->printf(string,.expressions);,return
printf_expression->printf(string,.expressions);,array
printf_expression->printf(string,.expressions);,num
printf_expression->printf(string,.expressions);,/
printf_expression->printf(string,.expressions);,*
printf_expression->printf(string,.expressions);,-
printf_expression->printf(string,.expressions);,+
printf_expression->printf(string,.expressions);,char
printf_expression->printf(string,.expressions);,double
printf_expression->printf(string,.expressions);,int
printf_expression->printf(string,.expressions);,}
printf_expression->printf(string,.expressions);,{
printf_expression->printf(string,.expressions);,(
printf_expression->printf(string,.expressions);,id
项目集189:
getaddr->.&id,)
scanf_expression->scanf(string,.getaddr);,scanf
scanf_expression->scanf(string,.getaddr);,printf
scanf_expression->scanf(string,.getaddr);,if
scanf_expression->scanf(string,.getaddr);,while
scanf_expression->scanf(string,.getaddr);,for
scanf_expression->scanf(string,.getaddr);,return
scanf_expression->scanf(string,.getaddr);,array
scanf_expression->scanf(string,.getaddr);,num
scanf_expression->scanf(string,.getaddr);,/
scanf_expression->scanf(string,.getaddr);,*
scanf_expression->scanf(string,.getaddr);,-
scanf_expression->scanf(string,.getaddr);,+
scanf_expression->scanf(string,.getaddr);,char
scanf_expression->scanf(string,.getaddr);,double
scanf_expression->scanf(string,.getaddr);,int
scanf_expression->scanf(string,.getaddr);,}
scanf_expression->scanf(string,.getaddr);,{
scanf_expression->scanf(string,.getaddr);,(
scanf_expression->scanf(string,.getaddr);,id
项目集190:
function_call->id(),,
function_call->id(),)
项目集191:
function_call_list->function_call_list.,F,,
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),,
function_call->id(function_call_list.),)
项目集192:
F->(E),,
F->(E),)
项目集193:
function_call_list->function_call_list,F,,
function_call_list->function_call_list,F,)
项目集194:
F->array[E.],,
F->array[E.],)
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集195:
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
function_call->id(function_call_list),)
项目集196:
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],)
项目集197:
define->typearray[num].;,scanf
define->typearray[num].;,printf
define->typearray[num].;,if
define->typearray[num].;,while
define->typearray[num].;,for
define->typearray[num].;,return
define->typearray[num].;,array
define->typearray[num].;,num
define->typearray[num].;,/
define->typearray[num].;,*
define->typearray[num].;,-
define->typearray[num].;,+
define->typearray[num].;,char
define->typearray[num].;,double
define->typearray[num].;,int
define->typearray[num].;,}
define->typearray[num].;,{
define->typearray[num].;,(
define->typearray[num].;,id
define->typearray[num].={nums};,scanf
define->typearray[num].={nums};,printf
define->typearray[num].={nums};,if
define->typearray[num].={nums};,while
define->typearray[num].={nums};,for
define->typearray[num].={nums};,return
define->typearray[num].={nums};,array
define->typearray[num].={nums};,num
define->typearray[num].={nums};,/
define->typearray[num].={nums};,*
define->typearray[num].={nums};,-
define->typearray[num].={nums};,+
define->typearray[num].={nums};,char
define->typearray[num].={nums};,double
define->typearray[num].={nums};,int
define->typearray[num].={nums};,}
define->typearray[num].={nums};,{
define->typearray[num].={nums};,(
define->typearray[num].={nums};,id
项目集198:
define->typearray[]=.{nums};,scanf
define->typearray[]=.{nums};,printf
define->typearray[]=.{nums};,if
define->typearray[]=.{nums};,while
define->typearray[]=.{nums};,for
define->typearray[]=.{nums};,return
define->typearray[]=.{nums};,array
define->typearray[]=.{nums};,num
define->typearray[]=.{nums};,/
define->typearray[]=.{nums};,*
define->typearray[]=.{nums};,-
define->typearray[]=.{nums};,+
define->typearray[]=.{nums};,char
define->typearray[]=.{nums};,double
define->typearray[]=.{nums};,int
define->typearray[]=.{nums};,}
define->typearray[]=.{nums};,{
define->typearray[]=.{nums};,(
define->typearray[]=.{nums};,id
项目集199:
define->typeid_name=E;,scanf
define->typeid_name=E;,printf
define->typeid_name=E;,if
define->typeid_name=E;,while
define->typeid_name=E;,for
define->typeid_name=E;,return
define->typeid_name=E;,array
define->typeid_name=E;,num
define->typeid_name=E;,/
define->typeid_name=E;,*
define->typeid_name=E;,-
define->typeid_name=E;,+
define->typeid_name=E;,char
define->typeid_name=E;,double
define->typeid_name=E;,int
define->typeid_name=E;,}
define->typeid_name=E;,{
define->typeid_name=E;,(
define->typeid_name=E;,id
项目集200:
function_call->id(),]
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
项目集201:
function_call_list->function_call_list.,F,,
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),]
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
项目集202:
F->(E),]
F->(E),/
F->(E),*
F->(E),-
F->(E),+
项目集203:
T->T./F,]
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E+T,]
E->E+T,-
E->E+T,+
项目集204:
T->T./F,]
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E-T,]
E->E-T,-
E->E-T,+
项目集205:
set_value->array[E]=.E,;
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集206:
T->T*F,]
T->T*F,/
T->T*F,*
T->T*F,-
T->T*F,+
项目集207:
T->T/F,]
T->T/F,/
T->T/F,*
T->T/F,-
T->T/F,+
项目集208:
F->array[E.],]
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集209:
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],;
项目集210:
set_value->array[E.]=E,;
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集211:
F->id,==
F->id,>
F->id,<
F->id,<=
F->id,>=
F->id,/
F->id,*
F->id,-
F->id,+
F->id,;
function_call->id.(function_call_list),==
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目集212:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集213:
F->function_call,==
F->function_call,>
F->function_call,<
F->function_call,<=
F->function_call,>=
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
F->function_call,;
项目集214:
bool_expression->F,;
T->F,==
T->F,>
T->F,<
T->F,<=
T->F,>=
T->F,/
T->F,*
T->F,-
T->F,+
项目集215:
F->num,==
F->num,>
F->num,<
F->num,<=
F->num,>=
F->num,/
F->num,*
F->num,-
F->num,+
F->num,;
项目集216:
F->array.[E],==
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目集217:
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,id
项目集218:
op->.==,array
op->.==,num
op->.==,/
op->.==,*
op->.==,-
op->.==,+
op->.==,(
op->.==,id
op->.>,array
op->.>,num
op->.>,/
op->.>,*
op->.>,-
op->.>,+
op->.>,(
op->.>,id
op->.<,array
op->.<,num
op->.<,/
op->.<,*
op->.<,-
op->.<,+
op->.<,(
op->.<,id
op->.<=,array
op->.<=,num
op->.<=,/
op->.<=,*
op->.<=,-
op->.<=,+
op->.<=,(
op->.<=,id
op->.>=,array
op->.>=,num
op->.>=,/
op->.>=,*
op->.>=,-
op->.>=,+
op->.>=,(
op->.>=,id
bool_expression->G.opH,;
项目集219:
function_call->id(),==
function_call->id(),>
function_call->id(),<
function_call->id(),<=
function_call->id(),>=
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
function_call->id(),)
项目集220:
function_call_list->function_call_list.,F,,
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),==
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),)
项目集221:
F->(E),==
F->(E),>
F->(E),<
F->(E),<=
F->(E),>=
F->(E),/
F->(E),*
F->(E),-
F->(E),+
F->(E),)
项目集222:
F->id,==
F->id,>
F->id,<
F->id,<=
F->id,>=
F->id,/
F->id,*
F->id,-
F->id,+
function_call->id.(function_call_list),==
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
项目集223:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集224:
F->function_call,==
F->function_call,>
F->function_call,<
F->function_call,<=
F->function_call,>=
F->function_call,/
F->function_call,*
F->function_call,-
F->function_call,+
项目集225:
T->F,==
T->F,>
T->F,<
T->F,<=
T->F,>=
T->F,/
T->F,*
T->F,-
T->F,+
项目集226:
T->T./F,==
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,==
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E+T,==
E->E+T,>
E->E+T,<
E->E+T,<=
E->E+T,>=
E->E+T,-
E->E+T,+
项目集227:
F->num,==
F->num,>
F->num,<
F->num,<=
F->num,>=
F->num,/
F->num,*
F->num,-
F->num,+
项目集228:
F->array.[E],==
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
项目集229:
T->T./F,==
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,==
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E-T,==
E->E-T,>
E->E-T,<
E->E-T,<=
E->E-T,>=
E->E-T,-
E->E-T,+
项目集230:
T->T*F,==
T->T*F,>
T->T*F,<
T->T*F,<=
T->T*F,>=
T->T*F,/
T->T*F,*
T->T*F,-
T->T*F,+
项目集231:
T->T/F,==
T->T/F,>
T->T/F,<
T->T/F,<=
T->T/F,>=
T->T/F,/
T->T/F,*
T->T/F,-
T->T/F,+
项目集232:
F->array[E.],==
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],)
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集233:
whilesentence->sentence,scanf
whilesentence->sentence,printf
whilesentence->sentence,if
whilesentence->sentence,while
whilesentence->sentence,for
whilesentence->sentence,return
whilesentence->sentence,array
whilesentence->sentence,num
whilesentence->sentence,/
whilesentence->sentence,*
whilesentence->sentence,-
whilesentence->sentence,+
whilesentence->sentence,char
whilesentence->sentence,double
whilesentence->sentence,int
whilesentence->sentence,}
whilesentence->sentence,{
whilesentence->sentence,(
whilesentence->sentence,id
项目集234:
while_expression->while1(bool_expression)whilesentence,scanf
while_expression->while1(bool_expression)whilesentence,printf
while_expression->while1(bool_expression)whilesentence,if
while_expression->while1(bool_expression)whilesentence,while
while_expression->while1(bool_expression)whilesentence,for
while_expression->while1(bool_expression)whilesentence,return
while_expression->while1(bool_expression)whilesentence,array
while_expression->while1(bool_expression)whilesentence,num
while_expression->while1(bool_expression)whilesentence,/
while_expression->while1(bool_expression)whilesentence,*
while_expression->while1(bool_expression)whilesentence,-
while_expression->while1(bool_expression)whilesentence,+
while_expression->while1(bool_expression)whilesentence,char
while_expression->while1(bool_expression)whilesentence,double
while_expression->while1(bool_expression)whilesentence,int
while_expression->while1(bool_expression)whilesentence,}
while_expression->while1(bool_expression)whilesentence,{
while_expression->while1(bool_expression)whilesentence,(
while_expression->while1(bool_expression)whilesentence,id
项目集235:
H->E,)
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集236:
bool_expression->GopH,)
项目集237:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->{.},scanf
sentence->{.},printf
sentence->{.},else
sentence->{.},if
sentence->{.},while
sentence->{.},for
sentence->{.},return
sentence->{.},array
sentence->{.},num
sentence->{.},/
sentence->{.},*
sentence->{.},-
sentence->{.},+
sentence->{.},char
sentence->{.},double
sentence->{.},int
sentence->{.},}
sentence->{.},{
sentence->{.},(
sentence->{.},id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->{.block},scanf
sentence->{.block},printf
sentence->{.block},else
sentence->{.block},if
sentence->{.block},while
sentence->{.block},for
sentence->{.block},return
sentence->{.block},array
sentence->{.block},num
sentence->{.block},/
sentence->{.block},*
sentence->{.block},-
sentence->{.block},+
sentence->{.block},char
sentence->{.block},double
sentence->{.block},int
sentence->{.block},}
sentence->{.block},{
sentence->{.block},(
sentence->{.block},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集238:
define->type.array[num];,scanf
define->type.array[num];,printf
define->type.array[num];,else
define->type.array[num];,if
define->type.array[num];,while
define->type.array[num];,for
define->type.array[num];,return
define->type.array[num];,array
define->type.array[num];,num
define->type.array[num];,/
define->type.array[num];,*
define->type.array[num];,-
define->type.array[num];,+
define->type.array[num];,char
define->type.array[num];,double
define->type.array[num];,int
define->type.array[num];,}
define->type.array[num];,{
define->type.array[num];,(
define->type.array[num];,id
define->type.array[]={nums};,scanf
define->type.array[]={nums};,printf
define->type.array[]={nums};,else
define->type.array[]={nums};,if
define->type.array[]={nums};,while
define->type.array[]={nums};,for
define->type.array[]={nums};,return
define->type.array[]={nums};,array
define->type.array[]={nums};,num
define->type.array[]={nums};,/
define->type.array[]={nums};,*
define->type.array[]={nums};,-
define->type.array[]={nums};,+
define->type.array[]={nums};,char
define->type.array[]={nums};,double
define->type.array[]={nums};,int
define->type.array[]={nums};,}
define->type.array[]={nums};,{
define->type.array[]={nums};,(
define->type.array[]={nums};,id
define->type.array[num]={nums};,scanf
define->type.array[num]={nums};,printf
define->type.array[num]={nums};,else
define->type.array[num]={nums};,if
define->type.array[num]={nums};,while
define->type.array[num]={nums};,for
define->type.array[num]={nums};,return
define->type.array[num]={nums};,array
define->type.array[num]={nums};,num
define->type.array[num]={nums};,/
define->type.array[num]={nums};,*
define->type.array[num]={nums};,-
define->type.array[num]={nums};,+
define->type.array[num]={nums};,char
define->type.array[num]={nums};,double
define->type.array[num]={nums};,int
define->type.array[num]={nums};,}
define->type.array[num]={nums};,{
define->type.array[num]={nums};,(
define->type.array[num]={nums};,id
id_name->.id,=
id_name->.id,;
define->type.id_name;,scanf
define->type.id_name;,printf
define->type.id_name;,else
define->type.id_name;,if
define->type.id_name;,while
define->type.id_name;,for
define->type.id_name;,return
define->type.id_name;,array
define->type.id_name;,num
define->type.id_name;,/
define->type.id_name;,*
define->type.id_name;,-
define->type.id_name;,+
define->type.id_name;,char
define->type.id_name;,double
define->type.id_name;,int
define->type.id_name;,}
define->type.id_name;,{
define->type.id_name;,(
define->type.id_name;,id
define->type.id_name=E;,scanf
define->type.id_name=E;,printf
define->type.id_name=E;,else
define->type.id_name=E;,if
define->type.id_name=E;,while
define->type.id_name=E;,for
define->type.id_name=E;,return
define->type.id_name=E;,array
define->type.id_name=E;,num
define->type.id_name=E;,/
define->type.id_name=E;,*
define->type.id_name=E;,-
define->type.id_name=E;,+
define->type.id_name=E;,char
define->type.id_name=E;,double
define->type.id_name=E;,int
define->type.id_name=E;,}
define->type.id_name=E;,{
define->type.id_name=E;,(
define->type.id_name=E;,id
项目集239:
ifsentence->sentence,else
if_expression->if(bool_expression)sentence,scanf
if_expression->if(bool_expression)sentence,printf
if_expression->if(bool_expression)sentence,if
if_expression->if(bool_expression)sentence,while
if_expression->if(bool_expression)sentence,for
if_expression->if(bool_expression)sentence,return
if_expression->if(bool_expression)sentence,array
if_expression->if(bool_expression)sentence,num
if_expression->if(bool_expression)sentence,/
if_expression->if(bool_expression)sentence,*
if_expression->if(bool_expression)sentence,-
if_expression->if(bool_expression)sentence,+
if_expression->if(bool_expression)sentence,char
if_expression->if(bool_expression)sentence,double
if_expression->if(bool_expression)sentence,int
if_expression->if(bool_expression)sentence,}
if_expression->if(bool_expression)sentence,{
if_expression->if(bool_expression)sentence,(
if_expression->if(bool_expression)sentence,id
项目集240:
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
sentence->E.;,scanf
sentence->E.;,printf
sentence->E.;,else
sentence->E.;,if
sentence->E.;,while
sentence->E.;,for
sentence->E.;,return
sentence->E.;,array
sentence->E.;,num
sentence->E.;,/
sentence->E.;,*
sentence->E.;,-
sentence->E.;,+
sentence->E.;,char
sentence->E.;,double
sentence->E.;,int
sentence->E.;,}
sentence->E.;,{
sentence->E.;,(
sentence->E.;,id
项目集241:
sentence->return.E;,scanf
sentence->return.E;,printf
sentence->return.E;,else
sentence->return.E;,if
sentence->return.E;,while
sentence->return.E;,for
sentence->return.E;,return
sentence->return.E;,array
sentence->return.E;,num
sentence->return.E;,/
sentence->return.E;,*
sentence->return.E;,-
sentence->return.E;,+
sentence->return.E;,char
sentence->return.E;,double
sentence->return.E;,int
sentence->return.E;,}
sentence->return.E;,{
sentence->return.E;,(
sentence->return.E;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集242:
sentence->define,scanf
sentence->define,printf
sentence->define,else
sentence->define,if
sentence->define,while
sentence->define,for
sentence->define,return
sentence->define,array
sentence->define,num
sentence->define,/
sentence->define,*
sentence->define,-
sentence->define,+
sentence->define,char
sentence->define,double
sentence->define,int
sentence->define,}
sentence->define,{
sentence->define,(
sentence->define,id
项目集243:
sentence->set_value.;,scanf
sentence->set_value.;,printf
sentence->set_value.;,else
sentence->set_value.;,if
sentence->set_value.;,while
sentence->set_value.;,for
sentence->set_value.;,return
sentence->set_value.;,array
sentence->set_value.;,num
sentence->set_value.;,/
sentence->set_value.;,*
sentence->set_value.;,-
sentence->set_value.;,+
sentence->set_value.;,char
sentence->set_value.;,double
sentence->set_value.;,int
sentence->set_value.;,}
sentence->set_value.;,{
sentence->set_value.;,(
sentence->set_value.;,id
项目集244:
sentence->loop_expression,scanf
sentence->loop_expression,printf
sentence->loop_expression,else
sentence->loop_expression,if
sentence->loop_expression,while
sentence->loop_expression,for
sentence->loop_expression,return
sentence->loop_expression,array
sentence->loop_expression,num
sentence->loop_expression,/
sentence->loop_expression,*
sentence->loop_expression,-
sentence->loop_expression,+
sentence->loop_expression,char
sentence->loop_expression,double
sentence->loop_expression,int
sentence->loop_expression,}
sentence->loop_expression,{
sentence->loop_expression,(
sentence->loop_expression,id
项目集245:
sentence->while_expression,scanf
sentence->while_expression,printf
sentence->while_expression,else
sentence->while_expression,if
sentence->while_expression,while
sentence->while_expression,for
sentence->while_expression,return
sentence->while_expression,array
sentence->while_expression,num
sentence->while_expression,/
sentence->while_expression,*
sentence->while_expression,-
sentence->while_expression,+
sentence->while_expression,char
sentence->while_expression,double
sentence->while_expression,int
sentence->while_expression,}
sentence->while_expression,{
sentence->while_expression,(
sentence->while_expression,id
项目集246:
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,id
项目集247:
sentence->IncorDec.;,scanf
sentence->IncorDec.;,printf
sentence->IncorDec.;,else
sentence->IncorDec.;,if
sentence->IncorDec.;,while
sentence->IncorDec.;,for
sentence->IncorDec.;,return
sentence->IncorDec.;,array
sentence->IncorDec.;,num
sentence->IncorDec.;,/
sentence->IncorDec.;,*
sentence->IncorDec.;,-
sentence->IncorDec.;,+
sentence->IncorDec.;,char
sentence->IncorDec.;,double
sentence->IncorDec.;,int
sentence->IncorDec.;,}
sentence->IncorDec.;,{
sentence->IncorDec.;,(
sentence->IncorDec.;,id
项目集248:
while_expression->while1.(bool_expression)whilesentence,scanf
while_expression->while1.(bool_expression)whilesentence,printf
while_expression->while1.(bool_expression)whilesentence,else
while_expression->while1.(bool_expression)whilesentence,if
while_expression->while1.(bool_expression)whilesentence,while
while_expression->while1.(bool_expression)whilesentence,for
while_expression->while1.(bool_expression)whilesentence,return
while_expression->while1.(bool_expression)whilesentence,array
while_expression->while1.(bool_expression)whilesentence,num
while_expression->while1.(bool_expression)whilesentence,/
while_expression->while1.(bool_expression)whilesentence,*
while_expression->while1.(bool_expression)whilesentence,-
while_expression->while1.(bool_expression)whilesentence,+
while_expression->while1.(bool_expression)whilesentence,char
while_expression->while1.(bool_expression)whilesentence,double
while_expression->while1.(bool_expression)whilesentence,int
while_expression->while1.(bool_expression)whilesentence,}
while_expression->while1.(bool_expression)whilesentence,{
while_expression->while1.(bool_expression)whilesentence,(
while_expression->while1.(bool_expression)whilesentence,id
项目集249:
sentence->if_expression,scanf
sentence->if_expression,printf
sentence->if_expression,else
sentence->if_expression,if
sentence->if_expression,while
sentence->if_expression,for
sentence->if_expression,return
sentence->if_expression,array
sentence->if_expression,num
sentence->if_expression,/
sentence->if_expression,*
sentence->if_expression,-
sentence->if_expression,+
sentence->if_expression,char
sentence->if_expression,double
sentence->if_expression,int
sentence->if_expression,}
sentence->if_expression,{
sentence->if_expression,(
sentence->if_expression,id
项目集250:
if_expression->if.(bool_expression)ifsentenceelsesentence,scanf
if_expression->if.(bool_expression)ifsentenceelsesentence,printf
if_expression->if.(bool_expression)ifsentenceelsesentence,else
if_expression->if.(bool_expression)ifsentenceelsesentence,if
if_expression->if.(bool_expression)ifsentenceelsesentence,while
if_expression->if.(bool_expression)ifsentenceelsesentence,for
if_expression->if.(bool_expression)ifsentenceelsesentence,return
if_expression->if.(bool_expression)ifsentenceelsesentence,array
if_expression->if.(bool_expression)ifsentenceelsesentence,num
if_expression->if.(bool_expression)ifsentenceelsesentence,/
if_expression->if.(bool_expression)ifsentenceelsesentence,*
if_expression->if.(bool_expression)ifsentenceelsesentence,-
if_expression->if.(bool_expression)ifsentenceelsesentence,+
if_expression->if.(bool_expression)ifsentenceelsesentence,char
if_expression->if.(bool_expression)ifsentenceelsesentence,double
if_expression->if.(bool_expression)ifsentenceelsesentence,int
if_expression->if.(bool_expression)ifsentenceelsesentence,}
if_expression->if.(bool_expression)ifsentenceelsesentence,{
if_expression->if.(bool_expression)ifsentenceelsesentence,(
if_expression->if.(bool_expression)ifsentenceelsesentence,id
if_expression->if.(bool_expression)sentence,scanf
if_expression->if.(bool_expression)sentence,printf
if_expression->if.(bool_expression)sentence,else
if_expression->if.(bool_expression)sentence,if
if_expression->if.(bool_expression)sentence,while
if_expression->if.(bool_expression)sentence,for
if_expression->if.(bool_expression)sentence,return
if_expression->if.(bool_expression)sentence,array
if_expression->if.(bool_expression)sentence,num
if_expression->if.(bool_expression)sentence,/
if_expression->if.(bool_expression)sentence,*
if_expression->if.(bool_expression)sentence,-
if_expression->if.(bool_expression)sentence,+
if_expression->if.(bool_expression)sentence,char
if_expression->if.(bool_expression)sentence,double
if_expression->if.(bool_expression)sentence,int
if_expression->if.(bool_expression)sentence,}
if_expression->if.(bool_expression)sentence,{
if_expression->if.(bool_expression)sentence,(
if_expression->if.(bool_expression)sentence,id
项目集251:
if_expression->if(bool_expression)ifsentence.elsesentence,scanf
if_expression->if(bool_expression)ifsentence.elsesentence,printf
if_expression->if(bool_expression)ifsentence.elsesentence,if
if_expression->if(bool_expression)ifsentence.elsesentence,while
if_expression->if(bool_expression)ifsentence.elsesentence,for
if_expression->if(bool_expression)ifsentence.elsesentence,return
if_expression->if(bool_expression)ifsentence.elsesentence,array
if_expression->if(bool_expression)ifsentence.elsesentence,num
if_expression->if(bool_expression)ifsentence.elsesentence,/
if_expression->if(bool_expression)ifsentence.elsesentence,*
if_expression->if(bool_expression)ifsentence.elsesentence,-
if_expression->if(bool_expression)ifsentence.elsesentence,+
if_expression->if(bool_expression)ifsentence.elsesentence,char
if_expression->if(bool_expression)ifsentence.elsesentence,double
if_expression->if(bool_expression)ifsentence.elsesentence,int
if_expression->if(bool_expression)ifsentence.elsesentence,}
if_expression->if(bool_expression)ifsentence.elsesentence,{
if_expression->if(bool_expression)ifsentence.elsesentence,(
if_expression->if(bool_expression)ifsentence.elsesentence,id
项目集252:
sentence->inout_expression,scanf
sentence->inout_expression,printf
sentence->inout_expression,else
sentence->inout_expression,if
sentence->inout_expression,while
sentence->inout_expression,for
sentence->inout_expression,return
sentence->inout_expression,array
sentence->inout_expression,num
sentence->inout_expression,/
sentence->inout_expression,*
sentence->inout_expression,-
sentence->inout_expression,+
sentence->inout_expression,char
sentence->inout_expression,double
sentence->inout_expression,int
sentence->inout_expression,}
sentence->inout_expression,{
sentence->inout_expression,(
sentence->inout_expression,id
项目集253:
inout_expression->printf_expression,scanf
inout_expression->printf_expression,printf
inout_expression->printf_expression,else
inout_expression->printf_expression,if
inout_expression->printf_expression,while
inout_expression->printf_expression,for
inout_expression->printf_expression,return
inout_expression->printf_expression,array
inout_expression->printf_expression,num
inout_expression->printf_expression,/
inout_expression->printf_expression,*
inout_expression->printf_expression,-
inout_expression->printf_expression,+
inout_expression->printf_expression,char
inout_expression->printf_expression,double
inout_expression->printf_expression,int
inout_expression->printf_expression,}
inout_expression->printf_expression,{
inout_expression->printf_expression,(
inout_expression->printf_expression,id
项目集254:
inout_expression->scanf_expression,scanf
inout_expression->scanf_expression,printf
inout_expression->scanf_expression,else
inout_expression->scanf_expression,if
inout_expression->scanf_expression,while
inout_expression->scanf_expression,for
inout_expression->scanf_expression,return
inout_expression->scanf_expression,array
inout_expression->scanf_expression,num
inout_expression->scanf_expression,/
inout_expression->scanf_expression,*
inout_expression->scanf_expression,-
inout_expression->scanf_expression,+
inout_expression->scanf_expression,char
inout_expression->scanf_expression,double
inout_expression->scanf_expression,int
inout_expression->scanf_expression,}
inout_expression->scanf_expression,{
inout_expression->scanf_expression,(
inout_expression->scanf_expression,id
项目集255:
printf_expression->printf.(string,expressions);,scanf
printf_expression->printf.(string,expressions);,printf
printf_expression->printf.(string,expressions);,else
printf_expression->printf.(string,expressions);,if
printf_expression->printf.(string,expressions);,while
printf_expression->printf.(string,expressions);,for
printf_expression->printf.(string,expressions);,return
printf_expression->printf.(string,expressions);,array
printf_expression->printf.(string,expressions);,num
printf_expression->printf.(string,expressions);,/
printf_expression->printf.(string,expressions);,*
printf_expression->printf.(string,expressions);,-
printf_expression->printf.(string,expressions);,+
printf_expression->printf.(string,expressions);,char
printf_expression->printf.(string,expressions);,double
printf_expression->printf.(string,expressions);,int
printf_expression->printf.(string,expressions);,}
printf_expression->printf.(string,expressions);,{
printf_expression->printf.(string,expressions);,(
printf_expression->printf.(string,expressions);,id
printf_expression->printf.(string);,scanf
printf_expression->printf.(string);,printf
printf_expression->printf.(string);,else
printf_expression->printf.(string);,if
printf_expression->printf.(string);,while
printf_expression->printf.(string);,for
printf_expression->printf.(string);,return
printf_expression->printf.(string);,array
printf_expression->printf.(string);,num
printf_expression->printf.(string);,/
printf_expression->printf.(string);,*
printf_expression->printf.(string);,-
printf_expression->printf.(string);,+
printf_expression->printf.(string);,char
printf_expression->printf.(string);,double
printf_expression->printf.(string);,int
printf_expression->printf.(string);,}
printf_expression->printf.(string);,{
printf_expression->printf.(string);,(
printf_expression->printf.(string);,id
项目集256:
scanf_expression->scanf.(string,getaddr);,scanf
scanf_expression->scanf.(string,getaddr);,printf
scanf_expression->scanf.(string,getaddr);,else
scanf_expression->scanf.(string,getaddr);,if
scanf_expression->scanf.(string,getaddr);,while
scanf_expression->scanf.(string,getaddr);,for
scanf_expression->scanf.(string,getaddr);,return
scanf_expression->scanf.(string,getaddr);,array
scanf_expression->scanf.(string,getaddr);,num
scanf_expression->scanf.(string,getaddr);,/
scanf_expression->scanf.(string,getaddr);,*
scanf_expression->scanf.(string,getaddr);,-
scanf_expression->scanf.(string,getaddr);,+
scanf_expression->scanf.(string,getaddr);,char
scanf_expression->scanf.(string,getaddr);,double
scanf_expression->scanf.(string,getaddr);,int
scanf_expression->scanf.(string,getaddr);,}
scanf_expression->scanf.(string,getaddr);,{
scanf_expression->scanf.(string,getaddr);,(
scanf_expression->scanf.(string,getaddr);,id
项目集257:
printf_expression->printf(string);,scanf
printf_expression->printf(string);,printf
printf_expression->printf(string);,if
printf_expression->printf(string);,while
printf_expression->printf(string);,for
printf_expression->printf(string);,return
printf_expression->printf(string);,array
printf_expression->printf(string);,num
printf_expression->printf(string);,/
printf_expression->printf(string);,*
printf_expression->printf(string);,-
printf_expression->printf(string);,+
printf_expression->printf(string);,char
printf_expression->printf(string);,double
printf_expression->printf(string);,int
printf_expression->printf(string);,}
printf_expression->printf(string);,{
printf_expression->printf(string);,(
printf_expression->printf(string);,id
项目集258:
expressions->id,)
expressions->id.,expressions,)
项目集259:
printf_expression->printf(string,expressions.);,scanf
printf_expression->printf(string,expressions.);,printf
printf_expression->printf(string,expressions.);,if
printf_expression->printf(string,expressions.);,while
printf_expression->printf(string,expressions.);,for
printf_expression->printf(string,expressions.);,return
printf_expression->printf(string,expressions.);,array
printf_expression->printf(string,expressions.);,num
printf_expression->printf(string,expressions.);,/
printf_expression->printf(string,expressions.);,*
printf_expression->printf(string,expressions.);,-
printf_expression->printf(string,expressions.);,+
printf_expression->printf(string,expressions.);,char
printf_expression->printf(string,expressions.);,double
printf_expression->printf(string,expressions.);,int
printf_expression->printf(string,expressions.);,}
printf_expression->printf(string,expressions.);,{
printf_expression->printf(string,expressions.);,(
printf_expression->printf(string,expressions.);,id
项目集260:
scanf_expression->scanf(string,getaddr.);,scanf
scanf_expression->scanf(string,getaddr.);,printf
scanf_expression->scanf(string,getaddr.);,if
scanf_expression->scanf(string,getaddr.);,while
scanf_expression->scanf(string,getaddr.);,for
scanf_expression->scanf(string,getaddr.);,return
scanf_expression->scanf(string,getaddr.);,array
scanf_expression->scanf(string,getaddr.);,num
scanf_expression->scanf(string,getaddr.);,/
scanf_expression->scanf(string,getaddr.);,*
scanf_expression->scanf(string,getaddr.);,-
scanf_expression->scanf(string,getaddr.);,+
scanf_expression->scanf(string,getaddr.);,char
scanf_expression->scanf(string,getaddr.);,double
scanf_expression->scanf(string,getaddr.);,int
scanf_expression->scanf(string,getaddr.);,}
scanf_expression->scanf(string,getaddr.);,{
scanf_expression->scanf(string,getaddr.);,(
scanf_expression->scanf(string,getaddr.);,id
项目集261:
getaddr->&.id,)
项目集262:
function_call->id(function_call_list),,
function_call->id(function_call_list),)
项目集263:
F->array[E],,
F->array[E],)
项目集264:
define->typearray[num];,scanf
define->typearray[num];,printf
define->typearray[num];,if
define->typearray[num];,while
define->typearray[num];,for
define->typearray[num];,return
define->typearray[num];,array
define->typearray[num];,num
define->typearray[num];,/
define->typearray[num];,*
define->typearray[num];,-
define->typearray[num];,+
define->typearray[num];,char
define->typearray[num];,double
define->typearray[num];,int
define->typearray[num];,}
define->typearray[num];,{
define->typearray[num];,(
define->typearray[num];,id
项目集265:
define->typearray[num]=.{nums};,scanf
define->typearray[num]=.{nums};,printf
define->typearray[num]=.{nums};,if
define->typearray[num]=.{nums};,while
define->typearray[num]=.{nums};,for
define->typearray[num]=.{nums};,return
define->typearray[num]=.{nums};,array
define->typearray[num]=.{nums};,num
define->typearray[num]=.{nums};,/
define->typearray[num]=.{nums};,*
define->typearray[num]=.{nums};,-
define->typearray[num]=.{nums};,+
define->typearray[num]=.{nums};,char
define->typearray[num]=.{nums};,double
define->typearray[num]=.{nums};,int
define->typearray[num]=.{nums};,}
define->typearray[num]=.{nums};,{
define->typearray[num]=.{nums};,(
define->typearray[num]=.{nums};,id
项目集266:
nums->.num,}
nums->.num,nums,}
define->typearray[]={.nums};,scanf
define->typearray[]={.nums};,printf
define->typearray[]={.nums};,if
define->typearray[]={.nums};,while
define->typearray[]={.nums};,for
define->typearray[]={.nums};,return
define->typearray[]={.nums};,array
define->typearray[]={.nums};,num
define->typearray[]={.nums};,/
define->typearray[]={.nums};,*
define->typearray[]={.nums};,-
define->typearray[]={.nums};,+
define->typearray[]={.nums};,char
define->typearray[]={.nums};,double
define->typearray[]={.nums};,int
define->typearray[]={.nums};,}
define->typearray[]={.nums};,{
define->typearray[]={.nums};,(
define->typearray[]={.nums};,id
项目集267:
function_call->id(function_call_list),]
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
项目集268:
set_value->array[E]=E,;
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集269:
F->array[E],]
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
项目集270:
set_value->array[E].=E,;
项目集271:
F->.function_call,,
F->.function_call,)
F->.array[E],,
F->.array[E],)
F->.id,,
F->.id,)
F->.num,,
F->.num,)
F->.(E),,
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),;
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),==
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),;
function_call->.id(),,
function_call->.id(),)
项目集272:
F->(E.),==
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),;
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集273:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集274:
Dec_expression->.id--,)
Inc_expression->.id++,)
IncorDec->.Dec_expression,)
IncorDec->.Inc_expression,)
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,id
项目集275:
H->.E,;
bool_expression->Gop.H,;
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集276:
function_call->id(function_call_list),==
function_call->id(function_call_list),>
function_call->id(function_call_list),<
function_call->id(function_call_list),<=
function_call->id(function_call_list),>=
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
function_call->id(function_call_list),)
项目集277:
F->.function_call,,
F->.function_call,)
F->.array[E],,
F->.array[E],)
F->.id,,
F->.id,)
F->.num,,
F->.num,)
F->.(E),,
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),==
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->.id(),,
function_call->.id(),)
项目集278:
F->(E.),==
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
E->E.-T,-
E->E.-T,+
E->E.-T,)
E->E.+T,-
E->E.+T,+
E->E.+T,)
项目集279:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->.array[E],]
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目集280:
F->array[E],==
F->array[E],>
F->array[E],<
F->array[E],<=
F->array[E],>=
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],)
项目集281:
sentence->{block.},scanf
sentence->{block.},printf
sentence->{block.},else
sentence->{block.},if
sentence->{block.},while
sentence->{block.},for
sentence->{block.},return
sentence->{block.},array
sentence->{block.},num
sentence->{block.},/
sentence->{block.},*
sentence->{block.},-
sentence->{block.},+
sentence->{block.},char
sentence->{block.},double
sentence->{block.},int
sentence->{block.},}
sentence->{block.},{
sentence->{block.},(
sentence->{block.},id
项目集282:
sentence->{},scanf
sentence->{},printf
sentence->{},else
sentence->{},if
sentence->{},while
sentence->{},for
sentence->{},return
sentence->{},array
sentence->{},num
sentence->{},/
sentence->{},*
sentence->{},-
sentence->{},+
sentence->{},char
sentence->{},double
sentence->{},int
sentence->{},}
sentence->{},{
sentence->{},(
sentence->{},id
项目集283:
define->typearray.[num];,scanf
define->typearray.[num];,printf
define->typearray.[num];,else
define->typearray.[num];,if
define->typearray.[num];,while
define->typearray.[num];,for
define->typearray.[num];,return
define->typearray.[num];,array
define->typearray.[num];,num
define->typearray.[num];,/
define->typearray.[num];,*
define->typearray.[num];,-
define->typearray.[num];,+
define->typearray.[num];,char
define->typearray.[num];,double
define->typearray.[num];,int
define->typearray.[num];,}
define->typearray.[num];,{
define->typearray.[num];,(
define->typearray.[num];,id
define->typearray.[]={nums};,scanf
define->typearray.[]={nums};,printf
define->typearray.[]={nums};,else
define->typearray.[]={nums};,if
define->typearray.[]={nums};,while
define->typearray.[]={nums};,for
define->typearray.[]={nums};,return
define->typearray.[]={nums};,array
define->typearray.[]={nums};,num
define->typearray.[]={nums};,/
define->typearray.[]={nums};,*
define->typearray.[]={nums};,-
define->typearray.[]={nums};,+
define->typearray.[]={nums};,char
define->typearray.[]={nums};,double
define->typearray.[]={nums};,int
define->typearray.[]={nums};,}
define->typearray.[]={nums};,{
define->typearray.[]={nums};,(
define->typearray.[]={nums};,id
define->typearray.[num]={nums};,scanf
define->typearray.[num]={nums};,printf
define->typearray.[num]={nums};,else
define->typearray.[num]={nums};,if
define->typearray.[num]={nums};,while
define->typearray.[num]={nums};,for
define->typearray.[num]={nums};,return
define->typearray.[num]={nums};,array
define->typearray.[num]={nums};,num
define->typearray.[num]={nums};,/
define->typearray.[num]={nums};,*
define->typearray.[num]={nums};,-
define->typearray.[num]={nums};,+
define->typearray.[num]={nums};,char
define->typearray.[num]={nums};,double
define->typearray.[num]={nums};,int
define->typearray.[num]={nums};,}
define->typearray.[num]={nums};,{
define->typearray.[num]={nums};,(
define->typearray.[num]={nums};,id
项目集284:
define->typeid_name.;,scanf
define->typeid_name.;,printf
define->typeid_name.;,else
define->typeid_name.;,if
define->typeid_name.;,while
define->typeid_name.;,for
define->typeid_name.;,return
define->typeid_name.;,array
define->typeid_name.;,num
define->typeid_name.;,/
define->typeid_name.;,*
define->typeid_name.;,-
define->typeid_name.;,+
define->typeid_name.;,char
define->typeid_name.;,double
define->typeid_name.;,int
define->typeid_name.;,}
define->typeid_name.;,{
define->typeid_name.;,(
define->typeid_name.;,id
define->typeid_name.=E;,scanf
define->typeid_name.=E;,printf
define->typeid_name.=E;,else
define->typeid_name.=E;,if
define->typeid_name.=E;,while
define->typeid_name.=E;,for
define->typeid_name.=E;,return
define->typeid_name.=E;,array
define->typeid_name.=E;,num
define->typeid_name.=E;,/
define->typeid_name.=E;,*
define->typeid_name.=E;,-
define->typeid_name.=E;,+
define->typeid_name.=E;,char
define->typeid_name.=E;,double
define->typeid_name.=E;,int
define->typeid_name.=E;,}
define->typeid_name.=E;,{
define->typeid_name.=E;,(
define->typeid_name.=E;,id
项目集285:
sentence->E;,scanf
sentence->E;,printf
sentence->E;,else
sentence->E;,if
sentence->E;,while
sentence->E;,for
sentence->E;,return
sentence->E;,array
sentence->E;,num
sentence->E;,/
sentence->E;,*
sentence->E;,-
sentence->E;,+
sentence->E;,char
sentence->E;,double
sentence->E;,int
sentence->E;,}
sentence->E;,{
sentence->E;,(
sentence->E;,id
项目集286:
sentence->returnE.;,scanf
sentence->returnE.;,printf
sentence->returnE.;,else
sentence->returnE.;,if
sentence->returnE.;,while
sentence->returnE.;,for
sentence->returnE.;,return
sentence->returnE.;,array
sentence->returnE.;,num
sentence->returnE.;,/
sentence->returnE.;,*
sentence->returnE.;,-
sentence->returnE.;,+
sentence->returnE.;,char
sentence->returnE.;,double
sentence->returnE.;,int
sentence->returnE.;,}
sentence->returnE.;,{
sentence->returnE.;,(
sentence->returnE.;,id
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集287:
sentence->set_value;,scanf
sentence->set_value;,printf
sentence->set_value;,else
sentence->set_value;,if
sentence->set_value;,while
sentence->set_value;,for
sentence->set_value;,return
sentence->set_value;,array
sentence->set_value;,num
sentence->set_value;,/
sentence->set_value;,*
sentence->set_value;,-
sentence->set_value;,+
sentence->set_value;,char
sentence->set_value;,double
sentence->set_value;,int
sentence->set_value;,}
sentence->set_value;,{
sentence->set_value;,(
sentence->set_value;,id
项目集288:
for_set_value->.set_value,;
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,id
set_value->.array[E]=E,;
set_value->.id=E,;
项目集289:
sentence->IncorDec;,scanf
sentence->IncorDec;,printf
sentence->IncorDec;,else
sentence->IncorDec;,if
sentence->IncorDec;,while
sentence->IncorDec;,for
sentence->IncorDec;,return
sentence->IncorDec;,array
sentence->IncorDec;,num
sentence->IncorDec;,/
sentence->IncorDec;,*
sentence->IncorDec;,-
sentence->IncorDec;,+
sentence->IncorDec;,char
sentence->IncorDec;,double
sentence->IncorDec;,int
sentence->IncorDec;,}
sentence->IncorDec;,{
sentence->IncorDec;,(
sentence->IncorDec;,id
项目集290:
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
while_expression->while1(.bool_expression)whilesentence,scanf
while_expression->while1(.bool_expression)whilesentence,printf
while_expression->while1(.bool_expression)whilesentence,else
while_expression->while1(.bool_expression)whilesentence,if
while_expression->while1(.bool_expression)whilesentence,while
while_expression->while1(.bool_expression)whilesentence,for
while_expression->while1(.bool_expression)whilesentence,return
while_expression->while1(.bool_expression)whilesentence,array
while_expression->while1(.bool_expression)whilesentence,num
while_expression->while1(.bool_expression)whilesentence,/
while_expression->while1(.bool_expression)whilesentence,*
while_expression->while1(.bool_expression)whilesentence,-
while_expression->while1(.bool_expression)whilesentence,+
while_expression->while1(.bool_expression)whilesentence,char
while_expression->while1(.bool_expression)whilesentence,double
while_expression->while1(.bool_expression)whilesentence,int
while_expression->while1(.bool_expression)whilesentence,}
while_expression->while1(.bool_expression)whilesentence,{
while_expression->while1(.bool_expression)whilesentence,(
while_expression->while1(.bool_expression)whilesentence,id
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集291:
if_expression->if(.bool_expression)ifsentenceelsesentence,scanf
if_expression->if(.bool_expression)ifsentenceelsesentence,printf
if_expression->if(.bool_expression)ifsentenceelsesentence,else
if_expression->if(.bool_expression)ifsentenceelsesentence,if
if_expression->if(.bool_expression)ifsentenceelsesentence,while
if_expression->if(.bool_expression)ifsentenceelsesentence,for
if_expression->if(.bool_expression)ifsentenceelsesentence,return
if_expression->if(.bool_expression)ifsentenceelsesentence,array
if_expression->if(.bool_expression)ifsentenceelsesentence,num
if_expression->if(.bool_expression)ifsentenceelsesentence,/
if_expression->if(.bool_expression)ifsentenceelsesentence,*
if_expression->if(.bool_expression)ifsentenceelsesentence,-
if_expression->if(.bool_expression)ifsentenceelsesentence,+
if_expression->if(.bool_expression)ifsentenceelsesentence,char
if_expression->if(.bool_expression)ifsentenceelsesentence,double
if_expression->if(.bool_expression)ifsentenceelsesentence,int
if_expression->if(.bool_expression)ifsentenceelsesentence,}
if_expression->if(.bool_expression)ifsentenceelsesentence,{
if_expression->if(.bool_expression)ifsentenceelsesentence,(
if_expression->if(.bool_expression)ifsentenceelsesentence,id
if_expression->if(.bool_expression)sentence,scanf
if_expression->if(.bool_expression)sentence,printf
if_expression->if(.bool_expression)sentence,else
if_expression->if(.bool_expression)sentence,if
if_expression->if(.bool_expression)sentence,while
if_expression->if(.bool_expression)sentence,for
if_expression->if(.bool_expression)sentence,return
if_expression->if(.bool_expression)sentence,array
if_expression->if(.bool_expression)sentence,num
if_expression->if(.bool_expression)sentence,/
if_expression->if(.bool_expression)sentence,*
if_expression->if(.bool_expression)sentence,-
if_expression->if(.bool_expression)sentence,+
if_expression->if(.bool_expression)sentence,char
if_expression->if(.bool_expression)sentence,double
if_expression->if(.bool_expression)sentence,int
if_expression->if(.bool_expression)sentence,}
if_expression->if(.bool_expression)sentence,{
if_expression->if(.bool_expression)sentence,(
if_expression->if(.bool_expression)sentence,id
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目集292:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->if(bool_expression)ifsentenceelse.sentence,scanf
if_expression->if(bool_expression)ifsentenceelse.sentence,printf
if_expression->if(bool_expression)ifsentenceelse.sentence,if
if_expression->if(bool_expression)ifsentenceelse.sentence,while
if_expression->if(bool_expression)ifsentenceelse.sentence,for
if_expression->if(bool_expression)ifsentenceelse.sentence,return
if_expression->if(bool_expression)ifsentenceelse.sentence,array
if_expression->if(bool_expression)ifsentenceelse.sentence,num
if_expression->if(bool_expression)ifsentenceelse.sentence,/
if_expression->if(bool_expression)ifsentenceelse.sentence,*
if_expression->if(bool_expression)ifsentenceelse.sentence,-
if_expression->if(bool_expression)ifsentenceelse.sentence,+
if_expression->if(bool_expression)ifsentenceelse.sentence,char
if_expression->if(bool_expression)ifsentenceelse.sentence,double
if_expression->if(bool_expression)ifsentenceelse.sentence,int
if_expression->if(bool_expression)ifsentenceelse.sentence,}
if_expression->if(bool_expression)ifsentenceelse.sentence,{
if_expression->if(bool_expression)ifsentenceelse.sentence,(
if_expression->if(bool_expression)ifsentenceelse.sentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集293:
printf_expression->printf(.string,expressions);,scanf
printf_expression->printf(.string,expressions);,printf
printf_expression->printf(.string,expressions);,else
printf_expression->printf(.string,expressions);,if
printf_expression->printf(.string,expressions);,while
printf_expression->printf(.string,expressions);,for
printf_expression->printf(.string,expressions);,return
printf_expression->printf(.string,expressions);,array
printf_expression->printf(.string,expressions);,num
printf_expression->printf(.string,expressions);,/
printf_expression->printf(.string,expressions);,*
printf_expression->printf(.string,expressions);,-
printf_expression->printf(.string,expressions);,+
printf_expression->printf(.string,expressions);,char
printf_expression->printf(.string,expressions);,double
printf_expression->printf(.string,expressions);,int
printf_expression->printf(.string,expressions);,}
printf_expression->printf(.string,expressions);,{
printf_expression->printf(.string,expressions);,(
printf_expression->printf(.string,expressions);,id
printf_expression->printf(.string);,scanf
printf_expression->printf(.string);,printf
printf_expression->printf(.string);,else
printf_expression->printf(.string);,if
printf_expression->printf(.string);,while
printf_expression->printf(.string);,for
printf_expression->printf(.string);,return
printf_expression->printf(.string);,array
printf_expression->printf(.string);,num
printf_expression->printf(.string);,/
printf_expression->printf(.string);,*
printf_expression->printf(.string);,-
printf_expression->printf(.string);,+
printf_expression->printf(.string);,char
printf_expression->printf(.string);,double
printf_expression->printf(.string);,int
printf_expression->printf(.string);,}
printf_expression->printf(.string);,{
printf_expression->printf(.string);,(
printf_expression->printf(.string);,id
项目集294:
scanf_expression->scanf(.string,getaddr);,scanf
scanf_expression->scanf(.string,getaddr);,printf
scanf_expression->scanf(.string,getaddr);,else
scanf_expression->scanf(.string,getaddr);,if
scanf_expression->scanf(.string,getaddr);,while
scanf_expression->scanf(.string,getaddr);,for
scanf_expression->scanf(.string,getaddr);,return
scanf_expression->scanf(.string,getaddr);,array
scanf_expression->scanf(.string,getaddr);,num
scanf_expression->scanf(.string,getaddr);,/
scanf_expression->scanf(.string,getaddr);,*
scanf_expression->scanf(.string,getaddr);,-
scanf_expression->scanf(.string,getaddr);,+
scanf_expression->scanf(.string,getaddr);,char
scanf_expression->scanf(.string,getaddr);,double
scanf_expression->scanf(.string,getaddr);,int
scanf_expression->scanf(.string,getaddr);,}
scanf_expression->scanf(.string,getaddr);,{
scanf_expression->scanf(.string,getaddr);,(
scanf_expression->scanf(.string,getaddr);,id
项目集295:
expressions->.id,)
expressions->id,.expressions,)
expressions->.id,expressions,)
项目集296:
printf_expression->printf(string,expressions).;,scanf
printf_expression->printf(string,expressions).;,printf
printf_expression->printf(string,expressions).;,if
printf_expression->printf(string,expressions).;,while
printf_expression->printf(string,expressions).;,for
printf_expression->printf(string,expressions).;,return
printf_expression->printf(string,expressions).;,array
printf_expression->printf(string,expressions).;,num
printf_expression->printf(string,expressions).;,/
printf_expression->printf(string,expressions).;,*
printf_expression->printf(string,expressions).;,-
printf_expression->printf(string,expressions).;,+
printf_expression->printf(string,expressions).;,char
printf_expression->printf(string,expressions).;,double
printf_expression->printf(string,expressions).;,int
printf_expression->printf(string,expressions).;,}
printf_expression->printf(string,expressions).;,{
printf_expression->printf(string,expressions).;,(
printf_expression->printf(string,expressions).;,id
项目集297:
scanf_expression->scanf(string,getaddr).;,scanf
scanf_expression->scanf(string,getaddr).;,printf
scanf_expression->scanf(string,getaddr).;,if
scanf_expression->scanf(string,getaddr).;,while
scanf_expression->scanf(string,getaddr).;,for
scanf_expression->scanf(string,getaddr).;,return
scanf_expression->scanf(string,getaddr).;,array
scanf_expression->scanf(string,getaddr).;,num
scanf_expression->scanf(string,getaddr).;,/
scanf_expression->scanf(string,getaddr).;,*
scanf_expression->scanf(string,getaddr).;,-
scanf_expression->scanf(string,getaddr).;,+
scanf_expression->scanf(string,getaddr).;,char
scanf_expression->scanf(string,getaddr).;,double
scanf_expression->scanf(string,getaddr).;,int
scanf_expression->scanf(string,getaddr).;,}
scanf_expression->scanf(string,getaddr).;,{
scanf_expression->scanf(string,getaddr).;,(
scanf_expression->scanf(string,getaddr).;,id
项目集298:
getaddr->&id,)
项目集299:
nums->.num,}
nums->.num,nums,}
define->typearray[num]={.nums};,scanf
define->typearray[num]={.nums};,printf
define->typearray[num]={.nums};,if
define->typearray[num]={.nums};,while
define->typearray[num]={.nums};,for
define->typearray[num]={.nums};,return
define->typearray[num]={.nums};,array
define->typearray[num]={.nums};,num
define->typearray[num]={.nums};,/
define->typearray[num]={.nums};,*
define->typearray[num]={.nums};,-
define->typearray[num]={.nums};,+
define->typearray[num]={.nums};,char
define->typearray[num]={.nums};,double
define->typearray[num]={.nums};,int
define->typearray[num]={.nums};,}
define->typearray[num]={.nums};,{
define->typearray[num]={.nums};,(
define->typearray[num]={.nums};,id
项目集300:
nums->num,}
nums->num.,nums,}
项目集301:
define->typearray[]={nums.};,scanf
define->typearray[]={nums.};,printf
define->typearray[]={nums.};,if
define->typearray[]={nums.};,while
define->typearray[]={nums.};,for
define->typearray[]={nums.};,return
define->typearray[]={nums.};,array
define->typearray[]={nums.};,num
define->typearray[]={nums.};,/
define->typearray[]={nums.};,*
define->typearray[]={nums.};,-
define->typearray[]={nums.};,+
define->typearray[]={nums.};,char
define->typearray[]={nums.};,double
define->typearray[]={nums.};,int
define->typearray[]={nums.};,}
define->typearray[]={nums.};,{
define->typearray[]={nums.};,(
define->typearray[]={nums.};,id
项目集302:
function_call->id(),==
function_call->id(),>
function_call->id(),<
function_call->id(),<=
function_call->id(),>=
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
function_call->id(),;
项目集303:
function_call_list->function_call_list.,F,,
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),==
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),;
项目集304:
F->(E),==
F->(E),>
F->(E),<
F->(E),<=
F->(E),>=
F->(E),/
F->(E),*
F->(E),-
F->(E),+
F->(E),;
项目集305:
F->array[E.],==
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集306:
Dec_expression->id.--,)
Inc_expression->id.++,)
项目集307:
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,id
项目集308:
IncorDec->Inc_expression,)
项目集309:
IncorDec->Dec_expression,)
项目集310:
H->E,;
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集311:
bool_expression->GopH,;
项目集312:
function_call->id(),==
function_call->id(),>
function_call->id(),<
function_call->id(),<=
function_call->id(),>=
function_call->id(),/
function_call->id(),*
function_call->id(),-
function_call->id(),+
项目集313:
function_call_list->function_call_list.,F,,
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),==
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
项目集314:
F->(E),==
F->(E),>
F->(E),<
F->(E),<=
F->(E),>=
F->(E),/
F->(E),*
F->(E),-
F->(E),+
项目集315:
F->array[E.],==
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
E->E.-T,]
E->E.-T,-
E->E.-T,+
E->E.+T,]
E->E.+T,-
E->E.+T,+
项目集316:
sentence->{block},scanf
sentence->{block},printf
sentence->{block},else
sentence->{block},if
sentence->{block},while
sentence->{block},for
sentence->{block},return
sentence->{block},array
sentence->{block},num
sentence->{block},/
sentence->{block},*
sentence->{block},-
sentence->{block},+
sentence->{block},char
sentence->{block},double
sentence->{block},int
sentence->{block},}
sentence->{block},{
sentence->{block},(
sentence->{block},id
项目集317:
define->typearray[.num];,scanf
define->typearray[.num];,printf
define->typearray[.num];,else
define->typearray[.num];,if
define->typearray[.num];,while
define->typearray[.num];,for
define->typearray[.num];,return
define->typearray[.num];,array
define->typearray[.num];,num
define->typearray[.num];,/
define->typearray[.num];,*
define->typearray[.num];,-
define->typearray[.num];,+
define->typearray[.num];,char
define->typearray[.num];,double
define->typearray[.num];,int
define->typearray[.num];,}
define->typearray[.num];,{
define->typearray[.num];,(
define->typearray[.num];,id
define->typearray[.]={nums};,scanf
define->typearray[.]={nums};,printf
define->typearray[.]={nums};,else
define->typearray[.]={nums};,if
define->typearray[.]={nums};,while
define->typearray[.]={nums};,for
define->typearray[.]={nums};,return
define->typearray[.]={nums};,array
define->typearray[.]={nums};,num
define->typearray[.]={nums};,/
define->typearray[.]={nums};,*
define->typearray[.]={nums};,-
define->typearray[.]={nums};,+
define->typearray[.]={nums};,char
define->typearray[.]={nums};,double
define->typearray[.]={nums};,int
define->typearray[.]={nums};,}
define->typearray[.]={nums};,{
define->typearray[.]={nums};,(
define->typearray[.]={nums};,id
define->typearray[.num]={nums};,scanf
define->typearray[.num]={nums};,printf
define->typearray[.num]={nums};,else
define->typearray[.num]={nums};,if
define->typearray[.num]={nums};,while
define->typearray[.num]={nums};,for
define->typearray[.num]={nums};,return
define->typearray[.num]={nums};,array
define->typearray[.num]={nums};,num
define->typearray[.num]={nums};,/
define->typearray[.num]={nums};,*
define->typearray[.num]={nums};,-
define->typearray[.num]={nums};,+
define->typearray[.num]={nums};,char
define->typearray[.num]={nums};,double
define->typearray[.num]={nums};,int
define->typearray[.num]={nums};,}
define->typearray[.num]={nums};,{
define->typearray[.num]={nums};,(
define->typearray[.num]={nums};,id
项目集318:
define->typeid_name;,scanf
define->typeid_name;,printf
define->typeid_name;,else
define->typeid_name;,if
define->typeid_name;,while
define->typeid_name;,for
define->typeid_name;,return
define->typeid_name;,array
define->typeid_name;,num
define->typeid_name;,/
define->typeid_name;,*
define->typeid_name;,-
define->typeid_name;,+
define->typeid_name;,char
define->typeid_name;,double
define->typeid_name;,int
define->typeid_name;,}
define->typeid_name;,{
define->typeid_name;,(
define->typeid_name;,id
项目集319:
define->typeid_name=.E;,scanf
define->typeid_name=.E;,printf
define->typeid_name=.E;,else
define->typeid_name=.E;,if
define->typeid_name=.E;,while
define->typeid_name=.E;,for
define->typeid_name=.E;,return
define->typeid_name=.E;,array
define->typeid_name=.E;,num
define->typeid_name=.E;,/
define->typeid_name=.E;,*
define->typeid_name=.E;,-
define->typeid_name=.E;,+
define->typeid_name=.E;,char
define->typeid_name=.E;,double
define->typeid_name=.E;,int
define->typeid_name=.E;,}
define->typeid_name=.E;,{
define->typeid_name=.E;,(
define->typeid_name=.E;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集320:
sentence->returnE;,scanf
sentence->returnE;,printf
sentence->returnE;,else
sentence->returnE;,if
sentence->returnE;,while
sentence->returnE;,for
sentence->returnE;,return
sentence->returnE;,array
sentence->returnE;,num
sentence->returnE;,/
sentence->returnE;,*
sentence->returnE;,-
sentence->returnE;,+
sentence->returnE;,char
sentence->returnE;,double
sentence->returnE;,int
sentence->returnE;,}
sentence->returnE;,{
sentence->returnE;,(
sentence->returnE;,id
项目集321:
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,id
项目集322:
while_expression->while1(bool_expression.)whilesentence,scanf
while_expression->while1(bool_expression.)whilesentence,printf
while_expression->while1(bool_expression.)whilesentence,else
while_expression->while1(bool_expression.)whilesentence,if
while_expression->while1(bool_expression.)whilesentence,while
while_expression->while1(bool_expression.)whilesentence,for
while_expression->while1(bool_expression.)whilesentence,return
while_expression->while1(bool_expression.)whilesentence,array
while_expression->while1(bool_expression.)whilesentence,num
while_expression->while1(bool_expression.)whilesentence,/
while_expression->while1(bool_expression.)whilesentence,*
while_expression->while1(bool_expression.)whilesentence,-
while_expression->while1(bool_expression.)whilesentence,+
while_expression->while1(bool_expression.)whilesentence,char
while_expression->while1(bool_expression.)whilesentence,double
while_expression->while1(bool_expression.)whilesentence,int
while_expression->while1(bool_expression.)whilesentence,}
while_expression->while1(bool_expression.)whilesentence,{
while_expression->while1(bool_expression.)whilesentence,(
while_expression->while1(bool_expression.)whilesentence,id
项目集323:
if_expression->if(bool_expression.)ifsentenceelsesentence,scanf
if_expression->if(bool_expression.)ifsentenceelsesentence,printf
if_expression->if(bool_expression.)ifsentenceelsesentence,else
if_expression->if(bool_expression.)ifsentenceelsesentence,if
if_expression->if(bool_expression.)ifsentenceelsesentence,while
if_expression->if(bool_expression.)ifsentenceelsesentence,for
if_expression->if(bool_expression.)ifsentenceelsesentence,return
if_expression->if(bool_expression.)ifsentenceelsesentence,array
if_expression->if(bool_expression.)ifsentenceelsesentence,num
if_expression->if(bool_expression.)ifsentenceelsesentence,/
if_expression->if(bool_expression.)ifsentenceelsesentence,*
if_expression->if(bool_expression.)ifsentenceelsesentence,-
if_expression->if(bool_expression.)ifsentenceelsesentence,+
if_expression->if(bool_expression.)ifsentenceelsesentence,char
if_expression->if(bool_expression.)ifsentenceelsesentence,double
if_expression->if(bool_expression.)ifsentenceelsesentence,int
if_expression->if(bool_expression.)ifsentenceelsesentence,}
if_expression->if(bool_expression.)ifsentenceelsesentence,{
if_expression->if(bool_expression.)ifsentenceelsesentence,(
if_expression->if(bool_expression.)ifsentenceelsesentence,id
if_expression->if(bool_expression.)sentence,scanf
if_expression->if(bool_expression.)sentence,printf
if_expression->if(bool_expression.)sentence,else
if_expression->if(bool_expression.)sentence,if
if_expression->if(bool_expression.)sentence,while
if_expression->if(bool_expression.)sentence,for
if_expression->if(bool_expression.)sentence,return
if_expression->if(bool_expression.)sentence,array
if_expression->if(bool_expression.)sentence,num
if_expression->if(bool_expression.)sentence,/
if_expression->if(bool_expression.)sentence,*
if_expression->if(bool_expression.)sentence,-
if_expression->if(bool_expression.)sentence,+
if_expression->if(bool_expression.)sentence,char
if_expression->if(bool_expression.)sentence,double
if_expression->if(bool_expression.)sentence,int
if_expression->if(bool_expression.)sentence,}
if_expression->if(bool_expression.)sentence,{
if_expression->if(bool_expression.)sentence,(
if_expression->if(bool_expression.)sentence,id
项目集324:
if_expression->if(bool_expression)ifsentenceelsesentence,scanf
if_expression->if(bool_expression)ifsentenceelsesentence,printf
if_expression->if(bool_expression)ifsentenceelsesentence,if
if_expression->if(bool_expression)ifsentenceelsesentence,while
if_expression->if(bool_expression)ifsentenceelsesentence,for
if_expression->if(bool_expression)ifsentenceelsesentence,return
if_expression->if(bool_expression)ifsentenceelsesentence,array
if_expression->if(bool_expression)ifsentenceelsesentence,num
if_expression->if(bool_expression)ifsentenceelsesentence,/
if_expression->if(bool_expression)ifsentenceelsesentence,*
if_expression->if(bool_expression)ifsentenceelsesentence,-
if_expression->if(bool_expression)ifsentenceelsesentence,+
if_expression->if(bool_expression)ifsentenceelsesentence,char
if_expression->if(bool_expression)ifsentenceelsesentence,double
if_expression->if(bool_expression)ifsentenceelsesentence,int
if_expression->if(bool_expression)ifsentenceelsesentence,}
if_expression->if(bool_expression)ifsentenceelsesentence,{
if_expression->if(bool_expression)ifsentenceelsesentence,(
if_expression->if(bool_expression)ifsentenceelsesentence,id
项目集325:
printf_expression->printf(string.,expressions);,scanf
printf_expression->printf(string.,expressions);,printf
printf_expression->printf(string.,expressions);,else
printf_expression->printf(string.,expressions);,if
printf_expression->printf(string.,expressions);,while
printf_expression->printf(string.,expressions);,for
printf_expression->printf(string.,expressions);,return
printf_expression->printf(string.,expressions);,array
printf_expression->printf(string.,expressions);,num
printf_expression->printf(string.,expressions);,/
printf_expression->printf(string.,expressions);,*
printf_expression->printf(string.,expressions);,-
printf_expression->printf(string.,expressions);,+
printf_expression->printf(string.,expressions);,char
printf_expression->printf(string.,expressions);,double
printf_expression->printf(string.,expressions);,int
printf_expression->printf(string.,expressions);,}
printf_expression->printf(string.,expressions);,{
printf_expression->printf(string.,expressions);,(
printf_expression->printf(string.,expressions);,id
printf_expression->printf(string.);,scanf
printf_expression->printf(string.);,printf
printf_expression->printf(string.);,else
printf_expression->printf(string.);,if
printf_expression->printf(string.);,while
printf_expression->printf(string.);,for
printf_expression->printf(string.);,return
printf_expression->printf(string.);,array
printf_expression->printf(string.);,num
printf_expression->printf(string.);,/
printf_expression->printf(string.);,*
printf_expression->printf(string.);,-
printf_expression->printf(string.);,+
printf_expression->printf(string.);,char
printf_expression->printf(string.);,double
printf_expression->printf(string.);,int
printf_expression->printf(string.);,}
printf_expression->printf(string.);,{
printf_expression->printf(string.);,(
printf_expression->printf(string.);,id
项目集326:
scanf_expression->scanf(string.,getaddr);,scanf
scanf_expression->scanf(string.,getaddr);,printf
scanf_expression->scanf(string.,getaddr);,else
scanf_expression->scanf(string.,getaddr);,if
scanf_expression->scanf(string.,getaddr);,while
scanf_expression->scanf(string.,getaddr);,for
scanf_expression->scanf(string.,getaddr);,return
scanf_expression->scanf(string.,getaddr);,array
scanf_expression->scanf(string.,getaddr);,num
scanf_expression->scanf(string.,getaddr);,/
scanf_expression->scanf(string.,getaddr);,*
scanf_expression->scanf(string.,getaddr);,-
scanf_expression->scanf(string.,getaddr);,+
scanf_expression->scanf(string.,getaddr);,char
scanf_expression->scanf(string.,getaddr);,double
scanf_expression->scanf(string.,getaddr);,int
scanf_expression->scanf(string.,getaddr);,}
scanf_expression->scanf(string.,getaddr);,{
scanf_expression->scanf(string.,getaddr);,(
scanf_expression->scanf(string.,getaddr);,id
项目集327:
expressions->id,expressions,)
项目集328:
printf_expression->printf(string,expressions);,scanf
printf_expression->printf(string,expressions);,printf
printf_expression->printf(string,expressions);,if
printf_expression->printf(string,expressions);,while
printf_expression->printf(string,expressions);,for
printf_expression->printf(string,expressions);,return
printf_expression->printf(string,expressions);,array
printf_expression->printf(string,expressions);,num
printf_expression->printf(string,expressions);,/
printf_expression->printf(string,expressions);,*
printf_expression->printf(string,expressions);,-
printf_expression->printf(string,expressions);,+
printf_expression->printf(string,expressions);,char
printf_expression->printf(string,expressions);,double
printf_expression->printf(string,expressions);,int
printf_expression->printf(string,expressions);,}
printf_expression->printf(string,expressions);,{
printf_expression->printf(string,expressions);,(
printf_expression->printf(string,expressions);,id
项目集329:
scanf_expression->scanf(string,getaddr);,scanf
scanf_expression->scanf(string,getaddr);,printf
scanf_expression->scanf(string,getaddr);,if
scanf_expression->scanf(string,getaddr);,while
scanf_expression->scanf(string,getaddr);,for
scanf_expression->scanf(string,getaddr);,return
scanf_expression->scanf(string,getaddr);,array
scanf_expression->scanf(string,getaddr);,num
scanf_expression->scanf(string,getaddr);,/
scanf_expression->scanf(string,getaddr);,*
scanf_expression->scanf(string,getaddr);,-
scanf_expression->scanf(string,getaddr);,+
scanf_expression->scanf(string,getaddr);,char
scanf_expression->scanf(string,getaddr);,double
scanf_expression->scanf(string,getaddr);,int
scanf_expression->scanf(string,getaddr);,}
scanf_expression->scanf(string,getaddr);,{
scanf_expression->scanf(string,getaddr);,(
scanf_expression->scanf(string,getaddr);,id
项目集330:
define->typearray[num]={nums.};,scanf
define->typearray[num]={nums.};,printf
define->typearray[num]={nums.};,if
define->typearray[num]={nums.};,while
define->typearray[num]={nums.};,for
define->typearray[num]={nums.};,return
define->typearray[num]={nums.};,array
define->typearray[num]={nums.};,num
define->typearray[num]={nums.};,/
define->typearray[num]={nums.};,*
define->typearray[num]={nums.};,-
define->typearray[num]={nums.};,+
define->typearray[num]={nums.};,char
define->typearray[num]={nums.};,double
define->typearray[num]={nums.};,int
define->typearray[num]={nums.};,}
define->typearray[num]={nums.};,{
define->typearray[num]={nums.};,(
define->typearray[num]={nums.};,id
项目集331:
nums->.num,}
nums->num,.nums,}
nums->.num,nums,}
项目集332:
define->typearray[]={nums}.;,scanf
define->typearray[]={nums}.;,printf
define->typearray[]={nums}.;,if
define->typearray[]={nums}.;,while
define->typearray[]={nums}.;,for
define->typearray[]={nums}.;,return
define->typearray[]={nums}.;,array
define->typearray[]={nums}.;,num
define->typearray[]={nums}.;,/
define->typearray[]={nums}.;,*
define->typearray[]={nums}.;,-
define->typearray[]={nums}.;,+
define->typearray[]={nums}.;,char
define->typearray[]={nums}.;,double
define->typearray[]={nums}.;,int
define->typearray[]={nums}.;,}
define->typearray[]={nums}.;,{
define->typearray[]={nums}.;,(
define->typearray[]={nums}.;,id
项目集333:
function_call->id(function_call_list),==
function_call->id(function_call_list),>
function_call->id(function_call_list),<
function_call->id(function_call_list),<=
function_call->id(function_call_list),>=
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
function_call->id(function_call_list),;
项目集334:
F->array[E],==
F->array[E],>
F->array[E],<
F->array[E],<=
F->array[E],>=
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
F->array[E],;
项目集335:
Inc_expression->id++,)
项目集336:
Dec_expression->id--,)
项目集337:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
forsentence->.sentence,scanf
forsentence->.sentence,printf
forsentence->.sentence,if
forsentence->.sentence,while
forsentence->.sentence,for
forsentence->.sentence,return
forsentence->.sentence,array
forsentence->.sentence,num
forsentence->.sentence,/
forsentence->.sentence,*
forsentence->.sentence,-
forsentence->.sentence,+
forsentence->.sentence,char
forsentence->.sentence,double
forsentence->.sentence,int
forsentence->.sentence,}
forsentence->.sentence,{
forsentence->.sentence,(
forsentence->.sentence,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集338:
function_call->id(function_call_list),==
function_call->id(function_call_list),>
function_call->id(function_call_list),<
function_call->id(function_call_list),<=
function_call->id(function_call_list),>=
function_call->id(function_call_list),/
function_call->id(function_call_list),*
function_call->id(function_call_list),-
function_call->id(function_call_list),+
项目集339:
F->array[E],==
F->array[E],>
F->array[E],<
F->array[E],<=
F->array[E],>=
F->array[E],/
F->array[E],*
F->array[E],-
F->array[E],+
项目集340:
define->typearray[num.];,scanf
define->typearray[num.];,printf
define->typearray[num.];,else
define->typearray[num.];,if
define->typearray[num.];,while
define->typearray[num.];,for
define->typearray[num.];,return
define->typearray[num.];,array
define->typearray[num.];,num
define->typearray[num.];,/
define->typearray[num.];,*
define->typearray[num.];,-
define->typearray[num.];,+
define->typearray[num.];,char
define->typearray[num.];,double
define->typearray[num.];,int
define->typearray[num.];,}
define->typearray[num.];,{
define->typearray[num.];,(
define->typearray[num.];,id
define->typearray[num.]={nums};,scanf
define->typearray[num.]={nums};,printf
define->typearray[num.]={nums};,else
define->typearray[num.]={nums};,if
define->typearray[num.]={nums};,while
define->typearray[num.]={nums};,for
define->typearray[num.]={nums};,return
define->typearray[num.]={nums};,array
define->typearray[num.]={nums};,num
define->typearray[num.]={nums};,/
define->typearray[num.]={nums};,*
define->typearray[num.]={nums};,-
define->typearray[num.]={nums};,+
define->typearray[num.]={nums};,char
define->typearray[num.]={nums};,double
define->typearray[num.]={nums};,int
define->typearray[num.]={nums};,}
define->typearray[num.]={nums};,{
define->typearray[num.]={nums};,(
define->typearray[num.]={nums};,id
项目集341:
define->typearray[].={nums};,scanf
define->typearray[].={nums};,printf
define->typearray[].={nums};,else
define->typearray[].={nums};,if
define->typearray[].={nums};,while
define->typearray[].={nums};,for
define->typearray[].={nums};,return
define->typearray[].={nums};,array
define->typearray[].={nums};,num
define->typearray[].={nums};,/
define->typearray[].={nums};,*
define->typearray[].={nums};,-
define->typearray[].={nums};,+
define->typearray[].={nums};,char
define->typearray[].={nums};,double
define->typearray[].={nums};,int
define->typearray[].={nums};,}
define->typearray[].={nums};,{
define->typearray[].={nums};,(
define->typearray[].={nums};,id
项目集342:
define->typeid_name=E.;,scanf
define->typeid_name=E.;,printf
define->typeid_name=E.;,else
define->typeid_name=E.;,if
define->typeid_name=E.;,while
define->typeid_name=E.;,for
define->typeid_name=E.;,return
define->typeid_name=E.;,array
define->typeid_name=E.;,num
define->typeid_name=E.;,/
define->typeid_name=E.;,*
define->typeid_name=E.;,-
define->typeid_name=E.;,+
define->typeid_name=E.;,char
define->typeid_name=E.;,double
define->typeid_name=E.;,int
define->typeid_name=E.;,}
define->typeid_name=E.;,{
define->typeid_name=E.;,(
define->typeid_name=E.;,id
E->E.-T,-
E->E.-T,+
E->E.-T,;
E->E.+T,-
E->E.+T,+
E->E.+T,;
项目集343:
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,;
bool_expression->.GopH,;
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,id
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],==
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,==
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,==
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),==
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集344:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
whilesentence->.sentence,scanf
whilesentence->.sentence,printf
whilesentence->.sentence,else
whilesentence->.sentence,if
whilesentence->.sentence,while
whilesentence->.sentence,for
whilesentence->.sentence,return
whilesentence->.sentence,array
whilesentence->.sentence,num
whilesentence->.sentence,/
whilesentence->.sentence,*
whilesentence->.sentence,-
whilesentence->.sentence,+
whilesentence->.sentence,char
whilesentence->.sentence,double
whilesentence->.sentence,int
whilesentence->.sentence,}
whilesentence->.sentence,{
whilesentence->.sentence,(
whilesentence->.sentence,id
while1->.while,(
while_expression->while1(bool_expression).whilesentence,scanf
while_expression->while1(bool_expression).whilesentence,printf
while_expression->while1(bool_expression).whilesentence,else
while_expression->while1(bool_expression).whilesentence,if
while_expression->while1(bool_expression).whilesentence,while
while_expression->while1(bool_expression).whilesentence,for
while_expression->while1(bool_expression).whilesentence,return
while_expression->while1(bool_expression).whilesentence,array
while_expression->while1(bool_expression).whilesentence,num
while_expression->while1(bool_expression).whilesentence,/
while_expression->while1(bool_expression).whilesentence,*
while_expression->while1(bool_expression).whilesentence,-
while_expression->while1(bool_expression).whilesentence,+
while_expression->while1(bool_expression).whilesentence,char
while_expression->while1(bool_expression).whilesentence,double
while_expression->while1(bool_expression).whilesentence,int
while_expression->while1(bool_expression).whilesentence,}
while_expression->while1(bool_expression).whilesentence,{
while_expression->while1(bool_expression).whilesentence,(
while_expression->while1(bool_expression).whilesentence,id
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集345:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
ifsentence->.sentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,scanf
if_expression->if(bool_expression).ifsentenceelsesentence,printf
if_expression->if(bool_expression).ifsentenceelsesentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,if
if_expression->if(bool_expression).ifsentenceelsesentence,while
if_expression->if(bool_expression).ifsentenceelsesentence,for
if_expression->if(bool_expression).ifsentenceelsesentence,return
if_expression->if(bool_expression).ifsentenceelsesentence,array
if_expression->if(bool_expression).ifsentenceelsesentence,num
if_expression->if(bool_expression).ifsentenceelsesentence,/
if_expression->if(bool_expression).ifsentenceelsesentence,*
if_expression->if(bool_expression).ifsentenceelsesentence,-
if_expression->if(bool_expression).ifsentenceelsesentence,+
if_expression->if(bool_expression).ifsentenceelsesentence,char
if_expression->if(bool_expression).ifsentenceelsesentence,double
if_expression->if(bool_expression).ifsentenceelsesentence,int
if_expression->if(bool_expression).ifsentenceelsesentence,}
if_expression->if(bool_expression).ifsentenceelsesentence,{
if_expression->if(bool_expression).ifsentenceelsesentence,(
if_expression->if(bool_expression).ifsentenceelsesentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->if(bool_expression).sentence,scanf
if_expression->if(bool_expression).sentence,printf
if_expression->if(bool_expression).sentence,else
if_expression->if(bool_expression).sentence,if
if_expression->if(bool_expression).sentence,while
if_expression->if(bool_expression).sentence,for
if_expression->if(bool_expression).sentence,return
if_expression->if(bool_expression).sentence,array
if_expression->if(bool_expression).sentence,num
if_expression->if(bool_expression).sentence,/
if_expression->if(bool_expression).sentence,*
if_expression->if(bool_expression).sentence,-
if_expression->if(bool_expression).sentence,+
if_expression->if(bool_expression).sentence,char
if_expression->if(bool_expression).sentence,double
if_expression->if(bool_expression).sentence,int
if_expression->if(bool_expression).sentence,}
if_expression->if(bool_expression).sentence,{
if_expression->if(bool_expression).sentence,(
if_expression->if(bool_expression).sentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集346:
printf_expression->printf(string).;,scanf
printf_expression->printf(string).;,printf
printf_expression->printf(string).;,else
printf_expression->printf(string).;,if
printf_expression->printf(string).;,while
printf_expression->printf(string).;,for
printf_expression->printf(string).;,return
printf_expression->printf(string).;,array
printf_expression->printf(string).;,num
printf_expression->printf(string).;,/
printf_expression->printf(string).;,*
printf_expression->printf(string).;,-
printf_expression->printf(string).;,+
printf_expression->printf(string).;,char
printf_expression->printf(string).;,double
printf_expression->printf(string).;,int
printf_expression->printf(string).;,}
printf_expression->printf(string).;,{
printf_expression->printf(string).;,(
printf_expression->printf(string).;,id
项目集347:
expressions->.id,)
expressions->.id,expressions,)
printf_expression->printf(string,.expressions);,scanf
printf_expression->printf(string,.expressions);,printf
printf_expression->printf(string,.expressions);,else
printf_expression->printf(string,.expressions);,if
printf_expression->printf(string,.expressions);,while
printf_expression->printf(string,.expressions);,for
printf_expression->printf(string,.expressions);,return
printf_expression->printf(string,.expressions);,array
printf_expression->printf(string,.expressions);,num
printf_expression->printf(string,.expressions);,/
printf_expression->printf(string,.expressions);,*
printf_expression->printf(string,.expressions);,-
printf_expression->printf(string,.expressions);,+
printf_expression->printf(string,.expressions);,char
printf_expression->printf(string,.expressions);,double
printf_expression->printf(string,.expressions);,int
printf_expression->printf(string,.expressions);,}
printf_expression->printf(string,.expressions);,{
printf_expression->printf(string,.expressions);,(
printf_expression->printf(string,.expressions);,id
项目集348:
getaddr->.&id,)
scanf_expression->scanf(string,.getaddr);,scanf
scanf_expression->scanf(string,.getaddr);,printf
scanf_expression->scanf(string,.getaddr);,else
scanf_expression->scanf(string,.getaddr);,if
scanf_expression->scanf(string,.getaddr);,while
scanf_expression->scanf(string,.getaddr);,for
scanf_expression->scanf(string,.getaddr);,return
scanf_expression->scanf(string,.getaddr);,array
scanf_expression->scanf(string,.getaddr);,num
scanf_expression->scanf(string,.getaddr);,/
scanf_expression->scanf(string,.getaddr);,*
scanf_expression->scanf(string,.getaddr);,-
scanf_expression->scanf(string,.getaddr);,+
scanf_expression->scanf(string,.getaddr);,char
scanf_expression->scanf(string,.getaddr);,double
scanf_expression->scanf(string,.getaddr);,int
scanf_expression->scanf(string,.getaddr);,}
scanf_expression->scanf(string,.getaddr);,{
scanf_expression->scanf(string,.getaddr);,(
scanf_expression->scanf(string,.getaddr);,id
项目集349:
define->typearray[num]={nums}.;,scanf
define->typearray[num]={nums}.;,printf
define->typearray[num]={nums}.;,if
define->typearray[num]={nums}.;,while
define->typearray[num]={nums}.;,for
define->typearray[num]={nums}.;,return
define->typearray[num]={nums}.;,array
define->typearray[num]={nums}.;,num
define->typearray[num]={nums}.;,/
define->typearray[num]={nums}.;,*
define->typearray[num]={nums}.;,-
define->typearray[num]={nums}.;,+
define->typearray[num]={nums}.;,char
define->typearray[num]={nums}.;,double
define->typearray[num]={nums}.;,int
define->typearray[num]={nums}.;,}
define->typearray[num]={nums}.;,{
define->typearray[num]={nums}.;,(
define->typearray[num]={nums}.;,id
项目集350:
nums->num,nums,}
项目集351:
define->typearray[]={nums};,scanf
define->typearray[]={nums};,printf
define->typearray[]={nums};,if
define->typearray[]={nums};,while
define->typearray[]={nums};,for
define->typearray[]={nums};,return
define->typearray[]={nums};,array
define->typearray[]={nums};,num
define->typearray[]={nums};,/
define->typearray[]={nums};,*
define->typearray[]={nums};,-
define->typearray[]={nums};,+
define->typearray[]={nums};,char
define->typearray[]={nums};,double
define->typearray[]={nums};,int
define->typearray[]={nums};,}
define->typearray[]={nums};,{
define->typearray[]={nums};,(
define->typearray[]={nums};,id
项目集352:
forsentence->sentence,scanf
forsentence->sentence,printf
forsentence->sentence,if
forsentence->sentence,while
forsentence->sentence,for
forsentence->sentence,return
forsentence->sentence,array
forsentence->sentence,num
forsentence->sentence,/
forsentence->sentence,*
forsentence->sentence,-
forsentence->sentence,+
forsentence->sentence,char
forsentence->sentence,double
forsentence->sentence,int
forsentence->sentence,}
forsentence->sentence,{
forsentence->sentence,(
forsentence->sentence,id
项目集353:
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,id
项目集354:
define->typearray[num].;,scanf
define->typearray[num].;,printf
define->typearray[num].;,else
define->typearray[num].;,if
define->typearray[num].;,while
define->typearray[num].;,for
define->typearray[num].;,return
define->typearray[num].;,array
define->typearray[num].;,num
define->typearray[num].;,/
define->typearray[num].;,*
define->typearray[num].;,-
define->typearray[num].;,+
define->typearray[num].;,char
define->typearray[num].;,double
define->typearray[num].;,int
define->typearray[num].;,}
define->typearray[num].;,{
define->typearray[num].;,(
define->typearray[num].;,id
define->typearray[num].={nums};,scanf
define->typearray[num].={nums};,printf
define->typearray[num].={nums};,else
define->typearray[num].={nums};,if
define->typearray[num].={nums};,while
define->typearray[num].={nums};,for
define->typearray[num].={nums};,return
define->typearray[num].={nums};,array
define->typearray[num].={nums};,num
define->typearray[num].={nums};,/
define->typearray[num].={nums};,*
define->typearray[num].={nums};,-
define->typearray[num].={nums};,+
define->typearray[num].={nums};,char
define->typearray[num].={nums};,double
define->typearray[num].={nums};,int
define->typearray[num].={nums};,}
define->typearray[num].={nums};,{
define->typearray[num].={nums};,(
define->typearray[num].={nums};,id
项目集355:
define->typearray[]=.{nums};,scanf
define->typearray[]=.{nums};,printf
define->typearray[]=.{nums};,else
define->typearray[]=.{nums};,if
define->typearray[]=.{nums};,while
define->typearray[]=.{nums};,for
define->typearray[]=.{nums};,return
define->typearray[]=.{nums};,array
define->typearray[]=.{nums};,num
define->typearray[]=.{nums};,/
define->typearray[]=.{nums};,*
define->typearray[]=.{nums};,-
define->typearray[]=.{nums};,+
define->typearray[]=.{nums};,char
define->typearray[]=.{nums};,double
define->typearray[]=.{nums};,int
define->typearray[]=.{nums};,}
define->typearray[]=.{nums};,{
define->typearray[]=.{nums};,(
define->typearray[]=.{nums};,id
项目集356:
define->typeid_name=E;,scanf
define->typeid_name=E;,printf
define->typeid_name=E;,else
define->typeid_name=E;,if
define->typeid_name=E;,while
define->typeid_name=E;,for
define->typeid_name=E;,return
define->typeid_name=E;,array
define->typeid_name=E;,num
define->typeid_name=E;,/
define->typeid_name=E;,*
define->typeid_name=E;,-
define->typeid_name=E;,+
define->typeid_name=E;,char
define->typeid_name=E;,double
define->typeid_name=E;,int
define->typeid_name=E;,}
define->typeid_name=E;,{
define->typeid_name=E;,(
define->typeid_name=E;,id
项目集357:
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,id
项目集358:
whilesentence->sentence,scanf
whilesentence->sentence,printf
whilesentence->sentence,else
whilesentence->sentence,if
whilesentence->sentence,while
whilesentence->sentence,for
whilesentence->sentence,return
whilesentence->sentence,array
whilesentence->sentence,num
whilesentence->sentence,/
whilesentence->sentence,*
whilesentence->sentence,-
whilesentence->sentence,+
whilesentence->sentence,char
whilesentence->sentence,double
whilesentence->sentence,int
whilesentence->sentence,}
whilesentence->sentence,{
whilesentence->sentence,(
whilesentence->sentence,id
项目集359:
while_expression->while1(bool_expression)whilesentence,scanf
while_expression->while1(bool_expression)whilesentence,printf
while_expression->while1(bool_expression)whilesentence,else
while_expression->while1(bool_expression)whilesentence,if
while_expression->while1(bool_expression)whilesentence,while
while_expression->while1(bool_expression)whilesentence,for
while_expression->while1(bool_expression)whilesentence,return
while_expression->while1(bool_expression)whilesentence,array
while_expression->while1(bool_expression)whilesentence,num
while_expression->while1(bool_expression)whilesentence,/
while_expression->while1(bool_expression)whilesentence,*
while_expression->while1(bool_expression)whilesentence,-
while_expression->while1(bool_expression)whilesentence,+
while_expression->while1(bool_expression)whilesentence,char
while_expression->while1(bool_expression)whilesentence,double
while_expression->while1(bool_expression)whilesentence,int
while_expression->while1(bool_expression)whilesentence,}
while_expression->while1(bool_expression)whilesentence,{
while_expression->while1(bool_expression)whilesentence,(
while_expression->while1(bool_expression)whilesentence,id
项目集360:
ifsentence->sentence,else
if_expression->if(bool_expression)sentence,scanf
if_expression->if(bool_expression)sentence,printf
if_expression->if(bool_expression)sentence,else
if_expression->if(bool_expression)sentence,if
if_expression->if(bool_expression)sentence,while
if_expression->if(bool_expression)sentence,for
if_expression->if(bool_expression)sentence,return
if_expression->if(bool_expression)sentence,array
if_expression->if(bool_expression)sentence,num
if_expression->if(bool_expression)sentence,/
if_expression->if(bool_expression)sentence,*
if_expression->if(bool_expression)sentence,-
if_expression->if(bool_expression)sentence,+
if_expression->if(bool_expression)sentence,char
if_expression->if(bool_expression)sentence,double
if_expression->if(bool_expression)sentence,int
if_expression->if(bool_expression)sentence,}
if_expression->if(bool_expression)sentence,{
if_expression->if(bool_expression)sentence,(
if_expression->if(bool_expression)sentence,id
项目集361:
if_expression->if(bool_expression)ifsentence.elsesentence,scanf
if_expression->if(bool_expression)ifsentence.elsesentence,printf
if_expression->if(bool_expression)ifsentence.elsesentence,else
if_expression->if(bool_expression)ifsentence.elsesentence,if
if_expression->if(bool_expression)ifsentence.elsesentence,while
if_expression->if(bool_expression)ifsentence.elsesentence,for
if_expression->if(bool_expression)ifsentence.elsesentence,return
if_expression->if(bool_expression)ifsentence.elsesentence,array
if_expression->if(bool_expression)ifsentence.elsesentence,num
if_expression->if(bool_expression)ifsentence.elsesentence,/
if_expression->if(bool_expression)ifsentence.elsesentence,*
if_expression->if(bool_expression)ifsentence.elsesentence,-
if_expression->if(bool_expression)ifsentence.elsesentence,+
if_expression->if(bool_expression)ifsentence.elsesentence,char
if_expression->if(bool_expression)ifsentence.elsesentence,double
if_expression->if(bool_expression)ifsentence.elsesentence,int
if_expression->if(bool_expression)ifsentence.elsesentence,}
if_expression->if(bool_expression)ifsentence.elsesentence,{
if_expression->if(bool_expression)ifsentence.elsesentence,(
if_expression->if(bool_expression)ifsentence.elsesentence,id
项目集362:
printf_expression->printf(string);,scanf
printf_expression->printf(string);,printf
printf_expression->printf(string);,else
printf_expression->printf(string);,if
printf_expression->printf(string);,while
printf_expression->printf(string);,for
printf_expression->printf(string);,return
printf_expression->printf(string);,array
printf_expression->printf(string);,num
printf_expression->printf(string);,/
printf_expression->printf(string);,*
printf_expression->printf(string);,-
printf_expression->printf(string);,+
printf_expression->printf(string);,char
printf_expression->printf(string);,double
printf_expression->printf(string);,int
printf_expression->printf(string);,}
printf_expression->printf(string);,{
printf_expression->printf(string);,(
printf_expression->printf(string);,id
项目集363:
printf_expression->printf(string,expressions.);,scanf
printf_expression->printf(string,expressions.);,printf
printf_expression->printf(string,expressions.);,else
printf_expression->printf(string,expressions.);,if
printf_expression->printf(string,expressions.);,while
printf_expression->printf(string,expressions.);,for
printf_expression->printf(string,expressions.);,return
printf_expression->printf(string,expressions.);,array
printf_expression->printf(string,expressions.);,num
printf_expression->printf(string,expressions.);,/
printf_expression->printf(string,expressions.);,*
printf_expression->printf(string,expressions.);,-
printf_expression->printf(string,expressions.);,+
printf_expression->printf(string,expressions.);,char
printf_expression->printf(string,expressions.);,double
printf_expression->printf(string,expressions.);,int
printf_expression->printf(string,expressions.);,}
printf_expression->printf(string,expressions.);,{
printf_expression->printf(string,expressions.);,(
printf_expression->printf(string,expressions.);,id
项目集364:
scanf_expression->scanf(string,getaddr.);,scanf
scanf_expression->scanf(string,getaddr.);,printf
scanf_expression->scanf(string,getaddr.);,else
scanf_expression->scanf(string,getaddr.);,if
scanf_expression->scanf(string,getaddr.);,while
scanf_expression->scanf(string,getaddr.);,for
scanf_expression->scanf(string,getaddr.);,return
scanf_expression->scanf(string,getaddr.);,array
scanf_expression->scanf(string,getaddr.);,num
scanf_expression->scanf(string,getaddr.);,/
scanf_expression->scanf(string,getaddr.);,*
scanf_expression->scanf(string,getaddr.);,-
scanf_expression->scanf(string,getaddr.);,+
scanf_expression->scanf(string,getaddr.);,char
scanf_expression->scanf(string,getaddr.);,double
scanf_expression->scanf(string,getaddr.);,int
scanf_expression->scanf(string,getaddr.);,}
scanf_expression->scanf(string,getaddr.);,{
scanf_expression->scanf(string,getaddr.);,(
scanf_expression->scanf(string,getaddr.);,id
项目集365:
define->typearray[num]={nums};,scanf
define->typearray[num]={nums};,printf
define->typearray[num]={nums};,if
define->typearray[num]={nums};,while
define->typearray[num]={nums};,for
define->typearray[num]={nums};,return
define->typearray[num]={nums};,array
define->typearray[num]={nums};,num
define->typearray[num]={nums};,/
define->typearray[num]={nums};,*
define->typearray[num]={nums};,-
define->typearray[num]={nums};,+
define->typearray[num]={nums};,char
define->typearray[num]={nums};,double
define->typearray[num]={nums};,int
define->typearray[num]={nums};,}
define->typearray[num]={nums};,{
define->typearray[num]={nums};,(
define->typearray[num]={nums};,id
项目集366:
define->typearray[num];,scanf
define->typearray[num];,printf
define->typearray[num];,else
define->typearray[num];,if
define->typearray[num];,while
define->typearray[num];,for
define->typearray[num];,return
define->typearray[num];,array
define->typearray[num];,num
define->typearray[num];,/
define->typearray[num];,*
define->typearray[num];,-
define->typearray[num];,+
define->typearray[num];,char
define->typearray[num];,double
define->typearray[num];,int
define->typearray[num];,}
define->typearray[num];,{
define->typearray[num];,(
define->typearray[num];,id
项目集367:
define->typearray[num]=.{nums};,scanf
define->typearray[num]=.{nums};,printf
define->typearray[num]=.{nums};,else
define->typearray[num]=.{nums};,if
define->typearray[num]=.{nums};,while
define->typearray[num]=.{nums};,for
define->typearray[num]=.{nums};,return
define->typearray[num]=.{nums};,array
define->typearray[num]=.{nums};,num
define->typearray[num]=.{nums};,/
define->typearray[num]=.{nums};,*
define->typearray[num]=.{nums};,-
define->typearray[num]=.{nums};,+
define->typearray[num]=.{nums};,char
define->typearray[num]=.{nums};,double
define->typearray[num]=.{nums};,int
define->typearray[num]=.{nums};,}
define->typearray[num]=.{nums};,{
define->typearray[num]=.{nums};,(
define->typearray[num]=.{nums};,id
项目集368:
nums->.num,}
nums->.num,nums,}
define->typearray[]={.nums};,scanf
define->typearray[]={.nums};,printf
define->typearray[]={.nums};,else
define->typearray[]={.nums};,if
define->typearray[]={.nums};,while
define->typearray[]={.nums};,for
define->typearray[]={.nums};,return
define->typearray[]={.nums};,array
define->typearray[]={.nums};,num
define->typearray[]={.nums};,/
define->typearray[]={.nums};,*
define->typearray[]={.nums};,-
define->typearray[]={.nums};,+
define->typearray[]={.nums};,char
define->typearray[]={.nums};,double
define->typearray[]={.nums};,int
define->typearray[]={.nums};,}
define->typearray[]={.nums};,{
define->typearray[]={.nums};,(
define->typearray[]={.nums};,id
项目集369:
Dec_expression->.id--,)
Inc_expression->.id++,)
IncorDec->.Dec_expression,)
IncorDec->.Inc_expression,)
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,id
项目集370:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->if(bool_expression)ifsentenceelse.sentence,scanf
if_expression->if(bool_expression)ifsentenceelse.sentence,printf
if_expression->if(bool_expression)ifsentenceelse.sentence,else
if_expression->if(bool_expression)ifsentenceelse.sentence,if
if_expression->if(bool_expression)ifsentenceelse.sentence,while
if_expression->if(bool_expression)ifsentenceelse.sentence,for
if_expression->if(bool_expression)ifsentenceelse.sentence,return
if_expression->if(bool_expression)ifsentenceelse.sentence,array
if_expression->if(bool_expression)ifsentenceelse.sentence,num
if_expression->if(bool_expression)ifsentenceelse.sentence,/
if_expression->if(bool_expression)ifsentenceelse.sentence,*
if_expression->if(bool_expression)ifsentenceelse.sentence,-
if_expression->if(bool_expression)ifsentenceelse.sentence,+
if_expression->if(bool_expression)ifsentenceelse.sentence,char
if_expression->if(bool_expression)ifsentenceelse.sentence,double
if_expression->if(bool_expression)ifsentenceelse.sentence,int
if_expression->if(bool_expression)ifsentenceelse.sentence,}
if_expression->if(bool_expression)ifsentenceelse.sentence,{
if_expression->if(bool_expression)ifsentenceelse.sentence,(
if_expression->if(bool_expression)ifsentenceelse.sentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集371:
printf_expression->printf(string,expressions).;,scanf
printf_expression->printf(string,expressions).;,printf
printf_expression->printf(string,expressions).;,else
printf_expression->printf(string,expressions).;,if
printf_expression->printf(string,expressions).;,while
printf_expression->printf(string,expressions).;,for
printf_expression->printf(string,expressions).;,return
printf_expression->printf(string,expressions).;,array
printf_expression->printf(string,expressions).;,num
printf_expression->printf(string,expressions).;,/
printf_expression->printf(string,expressions).;,*
printf_expression->printf(string,expressions).;,-
printf_expression->printf(string,expressions).;,+
printf_expression->printf(string,expressions).;,char
printf_expression->printf(string,expressions).;,double
printf_expression->printf(string,expressions).;,int
printf_expression->printf(string,expressions).;,}
printf_expression->printf(string,expressions).;,{
printf_expression->printf(string,expressions).;,(
printf_expression->printf(string,expressions).;,id
项目集372:
scanf_expression->scanf(string,getaddr).;,scanf
scanf_expression->scanf(string,getaddr).;,printf
scanf_expression->scanf(string,getaddr).;,else
scanf_expression->scanf(string,getaddr).;,if
scanf_expression->scanf(string,getaddr).;,while
scanf_expression->scanf(string,getaddr).;,for
scanf_expression->scanf(string,getaddr).;,return
scanf_expression->scanf(string,getaddr).;,array
scanf_expression->scanf(string,getaddr).;,num
scanf_expression->scanf(string,getaddr).;,/
scanf_expression->scanf(string,getaddr).;,*
scanf_expression->scanf(string,getaddr).;,-
scanf_expression->scanf(string,getaddr).;,+
scanf_expression->scanf(string,getaddr).;,char
scanf_expression->scanf(string,getaddr).;,double
scanf_expression->scanf(string,getaddr).;,int
scanf_expression->scanf(string,getaddr).;,}
scanf_expression->scanf(string,getaddr).;,{
scanf_expression->scanf(string,getaddr).;,(
scanf_expression->scanf(string,getaddr).;,id
项目集373:
nums->.num,}
nums->.num,nums,}
define->typearray[num]={.nums};,scanf
define->typearray[num]={.nums};,printf
define->typearray[num]={.nums};,else
define->typearray[num]={.nums};,if
define->typearray[num]={.nums};,while
define->typearray[num]={.nums};,for
define->typearray[num]={.nums};,return
define->typearray[num]={.nums};,array
define->typearray[num]={.nums};,num
define->typearray[num]={.nums};,/
define->typearray[num]={.nums};,*
define->typearray[num]={.nums};,-
define->typearray[num]={.nums};,+
define->typearray[num]={.nums};,char
define->typearray[num]={.nums};,double
define->typearray[num]={.nums};,int
define->typearray[num]={.nums};,}
define->typearray[num]={.nums};,{
define->typearray[num]={.nums};,(
define->typearray[num]={.nums};,id
项目集374:
define->typearray[]={nums.};,scanf
define->typearray[]={nums.};,printf
define->typearray[]={nums.};,else
define->typearray[]={nums.};,if
define->typearray[]={nums.};,while
define->typearray[]={nums.};,for
define->typearray[]={nums.};,return
define->typearray[]={nums.};,array
define->typearray[]={nums.};,num
define->typearray[]={nums.};,/
define->typearray[]={nums.};,*
define->typearray[]={nums.};,-
define->typearray[]={nums.};,+
define->typearray[]={nums.};,char
define->typearray[]={nums.};,double
define->typearray[]={nums.};,int
define->typearray[]={nums.};,}
define->typearray[]={nums.};,{
define->typearray[]={nums.};,(
define->typearray[]={nums.};,id
项目集375:
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,id
项目集376:
if_expression->if(bool_expression)ifsentenceelsesentence,scanf
if_expression->if(bool_expression)ifsentenceelsesentence,printf
if_expression->if(bool_expression)ifsentenceelsesentence,else
if_expression->if(bool_expression)ifsentenceelsesentence,if
if_expression->if(bool_expression)ifsentenceelsesentence,while
if_expression->if(bool_expression)ifsentenceelsesentence,for
if_expression->if(bool_expression)ifsentenceelsesentence,return
if_expression->if(bool_expression)ifsentenceelsesentence,array
if_expression->if(bool_expression)ifsentenceelsesentence,num
if_expression->if(bool_expression)ifsentenceelsesentence,/
if_expression->if(bool_expression)ifsentenceelsesentence,*
if_expression->if(bool_expression)ifsentenceelsesentence,-
if_expression->if(bool_expression)ifsentenceelsesentence,+
if_expression->if(bool_expression)ifsentenceelsesentence,char
if_expression->if(bool_expression)ifsentenceelsesentence,double
if_expression->if(bool_expression)ifsentenceelsesentence,int
if_expression->if(bool_expression)ifsentenceelsesentence,}
if_expression->if(bool_expression)ifsentenceelsesentence,{
if_expression->if(bool_expression)ifsentenceelsesentence,(
if_expression->if(bool_expression)ifsentenceelsesentence,id
项目集377:
printf_expression->printf(string,expressions);,scanf
printf_expression->printf(string,expressions);,printf
printf_expression->printf(string,expressions);,else
printf_expression->printf(string,expressions);,if
printf_expression->printf(string,expressions);,while
printf_expression->printf(string,expressions);,for
printf_expression->printf(string,expressions);,return
printf_expression->printf(string,expressions);,array
printf_expression->printf(string,expressions);,num
printf_expression->printf(string,expressions);,/
printf_expression->printf(string,expressions);,*
printf_expression->printf(string,expressions);,-
printf_expression->printf(string,expressions);,+
printf_expression->printf(string,expressions);,char
printf_expression->printf(string,expressions);,double
printf_expression->printf(string,expressions);,int
printf_expression->printf(string,expressions);,}
printf_expression->printf(string,expressions);,{
printf_expression->printf(string,expressions);,(
printf_expression->printf(string,expressions);,id
项目集378:
scanf_expression->scanf(string,getaddr);,scanf
scanf_expression->scanf(string,getaddr);,printf
scanf_expression->scanf(string,getaddr);,else
scanf_expression->scanf(string,getaddr);,if
scanf_expression->scanf(string,getaddr);,while
scanf_expression->scanf(string,getaddr);,for
scanf_expression->scanf(string,getaddr);,return
scanf_expression->scanf(string,getaddr);,array
scanf_expression->scanf(string,getaddr);,num
scanf_expression->scanf(string,getaddr);,/
scanf_expression->scanf(string,getaddr);,*
scanf_expression->scanf(string,getaddr);,-
scanf_expression->scanf(string,getaddr);,+
scanf_expression->scanf(string,getaddr);,char
scanf_expression->scanf(string,getaddr);,double
scanf_expression->scanf(string,getaddr);,int
scanf_expression->scanf(string,getaddr);,}
scanf_expression->scanf(string,getaddr);,{
scanf_expression->scanf(string,getaddr);,(
scanf_expression->scanf(string,getaddr);,id
项目集379:
define->typearray[num]={nums.};,scanf
define->typearray[num]={nums.};,printf
define->typearray[num]={nums.};,else
define->typearray[num]={nums.};,if
define->typearray[num]={nums.};,while
define->typearray[num]={nums.};,for
define->typearray[num]={nums.};,return
define->typearray[num]={nums.};,array
define->typearray[num]={nums.};,num
define->typearray[num]={nums.};,/
define->typearray[num]={nums.};,*
define->typearray[num]={nums.};,-
define->typearray[num]={nums.};,+
define->typearray[num]={nums.};,char
define->typearray[num]={nums.};,double
define->typearray[num]={nums.};,int
define->typearray[num]={nums.};,}
define->typearray[num]={nums.};,{
define->typearray[num]={nums.};,(
define->typearray[num]={nums.};,id
项目集380:
define->typearray[]={nums}.;,scanf
define->typearray[]={nums}.;,printf
define->typearray[]={nums}.;,else
define->typearray[]={nums}.;,if
define->typearray[]={nums}.;,while
define->typearray[]={nums}.;,for
define->typearray[]={nums}.;,return
define->typearray[]={nums}.;,array
define->typearray[]={nums}.;,num
define->typearray[]={nums}.;,/
define->typearray[]={nums}.;,*
define->typearray[]={nums}.;,-
define->typearray[]={nums}.;,+
define->typearray[]={nums}.;,char
define->typearray[]={nums}.;,double
define->typearray[]={nums}.;,int
define->typearray[]={nums}.;,}
define->typearray[]={nums}.;,{
define->typearray[]={nums}.;,(
define->typearray[]={nums}.;,id
项目集381:
scanf_expression->.scanf(string,getaddr);,scanf
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
forsentence->.sentence,scanf
forsentence->.sentence,printf
forsentence->.sentence,else
forsentence->.sentence,if
forsentence->.sentence,while
forsentence->.sentence,for
forsentence->.sentence,return
forsentence->.sentence,array
forsentence->.sentence,num
forsentence->.sentence,/
forsentence->.sentence,*
forsentence->.sentence,-
forsentence->.sentence,+
forsentence->.sentence,char
forsentence->.sentence,double
forsentence->.sentence,int
forsentence->.sentence,}
forsentence->.sentence,{
forsentence->.sentence,(
forsentence->.sentence,id
while1->.while,(
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
type->.char,id
type->.double,array
type->.double,id
type->.int,array
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目集382:
define->typearray[num]={nums}.;,scanf
define->typearray[num]={nums}.;,printf
define->typearray[num]={nums}.;,else
define->typearray[num]={nums}.;,if
define->typearray[num]={nums}.;,while
define->typearray[num]={nums}.;,for
define->typearray[num]={nums}.;,return
define->typearray[num]={nums}.;,array
define->typearray[num]={nums}.;,num
define->typearray[num]={nums}.;,/
define->typearray[num]={nums}.;,*
define->typearray[num]={nums}.;,-
define->typearray[num]={nums}.;,+
define->typearray[num]={nums}.;,char
define->typearray[num]={nums}.;,double
define->typearray[num]={nums}.;,int
define->typearray[num]={nums}.;,}
define->typearray[num]={nums}.;,{
define->typearray[num]={nums}.;,(
define->typearray[num]={nums}.;,id
项目集383:
define->typearray[]={nums};,scanf
define->typearray[]={nums};,printf
define->typearray[]={nums};,else
define->typearray[]={nums};,if
define->typearray[]={nums};,while
define->typearray[]={nums};,for
define->typearray[]={nums};,return
define->typearray[]={nums};,array
define->typearray[]={nums};,num
define->typearray[]={nums};,/
define->typearray[]={nums};,*
define->typearray[]={nums};,-
define->typearray[]={nums};,+
define->typearray[]={nums};,char
define->typearray[]={nums};,double
define->typearray[]={nums};,int
define->typearray[]={nums};,}
define->typearray[]={nums};,{
define->typearray[]={nums};,(
define->typearray[]={nums};,id
项目集384:
forsentence->sentence,scanf
forsentence->sentence,printf
forsentence->sentence,else
forsentence->sentence,if
forsentence->sentence,while
forsentence->sentence,for
forsentence->sentence,return
forsentence->sentence,array
forsentence->sentence,num
forsentence->sentence,/
forsentence->sentence,*
forsentence->sentence,-
forsentence->sentence,+
forsentence->sentence,char
forsentence->sentence,double
forsentence->sentence,int
forsentence->sentence,}
forsentence->sentence,{
forsentence->sentence,(
forsentence->sentence,id
项目集385:
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,id
项目集386:
define->typearray[num]={nums};,scanf
define->typearray[num]={nums};,printf
define->typearray[num]={nums};,else
define->typearray[num]={nums};,if
define->typearray[num]={nums};,while
define->typearray[num]={nums};,for
define->typearray[num]={nums};,return
define->typearray[num]={nums};,array
define->typearray[num]={nums};,num
define->typearray[num]={nums};,/
define->typearray[num]={nums};,*
define->typearray[num]={nums};,-
define->typearray[num]={nums};,+
define->typearray[num]={nums};,char
define->typearray[num]={nums};,double
define->typearray[num]={nums};,int
define->typearray[num]={nums};,}
define->typearray[num]={nums};,{
define->typearray[num]={nums};,(
define->typearray[num]={nums};,id
项目0:
S'->.S,#
type->.char,id
shift:9
type->.double,id
shift:8
type->.int,id
shift:7
S->.function,#
function_type->.void,id
shift:5
function_type->.type,id
function_define->.function_typeid(function_define_list){block},char
function_define->.function_typeid(function_define_list){block},double
function_define->.function_typeid(function_define_list){block},int
function_define->.function_typeid(function_define_list){block},void
function_define->.function_typeid(function_define_list){block},#
function_define->.function_typeid(){block},char
function_define->.function_typeid(){block},double
function_define->.function_typeid(){block},int
function_define->.function_typeid(){block},void
function_define->.function_typeid(){block},#
function->.functionfunction_define,char
function->.functionfunction_define,double
function->.functionfunction_define,int
function->.functionfunction_define,void
function->.functionfunction_define,#
function->.function_define,char
function->.function_define,double
function->.function_define,int
function->.function_define,void
function->.function_define,#
项目1:
type->.char,id
shift:9
type->.double,id
shift:8
type->.int,id
shift:7
S->function,#
reduce:12
function_type->.void,id
shift:5
function_type->.type,id
function_define->.function_typeid(function_define_list){block},char
function_define->.function_typeid(function_define_list){block},double
function_define->.function_typeid(function_define_list){block},int
function_define->.function_typeid(function_define_list){block},void
function_define->.function_typeid(function_define_list){block},#
function_define->.function_typeid(){block},char
function_define->.function_typeid(){block},double
function_define->.function_typeid(){block},int
function_define->.function_typeid(){block},void
function_define->.function_typeid(){block},#
function->function.function_define,char
function->function.function_define,double
function->function.function_define,int
function->function.function_define,void
function->function.function_define,#
项目2:
function->function_define,char
reduce:0
function->function_define,double
reduce:0
function->function_define,int
reduce:0
function->function_define,void
reduce:0
function->function_define,#
reduce:0
项目3:
function_define->function_type.id(function_define_list){block},char
shift:11
function_define->function_type.id(function_define_list){block},double
function_define->function_type.id(function_define_list){block},int
function_define->function_type.id(function_define_list){block},void
function_define->function_type.id(function_define_list){block},#
function_define->function_type.id(){block},char
function_define->function_type.id(){block},double
function_define->function_type.id(){block},int
function_define->function_type.id(){block},void
function_define->function_type.id(){block},#
项目4:
function_type->type,id
reduce:4
项目5:
function_type->void,id
reduce:5
项目6:
S'->S,#
Accept
项目7:
type->int,id
reduce:13
项目8:
type->double,id
reduce:14
项目9:
type->char,id
reduce:15
项目10:
function->functionfunction_define,char
reduce:1
function->functionfunction_define,double
reduce:1
function->functionfunction_define,int
reduce:1
function->functionfunction_define,void
reduce:1
function->functionfunction_define,#
reduce:1
项目11:
function_define->function_typeid.(function_define_list){block},char
shift:12
function_define->function_typeid.(function_define_list){block},double
function_define->function_typeid.(function_define_list){block},int
function_define->function_typeid.(function_define_list){block},void
function_define->function_typeid.(function_define_list){block},#
function_define->function_typeid.(){block},char
function_define->function_typeid.(){block},double
function_define->function_typeid.(){block},int
function_define->function_typeid.(){block},void
function_define->function_typeid.(){block},#
项目12:
type->.char,id
shift:9
type->.double,id
shift:8
type->.int,id
shift:7
function_define_list->.function_define_list,typeid,,
function_define_list->.function_define_list,typeid,)
function_define_list->.typeid,,
function_define_list->.typeid,)
function_define->function_typeid(.function_define_list){block},char
function_define->function_typeid(.function_define_list){block},double
function_define->function_typeid(.function_define_list){block},int
function_define->function_typeid(.function_define_list){block},void
function_define->function_typeid(.function_define_list){block},#
function_define->function_typeid(.){block},char
shift:13
function_define->function_typeid(.){block},double
function_define->function_typeid(.){block},int
function_define->function_typeid(.){block},void
function_define->function_typeid(.){block},#
项目13:
function_define->function_typeid().{block},char
shift:16
function_define->function_typeid().{block},double
function_define->function_typeid().{block},int
function_define->function_typeid().{block},void
function_define->function_typeid().{block},#
项目14:
function_define_list->function_define_list.,typeid,,
shift:18
function_define_list->function_define_list.,typeid,)
function_define->function_typeid(function_define_list.){block},char
shift:17
function_define->function_typeid(function_define_list.){block},double
function_define->function_typeid(function_define_list.){block},int
function_define->function_typeid(function_define_list.){block},void
function_define->function_typeid(function_define_list.){block},#
项目15:
function_define_list->type.id,,
shift:19
function_define_list->type.id,)
项目16:
scanf_expression->.scanf(string,getaddr);,scanf
shift:52
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:51
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:47
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:40
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:35
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
function_define->function_typeid(){.block},char
function_define->function_typeid(){.block},double
function_define->function_typeid(){.block},int
function_define->function_typeid(){.block},void
function_define->function_typeid(){.block},#
项目17:
function_define->function_typeid(function_define_list).{block},char
shift:53
function_define->function_typeid(function_define_list).{block},double
function_define->function_typeid(function_define_list).{block},int
function_define->function_typeid(function_define_list).{block},void
function_define->function_typeid(function_define_list).{block},#
项目18:
type->.char,id
shift:9
type->.double,id
shift:8
type->.int,id
shift:7
function_define_list->function_define_list,.typeid,,
function_define_list->function_define_list,.typeid,)
项目19:
function_define_list->typeid,,
reduce:6
function_define_list->typeid,)
reduce:6
项目20:
Dec_expression->id.--,;
shift:58
Inc_expression->id.++,;
shift:57
set_value->id.=E,;
shift:56
F->id,/
reduce:29
F->id,*
reduce:29
F->id,-
reduce:29
F->id,+
reduce:29
F->id,;
reduce:29
function_call->id.(function_call_list),/
shift:55
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目21:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),;
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目22:
scanf_expression->.scanf(string,getaddr);,scanf
shift:52
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:51
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:47
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:40
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:35
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->{.},scanf
shift:68
sentence->{.},printf
sentence->{.},if
sentence->{.},while
sentence->{.},for
sentence->{.},return
sentence->{.},array
sentence->{.},num
sentence->{.},/
sentence->{.},*
sentence->{.},-
sentence->{.},+
sentence->{.},char
sentence->{.},double
sentence->{.},int
sentence->{.},}
sentence->{.},{
sentence->{.},(
sentence->{.},id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->{.block},scanf
sentence->{.block},printf
sentence->{.block},if
sentence->{.block},while
sentence->{.block},for
sentence->{.block},return
sentence->{.block},array
sentence->{.block},num
sentence->{.block},/
sentence->{.block},*
sentence->{.block},-
sentence->{.block},+
sentence->{.block},char
sentence->{.block},double
sentence->{.block},int
sentence->{.block},}
sentence->{.block},{
sentence->{.block},(
sentence->{.block},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目23:
function_define->function_typeid(){block.},char
shift:69
function_define->function_typeid(){block.},double
function_define->function_typeid(){block.},int
function_define->function_typeid(){block.},void
function_define->function_typeid(){block.},#
项目24:
define->type.array[num];,scanf
shift:71
define->type.array[num];,printf
define->type.array[num];,if
define->type.array[num];,while
define->type.array[num];,for
define->type.array[num];,return
define->type.array[num];,array
define->type.array[num];,num
define->type.array[num];,/
define->type.array[num];,*
define->type.array[num];,-
define->type.array[num];,+
define->type.array[num];,char
define->type.array[num];,double
define->type.array[num];,int
define->type.array[num];,}
define->type.array[num];,{
define->type.array[num];,(
define->type.array[num];,id
define->type.array[]={nums};,scanf
define->type.array[]={nums};,printf
define->type.array[]={nums};,if
define->type.array[]={nums};,while
define->type.array[]={nums};,for
define->type.array[]={nums};,return
define->type.array[]={nums};,array
define->type.array[]={nums};,num
define->type.array[]={nums};,/
define->type.array[]={nums};,*
define->type.array[]={nums};,-
define->type.array[]={nums};,+
define->type.array[]={nums};,char
define->type.array[]={nums};,double
define->type.array[]={nums};,int
define->type.array[]={nums};,}
define->type.array[]={nums};,{
define->type.array[]={nums};,(
define->type.array[]={nums};,id
define->type.array[num]={nums};,scanf
define->type.array[num]={nums};,printf
define->type.array[num]={nums};,if
define->type.array[num]={nums};,while
define->type.array[num]={nums};,for
define->type.array[num]={nums};,return
define->type.array[num]={nums};,array
define->type.array[num]={nums};,num
define->type.array[num]={nums};,/
define->type.array[num]={nums};,*
define->type.array[num]={nums};,-
define->type.array[num]={nums};,+
define->type.array[num]={nums};,char
define->type.array[num]={nums};,double
define->type.array[num]={nums};,int
define->type.array[num]={nums};,}
define->type.array[num]={nums};,{
define->type.array[num]={nums};,(
define->type.array[num]={nums};,id
id_name->.id,=
shift:70
id_name->.id,;
define->type.id_name;,scanf
define->type.id_name;,printf
define->type.id_name;,if
define->type.id_name;,while
define->type.id_name;,for
define->type.id_name;,return
define->type.id_name;,array
define->type.id_name;,num
define->type.id_name;,/
define->type.id_name;,*
define->type.id_name;,-
define->type.id_name;,+
define->type.id_name;,char
define->type.id_name;,double
define->type.id_name;,int
define->type.id_name;,}
define->type.id_name;,{
define->type.id_name;,(
define->type.id_name;,id
define->type.id_name=E;,scanf
define->type.id_name=E;,printf
define->type.id_name=E;,if
define->type.id_name=E;,while
define->type.id_name=E;,for
define->type.id_name=E;,return
define->type.id_name=E;,array
define->type.id_name=E;,num
define->type.id_name=E;,/
define->type.id_name=E;,*
define->type.id_name=E;,-
define->type.id_name=E;,+
define->type.id_name=E;,char
define->type.id_name=E;,double
define->type.id_name=E;,int
define->type.id_name=E;,}
define->type.id_name=E;,{
define->type.id_name=E;,(
define->type.id_name=E;,id
项目25:
F->function_call,/
reduce:31
F->function_call,*
reduce:31
F->function_call,-
reduce:31
F->function_call,+
reduce:31
F->function_call,;
reduce:31
项目26:
T->F,/
reduce:26
T->F,*
reduce:26
T->F,-
reduce:26
T->F,+
reduce:26
T->F,;
reduce:26
项目27:
type->int,array
reduce:13
type->int,id
reduce:13
项目28:
type->double,array
reduce:14
type->double,id
reduce:14
项目29:
type->char,array
reduce:15
type->char,id
reduce:15
项目30:
scanf_expression->.scanf(string,getaddr);,scanf
shift:52
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:51
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:47
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:40
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:35
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->sentence.block,}
block->.sentenceblock,}
block->sentence,}
reduce:16
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目31:
E->E.-T,-
shift:76
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:75
E->E.+T,+
E->E.+T,;
sentence->E.;,scanf
shift:74
sentence->E.;,printf
sentence->E.;,if
sentence->E.;,while
sentence->E.;,for
sentence->E.;,return
sentence->E.;,array
sentence->E.;,num
sentence->E.;,/
sentence->E.;,*
sentence->E.;,-
sentence->E.;,+
sentence->E.;,char
sentence->E.;,double
sentence->E.;,int
sentence->E.;,}
sentence->E.;,{
sentence->E.;,(
sentence->E.;,id
项目32:
T->T./F,/
shift:78
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,/
shift:77
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->T,-
reduce:23
E->T,+
reduce:23
E->T,;
reduce:23
项目33:
F->num,/
reduce:28
F->num,*
reduce:28
F->num,-
reduce:28
F->num,+
reduce:28
F->num,;
reduce:28
项目34:
set_value->array.[E]=E,;
shift:79
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目35:
sentence->return.E;,scanf
sentence->return.E;,printf
sentence->return.E;,if
sentence->return.E;,while
sentence->return.E;,for
sentence->return.E;,return
sentence->return.E;,array
sentence->return.E;,num
sentence->return.E;,/
sentence->return.E;,*
sentence->return.E;,-
sentence->return.E;,+
sentence->return.E;,char
sentence->return.E;,double
sentence->return.E;,int
sentence->return.E;,}
sentence->return.E;,{
sentence->return.E;,(
sentence->return.E;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目36:
sentence->define,scanf
reduce:33
sentence->define,printf
reduce:33
sentence->define,if
reduce:33
sentence->define,while
reduce:33
sentence->define,for
reduce:33
sentence->define,return
reduce:33
sentence->define,array
reduce:33
sentence->define,num
reduce:33
sentence->define,/
reduce:33
sentence->define,*
reduce:33
sentence->define,-
reduce:33
sentence->define,+
reduce:33
sentence->define,char
reduce:33
sentence->define,double
reduce:33
sentence->define,int
reduce:33
sentence->define,}
reduce:33
sentence->define,{
reduce:33
sentence->define,(
reduce:33
sentence->define,id
reduce:33
项目37:
sentence->set_value.;,scanf
shift:83
sentence->set_value.;,printf
sentence->set_value.;,if
sentence->set_value.;,while
sentence->set_value.;,for
sentence->set_value.;,return
sentence->set_value.;,array
sentence->set_value.;,num
sentence->set_value.;,/
sentence->set_value.;,*
sentence->set_value.;,-
sentence->set_value.;,+
sentence->set_value.;,char
sentence->set_value.;,double
sentence->set_value.;,int
sentence->set_value.;,}
sentence->set_value.;,{
sentence->set_value.;,(
sentence->set_value.;,id
项目38:
sentence->loop_expression,scanf
reduce:45
sentence->loop_expression,printf
reduce:45
sentence->loop_expression,if
reduce:45
sentence->loop_expression,while
reduce:45
sentence->loop_expression,for
reduce:45
sentence->loop_expression,return
reduce:45
sentence->loop_expression,array
reduce:45
sentence->loop_expression,num
reduce:45
sentence->loop_expression,/
reduce:45
sentence->loop_expression,*
reduce:45
sentence->loop_expression,-
reduce:45
sentence->loop_expression,+
reduce:45
sentence->loop_expression,char
reduce:45
sentence->loop_expression,double
reduce:45
sentence->loop_expression,int
reduce:45
sentence->loop_expression,}
reduce:45
sentence->loop_expression,{
reduce:45
sentence->loop_expression,(
reduce:45
sentence->loop_expression,id
reduce:45
项目39:
sentence->while_expression,scanf
reduce:46
sentence->while_expression,printf
reduce:46
sentence->while_expression,if
reduce:46
sentence->while_expression,while
reduce:46
sentence->while_expression,for
reduce:46
sentence->while_expression,return
reduce:46
sentence->while_expression,array
reduce:46
sentence->while_expression,num
reduce:46
sentence->while_expression,/
reduce:46
sentence->while_expression,*
reduce:46
sentence->while_expression,-
reduce:46
sentence->while_expression,+
reduce:46
sentence->while_expression,char
reduce:46
sentence->while_expression,double
reduce:46
sentence->while_expression,int
reduce:46
sentence->while_expression,}
reduce:46
sentence->while_expression,{
reduce:46
sentence->while_expression,(
reduce:46
sentence->while_expression,id
reduce:46
项目40:
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:84
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,id
项目41:
sentence->IncorDec.;,scanf
shift:85
sentence->IncorDec.;,printf
sentence->IncorDec.;,if
sentence->IncorDec.;,while
sentence->IncorDec.;,for
sentence->IncorDec.;,return
sentence->IncorDec.;,array
sentence->IncorDec.;,num
sentence->IncorDec.;,/
sentence->IncorDec.;,*
sentence->IncorDec.;,-
sentence->IncorDec.;,+
sentence->IncorDec.;,char
sentence->IncorDec.;,double
sentence->IncorDec.;,int
sentence->IncorDec.;,}
sentence->IncorDec.;,{
sentence->IncorDec.;,(
sentence->IncorDec.;,id
项目42:
while_expression->while1.(bool_expression)whilesentence,scanf
shift:86
while_expression->while1.(bool_expression)whilesentence,printf
while_expression->while1.(bool_expression)whilesentence,if
while_expression->while1.(bool_expression)whilesentence,while
while_expression->while1.(bool_expression)whilesentence,for
while_expression->while1.(bool_expression)whilesentence,return
while_expression->while1.(bool_expression)whilesentence,array
while_expression->while1.(bool_expression)whilesentence,num
while_expression->while1.(bool_expression)whilesentence,/
while_expression->while1.(bool_expression)whilesentence,*
while_expression->while1.(bool_expression)whilesentence,-
while_expression->while1.(bool_expression)whilesentence,+
while_expression->while1.(bool_expression)whilesentence,char
while_expression->while1.(bool_expression)whilesentence,double
while_expression->while1.(bool_expression)whilesentence,int
while_expression->while1.(bool_expression)whilesentence,}
while_expression->while1.(bool_expression)whilesentence,{
while_expression->while1.(bool_expression)whilesentence,(
while_expression->while1.(bool_expression)whilesentence,id
项目43:
while1->while,(
reduce:49
项目44:
IncorDec->Inc_expression,;
reduce:63
项目45:
IncorDec->Dec_expression,;
reduce:64
项目46:
sentence->if_expression,scanf
reduce:67
sentence->if_expression,printf
reduce:67
sentence->if_expression,if
reduce:67
sentence->if_expression,while
reduce:67
sentence->if_expression,for
reduce:67
sentence->if_expression,return
reduce:67
sentence->if_expression,array
reduce:67
sentence->if_expression,num
reduce:67
sentence->if_expression,/
reduce:67
sentence->if_expression,*
reduce:67
sentence->if_expression,-
reduce:67
sentence->if_expression,+
reduce:67
sentence->if_expression,char
reduce:67
sentence->if_expression,double
reduce:67
sentence->if_expression,int
reduce:67
sentence->if_expression,}
reduce:67
sentence->if_expression,{
reduce:67
sentence->if_expression,(
reduce:67
sentence->if_expression,id
reduce:67
项目47:
if_expression->if.(bool_expression)ifsentenceelsesentence,scanf
shift:87
if_expression->if.(bool_expression)ifsentenceelsesentence,printf
if_expression->if.(bool_expression)ifsentenceelsesentence,if
if_expression->if.(bool_expression)ifsentenceelsesentence,while
if_expression->if.(bool_expression)ifsentenceelsesentence,for
if_expression->if.(bool_expression)ifsentenceelsesentence,return
if_expression->if.(bool_expression)ifsentenceelsesentence,array
if_expression->if.(bool_expression)ifsentenceelsesentence,num
if_expression->if.(bool_expression)ifsentenceelsesentence,/
if_expression->if.(bool_expression)ifsentenceelsesentence,*
if_expression->if.(bool_expression)ifsentenceelsesentence,-
if_expression->if.(bool_expression)ifsentenceelsesentence,+
if_expression->if.(bool_expression)ifsentenceelsesentence,char
if_expression->if.(bool_expression)ifsentenceelsesentence,double
if_expression->if.(bool_expression)ifsentenceelsesentence,int
if_expression->if.(bool_expression)ifsentenceelsesentence,}
if_expression->if.(bool_expression)ifsentenceelsesentence,{
if_expression->if.(bool_expression)ifsentenceelsesentence,(
if_expression->if.(bool_expression)ifsentenceelsesentence,id
if_expression->if.(bool_expression)sentence,scanf
if_expression->if.(bool_expression)sentence,printf
if_expression->if.(bool_expression)sentence,if
if_expression->if.(bool_expression)sentence,while
if_expression->if.(bool_expression)sentence,for
if_expression->if.(bool_expression)sentence,return
if_expression->if.(bool_expression)sentence,array
if_expression->if.(bool_expression)sentence,num
if_expression->if.(bool_expression)sentence,/
if_expression->if.(bool_expression)sentence,*
if_expression->if.(bool_expression)sentence,-
if_expression->if.(bool_expression)sentence,+
if_expression->if.(bool_expression)sentence,char
if_expression->if.(bool_expression)sentence,double
if_expression->if.(bool_expression)sentence,int
if_expression->if.(bool_expression)sentence,}
if_expression->if.(bool_expression)sentence,{
if_expression->if.(bool_expression)sentence,(
if_expression->if.(bool_expression)sentence,id
项目48:
sentence->inout_expression,scanf
reduce:71
sentence->inout_expression,printf
reduce:71
sentence->inout_expression,if
reduce:71
sentence->inout_expression,while
reduce:71
sentence->inout_expression,for
reduce:71
sentence->inout_expression,return
reduce:71
sentence->inout_expression,array
reduce:71
sentence->inout_expression,num
reduce:71
sentence->inout_expression,/
reduce:71
sentence->inout_expression,*
reduce:71
sentence->inout_expression,-
reduce:71
sentence->inout_expression,+
reduce:71
sentence->inout_expression,char
reduce:71
sentence->inout_expression,double
reduce:71
sentence->inout_expression,int
reduce:71
sentence->inout_expression,}
reduce:71
sentence->inout_expression,{
reduce:71
sentence->inout_expression,(
reduce:71
sentence->inout_expression,id
reduce:71
项目49:
inout_expression->printf_expression,scanf
reduce:72
inout_expression->printf_expression,printf
reduce:72
inout_expression->printf_expression,if
reduce:72
inout_expression->printf_expression,while
reduce:72
inout_expression->printf_expression,for
reduce:72
inout_expression->printf_expression,return
reduce:72
inout_expression->printf_expression,array
reduce:72
inout_expression->printf_expression,num
reduce:72
inout_expression->printf_expression,/
reduce:72
inout_expression->printf_expression,*
reduce:72
inout_expression->printf_expression,-
reduce:72
inout_expression->printf_expression,+
reduce:72
inout_expression->printf_expression,char
reduce:72
inout_expression->printf_expression,double
reduce:72
inout_expression->printf_expression,int
reduce:72
inout_expression->printf_expression,}
reduce:72
inout_expression->printf_expression,{
reduce:72
inout_expression->printf_expression,(
reduce:72
inout_expression->printf_expression,id
reduce:72
项目50:
inout_expression->scanf_expression,scanf
reduce:73
inout_expression->scanf_expression,printf
reduce:73
inout_expression->scanf_expression,if
reduce:73
inout_expression->scanf_expression,while
reduce:73
inout_expression->scanf_expression,for
reduce:73
inout_expression->scanf_expression,return
reduce:73
inout_expression->scanf_expression,array
reduce:73
inout_expression->scanf_expression,num
reduce:73
inout_expression->scanf_expression,/
reduce:73
inout_expression->scanf_expression,*
reduce:73
inout_expression->scanf_expression,-
reduce:73
inout_expression->scanf_expression,+
reduce:73
inout_expression->scanf_expression,char
reduce:73
inout_expression->scanf_expression,double
reduce:73
inout_expression->scanf_expression,int
reduce:73
inout_expression->scanf_expression,}
reduce:73
inout_expression->scanf_expression,{
reduce:73
inout_expression->scanf_expression,(
reduce:73
inout_expression->scanf_expression,id
reduce:73
项目51:
printf_expression->printf.(string,expressions);,scanf
shift:88
printf_expression->printf.(string,expressions);,printf
printf_expression->printf.(string,expressions);,if
printf_expression->printf.(string,expressions);,while
printf_expression->printf.(string,expressions);,for
printf_expression->printf.(string,expressions);,return
printf_expression->printf.(string,expressions);,array
printf_expression->printf.(string,expressions);,num
printf_expression->printf.(string,expressions);,/
printf_expression->printf.(string,expressions);,*
printf_expression->printf.(string,expressions);,-
printf_expression->printf.(string,expressions);,+
printf_expression->printf.(string,expressions);,char
printf_expression->printf.(string,expressions);,double
printf_expression->printf.(string,expressions);,int
printf_expression->printf.(string,expressions);,}
printf_expression->printf.(string,expressions);,{
printf_expression->printf.(string,expressions);,(
printf_expression->printf.(string,expressions);,id
printf_expression->printf.(string);,scanf
printf_expression->printf.(string);,printf
printf_expression->printf.(string);,if
printf_expression->printf.(string);,while
printf_expression->printf.(string);,for
printf_expression->printf.(string);,return
printf_expression->printf.(string);,array
printf_expression->printf.(string);,num
printf_expression->printf.(string);,/
printf_expression->printf.(string);,*
printf_expression->printf.(string);,-
printf_expression->printf.(string);,+
printf_expression->printf.(string);,char
printf_expression->printf.(string);,double
printf_expression->printf.(string);,int
printf_expression->printf.(string);,}
printf_expression->printf.(string);,{
printf_expression->printf.(string);,(
printf_expression->printf.(string);,id
项目52:
scanf_expression->scanf.(string,getaddr);,scanf
shift:89
scanf_expression->scanf.(string,getaddr);,printf
scanf_expression->scanf.(string,getaddr);,if
scanf_expression->scanf.(string,getaddr);,while
scanf_expression->scanf.(string,getaddr);,for
scanf_expression->scanf.(string,getaddr);,return
scanf_expression->scanf.(string,getaddr);,array
scanf_expression->scanf.(string,getaddr);,num
scanf_expression->scanf.(string,getaddr);,/
scanf_expression->scanf.(string,getaddr);,*
scanf_expression->scanf.(string,getaddr);,-
scanf_expression->scanf.(string,getaddr);,+
scanf_expression->scanf.(string,getaddr);,char
scanf_expression->scanf.(string,getaddr);,double
scanf_expression->scanf.(string,getaddr);,int
scanf_expression->scanf.(string,getaddr);,}
scanf_expression->scanf.(string,getaddr);,{
scanf_expression->scanf.(string,getaddr);,(
scanf_expression->scanf.(string,getaddr);,id
项目53:
scanf_expression->.scanf(string,getaddr);,scanf
shift:52
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:51
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:47
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:40
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:35
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
function_define->function_typeid(function_define_list){.block},char
function_define->function_typeid(function_define_list){.block},double
function_define->function_typeid(function_define_list){.block},int
function_define->function_typeid(function_define_list){.block},void
function_define->function_typeid(function_define_list){.block},#
项目54:
function_define_list->function_define_list,type.id,,
shift:91
function_define_list->function_define_list,type.id,)
项目55:
F->.function_call,,
F->.function_call,)
F->.array[E],,
shift:99
F->.array[E],)
F->.id,,
shift:92
F->.id,)
F->.num,,
shift:98
F->.num,)
F->.(E),,
shift:93
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),;
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),/
shift:94
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),;
function_call->.id(),,
function_call->.id(),)
项目56:
set_value->id=.E,;
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目57:
Inc_expression->id++,;
reduce:65
项目58:
Dec_expression->id--,;
reduce:66
项目59:
F->id,/
reduce:29
F->id,*
reduce:29
F->id,-
reduce:29
F->id,+
reduce:29
F->id,)
reduce:29
function_call->id.(function_call_list),/
shift:101
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),)
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),)
项目60:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),)
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目61:
F->function_call,/
reduce:31
F->function_call,*
reduce:31
F->function_call,-
reduce:31
F->function_call,+
reduce:31
F->function_call,)
reduce:31
项目62:
T->F,/
reduce:26
T->F,*
reduce:26
T->F,-
reduce:26
T->F,+
reduce:26
T->F,)
reduce:26
项目63:
F->(E.),/
shift:103
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),;
E->E.-T,-
shift:105
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:104
E->E.+T,+
E->E.+T,)
项目64:
T->T./F,/
shift:107
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,/
shift:106
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->T,-
reduce:23
E->T,+
reduce:23
E->T,)
reduce:23
项目65:
F->num,/
reduce:28
F->num,*
reduce:28
F->num,-
reduce:28
F->num,+
reduce:28
F->num,)
reduce:28
项目66:
F->array.[E],/
shift:108
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],)
项目67:
sentence->{block.},scanf
shift:109
sentence->{block.},printf
sentence->{block.},if
sentence->{block.},while
sentence->{block.},for
sentence->{block.},return
sentence->{block.},array
sentence->{block.},num
sentence->{block.},/
sentence->{block.},*
sentence->{block.},-
sentence->{block.},+
sentence->{block.},char
sentence->{block.},double
sentence->{block.},int
sentence->{block.},}
sentence->{block.},{
sentence->{block.},(
sentence->{block.},id
项目68:
sentence->{},scanf
reduce:19
sentence->{},printf
reduce:19
sentence->{},if
reduce:19
sentence->{},while
reduce:19
sentence->{},for
reduce:19
sentence->{},return
reduce:19
sentence->{},array
reduce:19
sentence->{},num
reduce:19
sentence->{},/
reduce:19
sentence->{},*
reduce:19
sentence->{},-
reduce:19
sentence->{},+
reduce:19
sentence->{},char
reduce:19
sentence->{},double
reduce:19
sentence->{},int
reduce:19
sentence->{},}
reduce:19
sentence->{},{
reduce:19
sentence->{},(
reduce:19
sentence->{},id
reduce:19
项目69:
function_define->function_typeid(){block},char
reduce:2
function_define->function_typeid(){block},double
reduce:2
function_define->function_typeid(){block},int
reduce:2
function_define->function_typeid(){block},void
reduce:2
function_define->function_typeid(){block},#
reduce:2
项目70:
id_name->id,=
reduce:36
id_name->id,;
reduce:36
项目71:
define->typearray.[num];,scanf
shift:110
define->typearray.[num];,printf
define->typearray.[num];,if
define->typearray.[num];,while
define->typearray.[num];,for
define->typearray.[num];,return
define->typearray.[num];,array
define->typearray.[num];,num
define->typearray.[num];,/
define->typearray.[num];,*
define->typearray.[num];,-
define->typearray.[num];,+
define->typearray.[num];,char
define->typearray.[num];,double
define->typearray.[num];,int
define->typearray.[num];,}
define->typearray.[num];,{
define->typearray.[num];,(
define->typearray.[num];,id
define->typearray.[]={nums};,scanf
define->typearray.[]={nums};,printf
define->typearray.[]={nums};,if
define->typearray.[]={nums};,while
define->typearray.[]={nums};,for
define->typearray.[]={nums};,return
define->typearray.[]={nums};,array
define->typearray.[]={nums};,num
define->typearray.[]={nums};,/
define->typearray.[]={nums};,*
define->typearray.[]={nums};,-
define->typearray.[]={nums};,+
define->typearray.[]={nums};,char
define->typearray.[]={nums};,double
define->typearray.[]={nums};,int
define->typearray.[]={nums};,}
define->typearray.[]={nums};,{
define->typearray.[]={nums};,(
define->typearray.[]={nums};,id
define->typearray.[num]={nums};,scanf
define->typearray.[num]={nums};,printf
define->typearray.[num]={nums};,if
define->typearray.[num]={nums};,while
define->typearray.[num]={nums};,for
define->typearray.[num]={nums};,return
define->typearray.[num]={nums};,array
define->typearray.[num]={nums};,num
define->typearray.[num]={nums};,/
define->typearray.[num]={nums};,*
define->typearray.[num]={nums};,-
define->typearray.[num]={nums};,+
define->typearray.[num]={nums};,char
define->typearray.[num]={nums};,double
define->typearray.[num]={nums};,int
define->typearray.[num]={nums};,}
define->typearray.[num]={nums};,{
define->typearray.[num]={nums};,(
define->typearray.[num]={nums};,id
项目72:
define->typeid_name.;,scanf
shift:111
define->typeid_name.;,printf
define->typeid_name.;,if
define->typeid_name.;,while
define->typeid_name.;,for
define->typeid_name.;,return
define->typeid_name.;,array
define->typeid_name.;,num
define->typeid_name.;,/
define->typeid_name.;,*
define->typeid_name.;,-
define->typeid_name.;,+
define->typeid_name.;,char
define->typeid_name.;,double
define->typeid_name.;,int
define->typeid_name.;,}
define->typeid_name.;,{
define->typeid_name.;,(
define->typeid_name.;,id
define->typeid_name.=E;,scanf
shift:112
define->typeid_name.=E;,printf
define->typeid_name.=E;,if
define->typeid_name.=E;,while
define->typeid_name.=E;,for
define->typeid_name.=E;,return
define->typeid_name.=E;,array
define->typeid_name.=E;,num
define->typeid_name.=E;,/
define->typeid_name.=E;,*
define->typeid_name.=E;,-
define->typeid_name.=E;,+
define->typeid_name.=E;,char
define->typeid_name.=E;,double
define->typeid_name.=E;,int
define->typeid_name.=E;,}
define->typeid_name.=E;,{
define->typeid_name.=E;,(
define->typeid_name.=E;,id
项目73:
block->sentenceblock,}
reduce:17
项目74:
sentence->E;,scanf
reduce:20
sentence->E;,printf
reduce:20
sentence->E;,if
reduce:20
sentence->E;,while
reduce:20
sentence->E;,for
reduce:20
sentence->E;,return
reduce:20
sentence->E;,array
reduce:20
sentence->E;,num
reduce:20
sentence->E;,/
reduce:20
sentence->E;,*
reduce:20
sentence->E;,-
reduce:20
sentence->E;,+
reduce:20
sentence->E;,char
reduce:20
sentence->E;,double
reduce:20
sentence->E;,int
reduce:20
sentence->E;,}
reduce:20
sentence->E;,{
reduce:20
sentence->E;,(
reduce:20
sentence->E;,id
reduce:20
项目75:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->E+.T,-
E->E+.T,+
E->E+.T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目76:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->E-.T,-
E->E-.T,+
E->E-.T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目77:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目78:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目79:
set_value->array[.E]=E,;
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目80:
F->id,/
reduce:29
F->id,*
reduce:29
F->id,-
reduce:29
F->id,+
reduce:29
F->id,;
reduce:29
function_call->id.(function_call_list),/
shift:55
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目81:
sentence->returnE.;,scanf
shift:125
sentence->returnE.;,printf
sentence->returnE.;,if
sentence->returnE.;,while
sentence->returnE.;,for
sentence->returnE.;,return
sentence->returnE.;,array
sentence->returnE.;,num
sentence->returnE.;,/
sentence->returnE.;,*
sentence->returnE.;,-
sentence->returnE.;,+
sentence->returnE.;,char
sentence->returnE.;,double
sentence->returnE.;,int
sentence->returnE.;,}
sentence->returnE.;,{
sentence->returnE.;,(
sentence->returnE.;,id
E->E.-T,-
shift:76
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:75
E->E.+T,+
E->E.+T,;
项目82:
F->array.[E],/
shift:126
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目83:
sentence->set_value;,scanf
reduce:42
sentence->set_value;,printf
reduce:42
sentence->set_value;,if
reduce:42
sentence->set_value;,while
reduce:42
sentence->set_value;,for
reduce:42
sentence->set_value;,return
reduce:42
sentence->set_value;,array
reduce:42
sentence->set_value;,num
reduce:42
sentence->set_value;,/
reduce:42
sentence->set_value;,*
reduce:42
sentence->set_value;,-
reduce:42
sentence->set_value;,+
reduce:42
sentence->set_value;,char
reduce:42
sentence->set_value;,double
reduce:42
sentence->set_value;,int
reduce:42
sentence->set_value;,}
reduce:42
sentence->set_value;,{
reduce:42
sentence->set_value;,(
reduce:42
sentence->set_value;,id
reduce:42
项目84:
for_set_value->.set_value,;
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,id
set_value->.array[E]=E,;
shift:128
set_value->.id=E,;
shift:127
项目85:
sentence->IncorDec;,scanf
reduce:62
sentence->IncorDec;,printf
reduce:62
sentence->IncorDec;,if
reduce:62
sentence->IncorDec;,while
reduce:62
sentence->IncorDec;,for
reduce:62
sentence->IncorDec;,return
reduce:62
sentence->IncorDec;,array
reduce:62
sentence->IncorDec;,num
reduce:62
sentence->IncorDec;,/
reduce:62
sentence->IncorDec;,*
reduce:62
sentence->IncorDec;,-
reduce:62
sentence->IncorDec;,+
reduce:62
sentence->IncorDec;,char
reduce:62
sentence->IncorDec;,double
reduce:62
sentence->IncorDec;,int
reduce:62
sentence->IncorDec;,}
reduce:62
sentence->IncorDec;,{
reduce:62
sentence->IncorDec;,(
reduce:62
sentence->IncorDec;,id
reduce:62
项目86:
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
while_expression->while1(.bool_expression)whilesentence,scanf
while_expression->while1(.bool_expression)whilesentence,printf
while_expression->while1(.bool_expression)whilesentence,if
while_expression->while1(.bool_expression)whilesentence,while
while_expression->while1(.bool_expression)whilesentence,for
while_expression->while1(.bool_expression)whilesentence,return
while_expression->while1(.bool_expression)whilesentence,array
while_expression->while1(.bool_expression)whilesentence,num
while_expression->while1(.bool_expression)whilesentence,/
while_expression->while1(.bool_expression)whilesentence,*
while_expression->while1(.bool_expression)whilesentence,-
while_expression->while1(.bool_expression)whilesentence,+
while_expression->while1(.bool_expression)whilesentence,char
while_expression->while1(.bool_expression)whilesentence,double
while_expression->while1(.bool_expression)whilesentence,int
while_expression->while1(.bool_expression)whilesentence,}
while_expression->while1(.bool_expression)whilesentence,{
while_expression->while1(.bool_expression)whilesentence,(
while_expression->while1(.bool_expression)whilesentence,id
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],==
shift:138
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,==
shift:131
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,==
shift:137
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),==
shift:132
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目87:
if_expression->if(.bool_expression)ifsentenceelsesentence,scanf
if_expression->if(.bool_expression)ifsentenceelsesentence,printf
if_expression->if(.bool_expression)ifsentenceelsesentence,if
if_expression->if(.bool_expression)ifsentenceelsesentence,while
if_expression->if(.bool_expression)ifsentenceelsesentence,for
if_expression->if(.bool_expression)ifsentenceelsesentence,return
if_expression->if(.bool_expression)ifsentenceelsesentence,array
if_expression->if(.bool_expression)ifsentenceelsesentence,num
if_expression->if(.bool_expression)ifsentenceelsesentence,/
if_expression->if(.bool_expression)ifsentenceelsesentence,*
if_expression->if(.bool_expression)ifsentenceelsesentence,-
if_expression->if(.bool_expression)ifsentenceelsesentence,+
if_expression->if(.bool_expression)ifsentenceelsesentence,char
if_expression->if(.bool_expression)ifsentenceelsesentence,double
if_expression->if(.bool_expression)ifsentenceelsesentence,int
if_expression->if(.bool_expression)ifsentenceelsesentence,}
if_expression->if(.bool_expression)ifsentenceelsesentence,{
if_expression->if(.bool_expression)ifsentenceelsesentence,(
if_expression->if(.bool_expression)ifsentenceelsesentence,id
if_expression->if(.bool_expression)sentence,scanf
if_expression->if(.bool_expression)sentence,printf
if_expression->if(.bool_expression)sentence,if
if_expression->if(.bool_expression)sentence,while
if_expression->if(.bool_expression)sentence,for
if_expression->if(.bool_expression)sentence,return
if_expression->if(.bool_expression)sentence,array
if_expression->if(.bool_expression)sentence,num
if_expression->if(.bool_expression)sentence,/
if_expression->if(.bool_expression)sentence,*
if_expression->if(.bool_expression)sentence,-
if_expression->if(.bool_expression)sentence,+
if_expression->if(.bool_expression)sentence,char
if_expression->if(.bool_expression)sentence,double
if_expression->if(.bool_expression)sentence,int
if_expression->if(.bool_expression)sentence,}
if_expression->if(.bool_expression)sentence,{
if_expression->if(.bool_expression)sentence,(
if_expression->if(.bool_expression)sentence,id
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],==
shift:138
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,==
shift:131
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,==
shift:137
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),==
shift:132
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目88:
printf_expression->printf(.string,expressions);,scanf
shift:142
printf_expression->printf(.string,expressions);,printf
printf_expression->printf(.string,expressions);,if
printf_expression->printf(.string,expressions);,while
printf_expression->printf(.string,expressions);,for
printf_expression->printf(.string,expressions);,return
printf_expression->printf(.string,expressions);,array
printf_expression->printf(.string,expressions);,num
printf_expression->printf(.string,expressions);,/
printf_expression->printf(.string,expressions);,*
printf_expression->printf(.string,expressions);,-
printf_expression->printf(.string,expressions);,+
printf_expression->printf(.string,expressions);,char
printf_expression->printf(.string,expressions);,double
printf_expression->printf(.string,expressions);,int
printf_expression->printf(.string,expressions);,}
printf_expression->printf(.string,expressions);,{
printf_expression->printf(.string,expressions);,(
printf_expression->printf(.string,expressions);,id
printf_expression->printf(.string);,scanf
printf_expression->printf(.string);,printf
printf_expression->printf(.string);,if
printf_expression->printf(.string);,while
printf_expression->printf(.string);,for
printf_expression->printf(.string);,return
printf_expression->printf(.string);,array
printf_expression->printf(.string);,num
printf_expression->printf(.string);,/
printf_expression->printf(.string);,*
printf_expression->printf(.string);,-
printf_expression->printf(.string);,+
printf_expression->printf(.string);,char
printf_expression->printf(.string);,double
printf_expression->printf(.string);,int
printf_expression->printf(.string);,}
printf_expression->printf(.string);,{
printf_expression->printf(.string);,(
printf_expression->printf(.string);,id
项目89:
scanf_expression->scanf(.string,getaddr);,scanf
shift:143
scanf_expression->scanf(.string,getaddr);,printf
scanf_expression->scanf(.string,getaddr);,if
scanf_expression->scanf(.string,getaddr);,while
scanf_expression->scanf(.string,getaddr);,for
scanf_expression->scanf(.string,getaddr);,return
scanf_expression->scanf(.string,getaddr);,array
scanf_expression->scanf(.string,getaddr);,num
scanf_expression->scanf(.string,getaddr);,/
scanf_expression->scanf(.string,getaddr);,*
scanf_expression->scanf(.string,getaddr);,-
scanf_expression->scanf(.string,getaddr);,+
scanf_expression->scanf(.string,getaddr);,char
scanf_expression->scanf(.string,getaddr);,double
scanf_expression->scanf(.string,getaddr);,int
scanf_expression->scanf(.string,getaddr);,}
scanf_expression->scanf(.string,getaddr);,{
scanf_expression->scanf(.string,getaddr);,(
scanf_expression->scanf(.string,getaddr);,id
项目90:
function_define->function_typeid(function_define_list){block.},char
shift:144
function_define->function_typeid(function_define_list){block.},double
function_define->function_typeid(function_define_list){block.},int
function_define->function_typeid(function_define_list){block.},void
function_define->function_typeid(function_define_list){block.},#
项目91:
function_define_list->function_define_list,typeid,,
reduce:7
function_define_list->function_define_list,typeid,)
reduce:7
项目92:
F->id,,
reduce:29
F->id,)
reduce:29
function_call->id.(function_call_list),,
shift:145
function_call->id.(function_call_list),)
function_call->id.(),,
function_call->id.(),)
项目93:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),,
F->(.E),)
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目94:
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
function_call->id(),;
reduce:8
项目95:
F->function_call,,
reduce:31
F->function_call,)
reduce:31
项目96:
function_call_list->function_call_list.,F,,
shift:148
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),/
shift:147
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),;
项目97:
function_call_list->F,,
reduce:10
function_call_list->F,)
reduce:10
项目98:
F->num,,
reduce:28
F->num,)
reduce:28
项目99:
F->array.[E],,
shift:149
F->array.[E],)
项目100:
set_value->id=E,;
reduce:43
E->E.-T,-
shift:76
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:75
E->E.+T,+
E->E.+T,;
项目101:
F->.function_call,,
F->.function_call,)
F->.array[E],,
shift:99
F->.array[E],)
F->.id,,
shift:92
F->.id,)
F->.num,,
shift:98
F->.num,)
F->.(E),,
shift:93
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),)
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),/
shift:150
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),)
function_call->.id(),,
function_call->.id(),)
项目102:
F->(E.),/
shift:152
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),)
E->E.-T,-
shift:105
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:104
E->E.+T,+
E->E.+T,)
项目103:
F->(E),/
reduce:27
F->(E),*
reduce:27
F->(E),-
reduce:27
F->(E),+
reduce:27
F->(E),;
reduce:27
项目104:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->E+.T,-
E->E+.T,+
E->E+.T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目105:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->E-.T,-
E->E-.T,+
E->E-.T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目106:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
T->T*.F,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目107:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
T->T/.F,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目108:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],)
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目109:
sentence->{block},scanf
reduce:18
sentence->{block},printf
reduce:18
sentence->{block},if
reduce:18
sentence->{block},while
reduce:18
sentence->{block},for
reduce:18
sentence->{block},return
reduce:18
sentence->{block},array
reduce:18
sentence->{block},num
reduce:18
sentence->{block},/
reduce:18
sentence->{block},*
reduce:18
sentence->{block},-
reduce:18
sentence->{block},+
reduce:18
sentence->{block},char
reduce:18
sentence->{block},double
reduce:18
sentence->{block},int
reduce:18
sentence->{block},}
reduce:18
sentence->{block},{
reduce:18
sentence->{block},(
reduce:18
sentence->{block},id
reduce:18
项目110:
define->typearray[.num];,scanf
shift:158
define->typearray[.num];,printf
define->typearray[.num];,if
define->typearray[.num];,while
define->typearray[.num];,for
define->typearray[.num];,return
define->typearray[.num];,array
define->typearray[.num];,num
define->typearray[.num];,/
define->typearray[.num];,*
define->typearray[.num];,-
define->typearray[.num];,+
define->typearray[.num];,char
define->typearray[.num];,double
define->typearray[.num];,int
define->typearray[.num];,}
define->typearray[.num];,{
define->typearray[.num];,(
define->typearray[.num];,id
define->typearray[.]={nums};,scanf
shift:159
define->typearray[.]={nums};,printf
define->typearray[.]={nums};,if
define->typearray[.]={nums};,while
define->typearray[.]={nums};,for
define->typearray[.]={nums};,return
define->typearray[.]={nums};,array
define->typearray[.]={nums};,num
define->typearray[.]={nums};,/
define->typearray[.]={nums};,*
define->typearray[.]={nums};,-
define->typearray[.]={nums};,+
define->typearray[.]={nums};,char
define->typearray[.]={nums};,double
define->typearray[.]={nums};,int
define->typearray[.]={nums};,}
define->typearray[.]={nums};,{
define->typearray[.]={nums};,(
define->typearray[.]={nums};,id
define->typearray[.num]={nums};,scanf
define->typearray[.num]={nums};,printf
define->typearray[.num]={nums};,if
define->typearray[.num]={nums};,while
define->typearray[.num]={nums};,for
define->typearray[.num]={nums};,return
define->typearray[.num]={nums};,array
define->typearray[.num]={nums};,num
define->typearray[.num]={nums};,/
define->typearray[.num]={nums};,*
define->typearray[.num]={nums};,-
define->typearray[.num]={nums};,+
define->typearray[.num]={nums};,char
define->typearray[.num]={nums};,double
define->typearray[.num]={nums};,int
define->typearray[.num]={nums};,}
define->typearray[.num]={nums};,{
define->typearray[.num]={nums};,(
define->typearray[.num]={nums};,id
项目111:
define->typeid_name;,scanf
reduce:35
define->typeid_name;,printf
reduce:35
define->typeid_name;,if
reduce:35
define->typeid_name;,while
reduce:35
define->typeid_name;,for
reduce:35
define->typeid_name;,return
reduce:35
define->typeid_name;,array
reduce:35
define->typeid_name;,num
reduce:35
define->typeid_name;,/
reduce:35
define->typeid_name;,*
reduce:35
define->typeid_name;,-
reduce:35
define->typeid_name;,+
reduce:35
define->typeid_name;,char
reduce:35
define->typeid_name;,double
reduce:35
define->typeid_name;,int
reduce:35
define->typeid_name;,}
reduce:35
define->typeid_name;,{
reduce:35
define->typeid_name;,(
reduce:35
define->typeid_name;,id
reduce:35
项目112:
define->typeid_name=.E;,scanf
define->typeid_name=.E;,printf
define->typeid_name=.E;,if
define->typeid_name=.E;,while
define->typeid_name=.E;,for
define->typeid_name=.E;,return
define->typeid_name=.E;,array
define->typeid_name=.E;,num
define->typeid_name=.E;,/
define->typeid_name=.E;,*
define->typeid_name=.E;,-
define->typeid_name=.E;,+
define->typeid_name=.E;,char
define->typeid_name=.E;,double
define->typeid_name=.E;,int
define->typeid_name=.E;,}
define->typeid_name=.E;,{
define->typeid_name=.E;,(
define->typeid_name=.E;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目113:
T->T./F,/
shift:78
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,/
shift:77
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->E+T,-
reduce:21
E->E+T,+
reduce:21
E->E+T,;
reduce:21
项目114:
T->T./F,/
shift:78
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,;
T->T.*F,/
shift:77
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,;
E->E-T,-
reduce:22
E->E-T,+
reduce:22
E->E-T,;
reduce:22
项目115:
T->T*F,/
reduce:24
T->T*F,*
reduce:24
T->T*F,-
reduce:24
T->T*F,+
reduce:24
T->T*F,;
reduce:24
项目116:
T->T/F,/
reduce:25
T->T/F,*
reduce:25
T->T/F,-
reduce:25
T->T/F,+
reduce:25
T->T/F,;
reduce:25
项目117:
F->id,]
reduce:29
F->id,/
reduce:29
F->id,*
reduce:29
F->id,-
reduce:29
F->id,+
reduce:29
function_call->id.(function_call_list),]
shift:161
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(),]
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
项目118:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),]
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目119:
F->function_call,]
reduce:31
F->function_call,/
reduce:31
F->function_call,*
reduce:31
F->function_call,-
reduce:31
F->function_call,+
reduce:31
项目120:
T->F,]
reduce:26
T->F,/
reduce:26
T->F,*
reduce:26
T->F,-
reduce:26
T->F,+
reduce:26
项目121:
set_value->array[E.]=E,;
shift:165
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
shift:164
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:163
E->E.+T,-
E->E.+T,+
项目122:
T->T./F,]
shift:167
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
shift:166
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->T,]
reduce:23
E->T,-
reduce:23
E->T,+
reduce:23
项目123:
F->num,]
reduce:28
F->num,/
reduce:28
F->num,*
reduce:28
F->num,-
reduce:28
F->num,+
reduce:28
项目124:
F->array.[E],]
shift:168
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
项目125:
sentence->returnE;,scanf
reduce:32
sentence->returnE;,printf
reduce:32
sentence->returnE;,if
reduce:32
sentence->returnE;,while
reduce:32
sentence->returnE;,for
reduce:32
sentence->returnE;,return
reduce:32
sentence->returnE;,array
reduce:32
sentence->returnE;,num
reduce:32
sentence->returnE;,/
reduce:32
sentence->returnE;,*
reduce:32
sentence->returnE;,-
reduce:32
sentence->returnE;,+
reduce:32
sentence->returnE;,char
reduce:32
sentence->returnE;,double
reduce:32
sentence->returnE;,int
reduce:32
sentence->returnE;,}
reduce:32
sentence->returnE;,{
reduce:32
sentence->returnE;,(
reduce:32
sentence->returnE;,id
reduce:32
项目126:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目127:
set_value->id.=E,;
shift:56
项目128:
set_value->array.[E]=E,;
shift:170
项目129:
for_set_value->set_value,;
reduce:61
项目130:
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,scanf
shift:171
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,id
项目131:
F->id,==
reduce:29
F->id,>
reduce:29
F->id,<
reduce:29
F->id,<=
reduce:29
F->id,>=
reduce:29
F->id,/
reduce:29
F->id,*
reduce:29
F->id,-
reduce:29
F->id,+
reduce:29
F->id,)
reduce:29
function_call->id.(function_call_list),==
shift:172
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),)
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),)
项目132:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),)
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目133:
F->function_call,==
reduce:31
F->function_call,>
reduce:31
F->function_call,<
reduce:31
F->function_call,<=
reduce:31
F->function_call,>=
reduce:31
F->function_call,/
reduce:31
F->function_call,*
reduce:31
F->function_call,-
reduce:31
F->function_call,+
reduce:31
F->function_call,)
reduce:31
项目134:
bool_expression->F,)
reduce:52
T->F,==
reduce:26
T->F,>
reduce:26
T->F,<
reduce:26
T->F,<=
reduce:26
T->F,>=
reduce:26
T->F,/
reduce:26
T->F,*
reduce:26
T->F,-
reduce:26
T->F,+
reduce:26
项目135:
G->E,==
reduce:59
G->E,>
reduce:59
G->E,<
reduce:59
G->E,<=
reduce:59
G->E,>=
reduce:59
E->E.-T,==
shift:175
E->E.-T,>
E->E.-T,<
E->E.-T,<=
E->E.-T,>=
E->E.-T,-
E->E.-T,+
E->E.+T,==
shift:174
E->E.+T,>
E->E.+T,<
E->E.+T,<=
E->E.+T,>=
E->E.+T,-
E->E.+T,+
项目136:
T->T./F,==
shift:177
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,==
shift:176
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->T,==
reduce:23
E->T,>
reduce:23
E->T,<
reduce:23
E->T,<=
reduce:23
E->T,>=
reduce:23
E->T,-
reduce:23
E->T,+
reduce:23
项目137:
F->num,==
reduce:28
F->num,>
reduce:28
F->num,<
reduce:28
F->num,<=
reduce:28
F->num,>=
reduce:28
F->num,/
reduce:28
F->num,*
reduce:28
F->num,-
reduce:28
F->num,+
reduce:28
F->num,)
reduce:28
项目138:
F->array.[E],==
shift:178
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],)
项目139:
while_expression->while1(bool_expression.)whilesentence,scanf
shift:179
while_expression->while1(bool_expression.)whilesentence,printf
while_expression->while1(bool_expression.)whilesentence,if
while_expression->while1(bool_expression.)whilesentence,while
while_expression->while1(bool_expression.)whilesentence,for
while_expression->while1(bool_expression.)whilesentence,return
while_expression->while1(bool_expression.)whilesentence,array
while_expression->while1(bool_expression.)whilesentence,num
while_expression->while1(bool_expression.)whilesentence,/
while_expression->while1(bool_expression.)whilesentence,*
while_expression->while1(bool_expression.)whilesentence,-
while_expression->while1(bool_expression.)whilesentence,+
while_expression->while1(bool_expression.)whilesentence,char
while_expression->while1(bool_expression.)whilesentence,double
while_expression->while1(bool_expression.)whilesentence,int
while_expression->while1(bool_expression.)whilesentence,}
while_expression->while1(bool_expression.)whilesentence,{
while_expression->while1(bool_expression.)whilesentence,(
while_expression->while1(bool_expression.)whilesentence,id
项目140:
op->.==,array
shift:185
op->.==,num
op->.==,/
op->.==,*
op->.==,-
op->.==,+
op->.==,(
op->.==,id
op->.>,array
shift:184
op->.>,num
op->.>,/
op->.>,*
op->.>,-
op->.>,+
op->.>,(
op->.>,id
op->.<,array
shift:183
op->.<,num
op->.<,/
op->.<,*
op->.<,-
op->.<,+
op->.<,(
op->.<,id
op->.<=,array
shift:182
op->.<=,num
op->.<=,/
op->.<=,*
op->.<=,-
op->.<=,+
op->.<=,(
op->.<=,id
op->.>=,array
shift:181
op->.>=,num
op->.>=,/
op->.>=,*
op->.>=,-
op->.>=,+
op->.>=,(
op->.>=,id
bool_expression->G.opH,)
项目141:
if_expression->if(bool_expression.)ifsentenceelsesentence,scanf
shift:186
if_expression->if(bool_expression.)ifsentenceelsesentence,printf
if_expression->if(bool_expression.)ifsentenceelsesentence,if
if_expression->if(bool_expression.)ifsentenceelsesentence,while
if_expression->if(bool_expression.)ifsentenceelsesentence,for
if_expression->if(bool_expression.)ifsentenceelsesentence,return
if_expression->if(bool_expression.)ifsentenceelsesentence,array
if_expression->if(bool_expression.)ifsentenceelsesentence,num
if_expression->if(bool_expression.)ifsentenceelsesentence,/
if_expression->if(bool_expression.)ifsentenceelsesentence,*
if_expression->if(bool_expression.)ifsentenceelsesentence,-
if_expression->if(bool_expression.)ifsentenceelsesentence,+
if_expression->if(bool_expression.)ifsentenceelsesentence,char
if_expression->if(bool_expression.)ifsentenceelsesentence,double
if_expression->if(bool_expression.)ifsentenceelsesentence,int
if_expression->if(bool_expression.)ifsentenceelsesentence,}
if_expression->if(bool_expression.)ifsentenceelsesentence,{
if_expression->if(bool_expression.)ifsentenceelsesentence,(
if_expression->if(bool_expression.)ifsentenceelsesentence,id
if_expression->if(bool_expression.)sentence,scanf
if_expression->if(bool_expression.)sentence,printf
if_expression->if(bool_expression.)sentence,if
if_expression->if(bool_expression.)sentence,while
if_expression->if(bool_expression.)sentence,for
if_expression->if(bool_expression.)sentence,return
if_expression->if(bool_expression.)sentence,array
if_expression->if(bool_expression.)sentence,num
if_expression->if(bool_expression.)sentence,/
if_expression->if(bool_expression.)sentence,*
if_expression->if(bool_expression.)sentence,-
if_expression->if(bool_expression.)sentence,+
if_expression->if(bool_expression.)sentence,char
if_expression->if(bool_expression.)sentence,double
if_expression->if(bool_expression.)sentence,int
if_expression->if(bool_expression.)sentence,}
if_expression->if(bool_expression.)sentence,{
if_expression->if(bool_expression.)sentence,(
if_expression->if(bool_expression.)sentence,id
项目142:
printf_expression->printf(string.,expressions);,scanf
shift:188
printf_expression->printf(string.,expressions);,printf
printf_expression->printf(string.,expressions);,if
printf_expression->printf(string.,expressions);,while
printf_expression->printf(string.,expressions);,for
printf_expression->printf(string.,expressions);,return
printf_expression->printf(string.,expressions);,array
printf_expression->printf(string.,expressions);,num
printf_expression->printf(string.,expressions);,/
printf_expression->printf(string.,expressions);,*
printf_expression->printf(string.,expressions);,-
printf_expression->printf(string.,expressions);,+
printf_expression->printf(string.,expressions);,char
printf_expression->printf(string.,expressions);,double
printf_expression->printf(string.,expressions);,int
printf_expression->printf(string.,expressions);,}
printf_expression->printf(string.,expressions);,{
printf_expression->printf(string.,expressions);,(
printf_expression->printf(string.,expressions);,id
printf_expression->printf(string.);,scanf
shift:187
printf_expression->printf(string.);,printf
printf_expression->printf(string.);,if
printf_expression->printf(string.);,while
printf_expression->printf(string.);,for
printf_expression->printf(string.);,return
printf_expression->printf(string.);,array
printf_expression->printf(string.);,num
printf_expression->printf(string.);,/
printf_expression->printf(string.);,*
printf_expression->printf(string.);,-
printf_expression->printf(string.);,+
printf_expression->printf(string.);,char
printf_expression->printf(string.);,double
printf_expression->printf(string.);,int
printf_expression->printf(string.);,}
printf_expression->printf(string.);,{
printf_expression->printf(string.);,(
printf_expression->printf(string.);,id
项目143:
scanf_expression->scanf(string.,getaddr);,scanf
shift:189
scanf_expression->scanf(string.,getaddr);,printf
scanf_expression->scanf(string.,getaddr);,if
scanf_expression->scanf(string.,getaddr);,while
scanf_expression->scanf(string.,getaddr);,for
scanf_expression->scanf(string.,getaddr);,return
scanf_expression->scanf(string.,getaddr);,array
scanf_expression->scanf(string.,getaddr);,num
scanf_expression->scanf(string.,getaddr);,/
scanf_expression->scanf(string.,getaddr);,*
scanf_expression->scanf(string.,getaddr);,-
scanf_expression->scanf(string.,getaddr);,+
scanf_expression->scanf(string.,getaddr);,char
scanf_expression->scanf(string.,getaddr);,double
scanf_expression->scanf(string.,getaddr);,int
scanf_expression->scanf(string.,getaddr);,}
scanf_expression->scanf(string.,getaddr);,{
scanf_expression->scanf(string.,getaddr);,(
scanf_expression->scanf(string.,getaddr);,id
项目144:
function_define->function_typeid(function_define_list){block},char
reduce:3
function_define->function_typeid(function_define_list){block},double
reduce:3
function_define->function_typeid(function_define_list){block},int
reduce:3
function_define->function_typeid(function_define_list){block},void
reduce:3
function_define->function_typeid(function_define_list){block},#
reduce:3
项目145:
F->.function_call,,
F->.function_call,)
F->.array[E],,
shift:99
F->.array[E],)
F->.id,,
shift:92
F->.id,)
F->.num,,
shift:98
F->.num,)
F->.(E),,
shift:93
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),,
function_call->id(.function_call_list),)
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),,
shift:190
function_call->id(.),)
function_call->.id(),,
function_call->.id(),)
项目146:
F->(E.),,
shift:192
F->(E.),)
E->E.-T,-
shift:105
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:104
E->E.+T,+
E->E.+T,)
项目147:
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
function_call->id(function_call_list),;
reduce:9
项目148:
F->.function_call,,
F->.function_call,)
F->.array[E],,
shift:99
F->.array[E],)
F->.id,,
shift:92
F->.id,)
F->.num,,
shift:98
F->.num,)
F->.(E),,
shift:93
F->.(E),)
function_call_list->function_call_list,.F,,
function_call_list->function_call_list,.F,)
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->.id(),,
function_call->.id(),)
项目149:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],,
F->array[.E],)
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目150:
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
function_call->id(),)
reduce:8
项目151:
function_call_list->function_call_list.,F,,
shift:148
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),/
shift:195
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),)
项目152:
F->(E),/
reduce:27
F->(E),*
reduce:27
F->(E),-
reduce:27
F->(E),+
reduce:27
F->(E),)
reduce:27
项目153:
T->T./F,/
shift:107
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,/
shift:106
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->E+T,-
reduce:21
E->E+T,+
reduce:21
E->E+T,)
reduce:21
项目154:
T->T./F,/
shift:107
T->T./F,*
T->T./F,-
T->T./F,+
T->T./F,)
T->T.*F,/
shift:106
T->T.*F,*
T->T.*F,-
T->T.*F,+
T->T.*F,)
E->E-T,-
reduce:22
E->E-T,+
reduce:22
E->E-T,)
reduce:22
项目155:
T->T*F,/
reduce:24
T->T*F,*
reduce:24
T->T*F,-
reduce:24
T->T*F,+
reduce:24
T->T*F,)
reduce:24
项目156:
T->T/F,/
reduce:25
T->T/F,*
reduce:25
T->T/F,-
reduce:25
T->T/F,+
reduce:25
T->T/F,)
reduce:25
项目157:
F->array[E.],/
shift:196
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],)
E->E.-T,]
shift:164
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:163
E->E.+T,-
E->E.+T,+
项目158:
define->typearray[num.];,scanf
shift:197
define->typearray[num.];,printf
define->typearray[num.];,if
define->typearray[num.];,while
define->typearray[num.];,for
define->typearray[num.];,return
define->typearray[num.];,array
define->typearray[num.];,num
define->typearray[num.];,/
define->typearray[num.];,*
define->typearray[num.];,-
define->typearray[num.];,+
define->typearray[num.];,char
define->typearray[num.];,double
define->typearray[num.];,int
define->typearray[num.];,}
define->typearray[num.];,{
define->typearray[num.];,(
define->typearray[num.];,id
define->typearray[num.]={nums};,scanf
define->typearray[num.]={nums};,printf
define->typearray[num.]={nums};,if
define->typearray[num.]={nums};,while
define->typearray[num.]={nums};,for
define->typearray[num.]={nums};,return
define->typearray[num.]={nums};,array
define->typearray[num.]={nums};,num
define->typearray[num.]={nums};,/
define->typearray[num.]={nums};,*
define->typearray[num.]={nums};,-
define->typearray[num.]={nums};,+
define->typearray[num.]={nums};,char
define->typearray[num.]={nums};,double
define->typearray[num.]={nums};,int
define->typearray[num.]={nums};,}
define->typearray[num.]={nums};,{
define->typearray[num.]={nums};,(
define->typearray[num.]={nums};,id
项目159:
define->typearray[].={nums};,scanf
shift:198
define->typearray[].={nums};,printf
define->typearray[].={nums};,if
define->typearray[].={nums};,while
define->typearray[].={nums};,for
define->typearray[].={nums};,return
define->typearray[].={nums};,array
define->typearray[].={nums};,num
define->typearray[].={nums};,/
define->typearray[].={nums};,*
define->typearray[].={nums};,-
define->typearray[].={nums};,+
define->typearray[].={nums};,char
define->typearray[].={nums};,double
define->typearray[].={nums};,int
define->typearray[].={nums};,}
define->typearray[].={nums};,{
define->typearray[].={nums};,(
define->typearray[].={nums};,id
项目160:
define->typeid_name=E.;,scanf
shift:199
define->typeid_name=E.;,printf
define->typeid_name=E.;,if
define->typeid_name=E.;,while
define->typeid_name=E.;,for
define->typeid_name=E.;,return
define->typeid_name=E.;,array
define->typeid_name=E.;,num
define->typeid_name=E.;,/
define->typeid_name=E.;,*
define->typeid_name=E.;,-
define->typeid_name=E.;,+
define->typeid_name=E.;,char
define->typeid_name=E.;,double
define->typeid_name=E.;,int
define->typeid_name=E.;,}
define->typeid_name=E.;,{
define->typeid_name=E.;,(
define->typeid_name=E.;,id
E->E.-T,-
shift:76
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:75
E->E.+T,+
E->E.+T,;
项目161:
F->.function_call,,
F->.function_call,)
F->.array[E],,
shift:99
F->.array[E],)
F->.id,,
shift:92
F->.id,)
F->.num,,
shift:98
F->.num,)
F->.(E),,
shift:93
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),]
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),]
shift:200
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->.id(),,
function_call->.id(),)
项目162:
F->(E.),]
shift:202
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
E->E.-T,-
shift:105
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:104
E->E.+T,+
E->E.+T,)
项目163:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E+.T,]
E->E+.T,-
E->E+.T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目164:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E-.T,]
E->E-.T,-
E->E-.T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目165:
set_value->array[E].=E,;
shift:205
F->array[E],/
reduce:30
F->array[E],*
reduce:30
F->array[E],-
reduce:30
F->array[E],+
reduce:30
F->array[E],;
reduce:30
项目166:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T*.F,]
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目167:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T/.F,]
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目168:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],]
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目169:
F->array[E.],/
shift:209
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
shift:164
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:163
E->E.+T,-
E->E.+T,+
项目170:
set_value->array[.E]=E,;
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目171:
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,;
bool_expression->.GopH,;
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,id
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],==
shift:216
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,==
shift:211
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,==
shift:215
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),==
shift:212
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目172:
F->.function_call,,
F->.function_call,)
F->.array[E],,
shift:99
F->.array[E],)
F->.id,,
shift:92
F->.id,)
F->.num,,
shift:98
F->.num,)
F->.(E),,
shift:93
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),)
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),==
shift:219
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),)
function_call->.id(),,
function_call->.id(),)
项目173:
F->(E.),==
shift:221
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),)
E->E.-T,-
shift:105
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:104
E->E.+T,+
E->E.+T,)
项目174:
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],==
shift:228
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,==
shift:222
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,==
shift:227
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),==
shift:223
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E+.T,==
E->E+.T,>
E->E+.T,<
E->E+.T,<=
E->E+.T,>=
E->E+.T,-
E->E+.T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目175:
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],==
shift:228
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,==
shift:222
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,==
shift:227
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),==
shift:223
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->E-.T,==
E->E-.T,>
E->E-.T,<
E->E-.T,<=
E->E-.T,>=
E->E-.T,-
E->E-.T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目176:
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],==
shift:228
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,==
shift:222
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,==
shift:227
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),==
shift:223
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T*.F,==
T->T*.F,>
T->T*.F,<
T->T*.F,<=
T->T*.F,>=
T->T*.F,/
T->T*.F,*
T->T*.F,-
T->T*.F,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目177:
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.array[E],==
shift:228
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,==
shift:222
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,==
shift:227
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),==
shift:223
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->T/.F,==
T->T/.F,>
T->T/.F,<
T->T/.F,<=
T->T/.F,>=
T->T/.F,/
T->T/.F,*
T->T/.F,-
T->T/.F,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目178:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],)
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目179:
scanf_expression->.scanf(string,getaddr);,scanf
shift:52
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:51
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:47
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
whilesentence->.sentence,scanf
whilesentence->.sentence,printf
whilesentence->.sentence,if
whilesentence->.sentence,while
whilesentence->.sentence,for
whilesentence->.sentence,return
whilesentence->.sentence,array
whilesentence->.sentence,num
whilesentence->.sentence,/
whilesentence->.sentence,*
whilesentence->.sentence,-
whilesentence->.sentence,+
whilesentence->.sentence,char
whilesentence->.sentence,double
whilesentence->.sentence,int
whilesentence->.sentence,}
whilesentence->.sentence,{
whilesentence->.sentence,(
whilesentence->.sentence,id
while1->.while,(
shift:43
while_expression->while1(bool_expression).whilesentence,scanf
while_expression->while1(bool_expression).whilesentence,printf
while_expression->while1(bool_expression).whilesentence,if
while_expression->while1(bool_expression).whilesentence,while
while_expression->while1(bool_expression).whilesentence,for
while_expression->while1(bool_expression).whilesentence,return
while_expression->while1(bool_expression).whilesentence,array
while_expression->while1(bool_expression).whilesentence,num
while_expression->while1(bool_expression).whilesentence,/
while_expression->while1(bool_expression).whilesentence,*
while_expression->while1(bool_expression).whilesentence,-
while_expression->while1(bool_expression).whilesentence,+
while_expression->while1(bool_expression).whilesentence,char
while_expression->while1(bool_expression).whilesentence,double
while_expression->while1(bool_expression).whilesentence,int
while_expression->while1(bool_expression).whilesentence,}
while_expression->while1(bool_expression).whilesentence,{
while_expression->while1(bool_expression).whilesentence,(
while_expression->while1(bool_expression).whilesentence,id
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:40
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:35
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目180:
H->.E,)
bool_expression->Gop.H,)
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目181:
op->>=,array
reduce:53
op->>=,num
reduce:53
op->>=,/
reduce:53
op->>=,*
reduce:53
op->>=,-
reduce:53
op->>=,+
reduce:53
op->>=,(
reduce:53
op->>=,id
reduce:53
项目182:
op-><=,array
reduce:54
op-><=,num
reduce:54
op-><=,/
reduce:54
op-><=,*
reduce:54
op-><=,-
reduce:54
op-><=,+
reduce:54
op-><=,(
reduce:54
op-><=,id
reduce:54
项目183:
op-><,array
reduce:55
op-><,num
reduce:55
op-><,/
reduce:55
op-><,*
reduce:55
op-><,-
reduce:55
op-><,+
reduce:55
op-><,(
reduce:55
op-><,id
reduce:55
项目184:
op->>,array
reduce:56
op->>,num
reduce:56
op->>,/
reduce:56
op->>,*
reduce:56
op->>,-
reduce:56
op->>,+
reduce:56
op->>,(
reduce:56
op->>,id
reduce:56
项目185:
op->==,array
reduce:57
op->==,num
reduce:57
op->==,/
reduce:57
op->==,*
reduce:57
op->==,-
reduce:57
op->==,+
reduce:57
op->==,(
reduce:57
op->==,id
reduce:57
项目186:
scanf_expression->.scanf(string,getaddr);,scanf
shift:256
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:255
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
ifsentence->.sentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,scanf
if_expression->if(bool_expression).ifsentenceelsesentence,printf
if_expression->if(bool_expression).ifsentenceelsesentence,if
if_expression->if(bool_expression).ifsentenceelsesentence,while
if_expression->if(bool_expression).ifsentenceelsesentence,for
if_expression->if(bool_expression).ifsentenceelsesentence,return
if_expression->if(bool_expression).ifsentenceelsesentence,array
if_expression->if(bool_expression).ifsentenceelsesentence,num
if_expression->if(bool_expression).ifsentenceelsesentence,/
if_expression->if(bool_expression).ifsentenceelsesentence,*
if_expression->if(bool_expression).ifsentenceelsesentence,-
if_expression->if(bool_expression).ifsentenceelsesentence,+
if_expression->if(bool_expression).ifsentenceelsesentence,char
if_expression->if(bool_expression).ifsentenceelsesentence,double
if_expression->if(bool_expression).ifsentenceelsesentence,int
if_expression->if(bool_expression).ifsentenceelsesentence,}
if_expression->if(bool_expression).ifsentenceelsesentence,{
if_expression->if(bool_expression).ifsentenceelsesentence,(
if_expression->if(bool_expression).ifsentenceelsesentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:250
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->if(bool_expression).sentence,scanf
if_expression->if(bool_expression).sentence,printf
if_expression->if(bool_expression).sentence,if
if_expression->if(bool_expression).sentence,while
if_expression->if(bool_expression).sentence,for
if_expression->if(bool_expression).sentence,return
if_expression->if(bool_expression).sentence,array
if_expression->if(bool_expression).sentence,num
if_expression->if(bool_expression).sentence,/
if_expression->if(bool_expression).sentence,*
if_expression->if(bool_expression).sentence,-
if_expression->if(bool_expression).sentence,+
if_expression->if(bool_expression).sentence,char
if_expression->if(bool_expression).sentence,double
if_expression->if(bool_expression).sentence,int
if_expression->if(bool_expression).sentence,}
if_expression->if(bool_expression).sentence,{
if_expression->if(bool_expression).sentence,(
if_expression->if(bool_expression).sentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:246
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:241
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:237
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目187:
printf_expression->printf(string).;,scanf
shift:257
printf_expression->printf(string).;,printf
printf_expression->printf(string).;,if
printf_expression->printf(string).;,while
printf_expression->printf(string).;,for
printf_expression->printf(string).;,return
printf_expression->printf(string).;,array
printf_expression->printf(string).;,num
printf_expression->printf(string).;,/
printf_expression->printf(string).;,*
printf_expression->printf(string).;,-
printf_expression->printf(string).;,+
printf_expression->printf(string).;,char
printf_expression->printf(string).;,double
printf_expression->printf(string).;,int
printf_expression->printf(string).;,}
printf_expression->printf(string).;,{
printf_expression->printf(string).;,(
printf_expression->printf(string).;,id
项目188:
expressions->.id,)
shift:258
expressions->.id,expressions,)
printf_expression->printf(string,.expressions);,scanf
printf_expression->printf(string,.expressions);,printf
printf_expression->printf(string,.expressions);,if
printf_expression->printf(string,.expressions);,while
printf_expression->printf(string,.expressions);,for
printf_expression->printf(string,.expressions);,return
printf_expression->printf(string,.expressions);,array
printf_expression->printf(string,.expressions);,num
printf_expression->printf(string,.expressions);,/
printf_expression->printf(string,.expressions);,*
printf_expression->printf(string,.expressions);,-
printf_expression->printf(string,.expressions);,+
printf_expression->printf(string,.expressions);,char
printf_expression->printf(string,.expressions);,double
printf_expression->printf(string,.expressions);,int
printf_expression->printf(string,.expressions);,}
printf_expression->printf(string,.expressions);,{
printf_expression->printf(string,.expressions);,(
printf_expression->printf(string,.expressions);,id
项目189:
getaddr->.&id,)
shift:261
scanf_expression->scanf(string,.getaddr);,scanf
scanf_expression->scanf(string,.getaddr);,printf
scanf_expression->scanf(string,.getaddr);,if
scanf_expression->scanf(string,.getaddr);,while
scanf_expression->scanf(string,.getaddr);,for
scanf_expression->scanf(string,.getaddr);,return
scanf_expression->scanf(string,.getaddr);,array
scanf_expression->scanf(string,.getaddr);,num
scanf_expression->scanf(string,.getaddr);,/
scanf_expression->scanf(string,.getaddr);,*
scanf_expression->scanf(string,.getaddr);,-
scanf_expression->scanf(string,.getaddr);,+
scanf_expression->scanf(string,.getaddr);,char
scanf_expression->scanf(string,.getaddr);,double
scanf_expression->scanf(string,.getaddr);,int
scanf_expression->scanf(string,.getaddr);,}
scanf_expression->scanf(string,.getaddr);,{
scanf_expression->scanf(string,.getaddr);,(
scanf_expression->scanf(string,.getaddr);,id
项目190:
function_call->id(),,
reduce:8
function_call->id(),)
reduce:8
项目191:
function_call_list->function_call_list.,F,,
shift:148
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),,
shift:262
function_call->id(function_call_list.),)
项目192:
F->(E),,
reduce:27
F->(E),)
reduce:27
项目193:
function_call_list->function_call_list,F,,
reduce:11
function_call_list->function_call_list,F,)
reduce:11
项目194:
F->array[E.],,
shift:263
F->array[E.],)
E->E.-T,]
shift:164
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:163
E->E.+T,-
E->E.+T,+
项目195:
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
function_call->id(function_call_list),)
reduce:9
项目196:
F->array[E],/
reduce:30
F->array[E],*
reduce:30
F->array[E],-
reduce:30
F->array[E],+
reduce:30
F->array[E],)
reduce:30
项目197:
define->typearray[num].;,scanf
shift:264
define->typearray[num].;,printf
define->typearray[num].;,if
define->typearray[num].;,while
define->typearray[num].;,for
define->typearray[num].;,return
define->typearray[num].;,array
define->typearray[num].;,num
define->typearray[num].;,/
define->typearray[num].;,*
define->typearray[num].;,-
define->typearray[num].;,+
define->typearray[num].;,char
define->typearray[num].;,double
define->typearray[num].;,int
define->typearray[num].;,}
define->typearray[num].;,{
define->typearray[num].;,(
define->typearray[num].;,id
define->typearray[num].={nums};,scanf
shift:265
define->typearray[num].={nums};,printf
define->typearray[num].={nums};,if
define->typearray[num].={nums};,while
define->typearray[num].={nums};,for
define->typearray[num].={nums};,return
define->typearray[num].={nums};,array
define->typearray[num].={nums};,num
define->typearray[num].={nums};,/
define->typearray[num].={nums};,*
define->typearray[num].={nums};,-
define->typearray[num].={nums};,+
define->typearray[num].={nums};,char
define->typearray[num].={nums};,double
define->typearray[num].={nums};,int
define->typearray[num].={nums};,}
define->typearray[num].={nums};,{
define->typearray[num].={nums};,(
define->typearray[num].={nums};,id
项目198:
define->typearray[]=.{nums};,scanf
shift:266
define->typearray[]=.{nums};,printf
define->typearray[]=.{nums};,if
define->typearray[]=.{nums};,while
define->typearray[]=.{nums};,for
define->typearray[]=.{nums};,return
define->typearray[]=.{nums};,array
define->typearray[]=.{nums};,num
define->typearray[]=.{nums};,/
define->typearray[]=.{nums};,*
define->typearray[]=.{nums};,-
define->typearray[]=.{nums};,+
define->typearray[]=.{nums};,char
define->typearray[]=.{nums};,double
define->typearray[]=.{nums};,int
define->typearray[]=.{nums};,}
define->typearray[]=.{nums};,{
define->typearray[]=.{nums};,(
define->typearray[]=.{nums};,id
项目199:
define->typeid_name=E;,scanf
reduce:34
define->typeid_name=E;,printf
reduce:34
define->typeid_name=E;,if
reduce:34
define->typeid_name=E;,while
reduce:34
define->typeid_name=E;,for
reduce:34
define->typeid_name=E;,return
reduce:34
define->typeid_name=E;,array
reduce:34
define->typeid_name=E;,num
reduce:34
define->typeid_name=E;,/
reduce:34
define->typeid_name=E;,*
reduce:34
define->typeid_name=E;,-
reduce:34
define->typeid_name=E;,+
reduce:34
define->typeid_name=E;,char
reduce:34
define->typeid_name=E;,double
reduce:34
define->typeid_name=E;,int
reduce:34
define->typeid_name=E;,}
reduce:34
define->typeid_name=E;,{
reduce:34
define->typeid_name=E;,(
reduce:34
define->typeid_name=E;,id
reduce:34
项目200:
function_call->id(),]
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
项目201:
function_call_list->function_call_list.,F,,
shift:148
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),]
shift:267
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
项目202:
F->(E),]
reduce:27
F->(E),/
reduce:27
F->(E),*
reduce:27
F->(E),-
reduce:27
F->(E),+
reduce:27
项目203:
T->T./F,]
shift:167
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
shift:166
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E+T,]
reduce:21
E->E+T,-
reduce:21
E->E+T,+
reduce:21
项目204:
T->T./F,]
shift:167
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,]
shift:166
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E-T,]
reduce:22
E->E-T,-
reduce:22
E->E-T,+
reduce:22
项目205:
set_value->array[E]=.E,;
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目206:
T->T*F,]
reduce:24
T->T*F,/
reduce:24
T->T*F,*
reduce:24
T->T*F,-
reduce:24
T->T*F,+
reduce:24
项目207:
T->T/F,]
reduce:25
T->T/F,/
reduce:25
T->T/F,*
reduce:25
T->T/F,-
reduce:25
T->T/F,+
reduce:25
项目208:
F->array[E.],]
shift:269
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
E->E.-T,]
shift:164
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:163
E->E.+T,-
E->E.+T,+
项目209:
F->array[E],/
reduce:30
F->array[E],*
reduce:30
F->array[E],-
reduce:30
F->array[E],+
reduce:30
F->array[E],;
reduce:30
项目210:
set_value->array[E.]=E,;
shift:270
E->E.-T,]
shift:164
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:163
E->E.+T,-
E->E.+T,+
项目211:
F->id,==
reduce:29
F->id,>
reduce:29
F->id,<
reduce:29
F->id,<=
reduce:29
F->id,>=
reduce:29
F->id,/
reduce:29
F->id,*
reduce:29
F->id,-
reduce:29
F->id,+
reduce:29
F->id,;
reduce:29
function_call->id.(function_call_list),==
shift:271
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(function_call_list),;
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
function_call->id.(),;
项目212:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->(.E),;
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目213:
F->function_call,==
reduce:31
F->function_call,>
reduce:31
F->function_call,<
reduce:31
F->function_call,<=
reduce:31
F->function_call,>=
reduce:31
F->function_call,/
reduce:31
F->function_call,*
reduce:31
F->function_call,-
reduce:31
F->function_call,+
reduce:31
F->function_call,;
reduce:31
项目214:
bool_expression->F,;
reduce:52
T->F,==
reduce:26
T->F,>
reduce:26
T->F,<
reduce:26
T->F,<=
reduce:26
T->F,>=
reduce:26
T->F,/
reduce:26
T->F,*
reduce:26
T->F,-
reduce:26
T->F,+
reduce:26
项目215:
F->num,==
reduce:28
F->num,>
reduce:28
F->num,<
reduce:28
F->num,<=
reduce:28
F->num,>=
reduce:28
F->num,/
reduce:28
F->num,*
reduce:28
F->num,-
reduce:28
F->num,+
reduce:28
F->num,;
reduce:28
项目216:
F->array.[E],==
shift:273
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
F->array.[E],;
项目217:
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,scanf
shift:274
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,id
项目218:
op->.==,array
shift:185
op->.==,num
op->.==,/
op->.==,*
op->.==,-
op->.==,+
op->.==,(
op->.==,id
op->.>,array
shift:184
op->.>,num
op->.>,/
op->.>,*
op->.>,-
op->.>,+
op->.>,(
op->.>,id
op->.<,array
shift:183
op->.<,num
op->.<,/
op->.<,*
op->.<,-
op->.<,+
op->.<,(
op->.<,id
op->.<=,array
shift:182
op->.<=,num
op->.<=,/
op->.<=,*
op->.<=,-
op->.<=,+
op->.<=,(
op->.<=,id
op->.>=,array
shift:181
op->.>=,num
op->.>=,/
op->.>=,*
op->.>=,-
op->.>=,+
op->.>=,(
op->.>=,id
bool_expression->G.opH,;
项目219:
function_call->id(),==
reduce:8
function_call->id(),>
reduce:8
function_call->id(),<
reduce:8
function_call->id(),<=
reduce:8
function_call->id(),>=
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
function_call->id(),)
reduce:8
项目220:
function_call_list->function_call_list.,F,,
shift:148
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),==
shift:276
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),)
项目221:
F->(E),==
reduce:27
F->(E),>
reduce:27
F->(E),<
reduce:27
F->(E),<=
reduce:27
F->(E),>=
reduce:27
F->(E),/
reduce:27
F->(E),*
reduce:27
F->(E),-
reduce:27
F->(E),+
reduce:27
F->(E),)
reduce:27
项目222:
F->id,==
reduce:29
F->id,>
reduce:29
F->id,<
reduce:29
F->id,<=
reduce:29
F->id,>=
reduce:29
F->id,/
reduce:29
F->id,*
reduce:29
F->id,-
reduce:29
F->id,+
reduce:29
function_call->id.(function_call_list),==
shift:277
function_call->id.(function_call_list),>
function_call->id.(function_call_list),<
function_call->id.(function_call_list),<=
function_call->id.(function_call_list),>=
function_call->id.(function_call_list),/
function_call->id.(function_call_list),*
function_call->id.(function_call_list),-
function_call->id.(function_call_list),+
function_call->id.(),==
function_call->id.(),>
function_call->id.(),<
function_call->id.(),<=
function_call->id.(),>=
function_call->id.(),/
function_call->id.(),*
function_call->id.(),-
function_call->id.(),+
项目223:
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],/
shift:66
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,/
shift:59
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,/
shift:65
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->(.E),==
F->(.E),>
F->(.E),<
F->(.E),<=
F->(.E),>=
F->(.E),/
F->(.E),*
F->(.E),-
F->(.E),+
F->.(E),/
shift:60
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,)
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,)
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,)
E->.T,-
E->.T,+
E->.T,)
E->.E-T,-
E->.E-T,+
E->.E-T,)
E->.E+T,-
E->.E+T,+
E->.E+T,)
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目224:
F->function_call,==
reduce:31
F->function_call,>
reduce:31
F->function_call,<
reduce:31
F->function_call,<=
reduce:31
F->function_call,>=
reduce:31
F->function_call,/
reduce:31
F->function_call,*
reduce:31
F->function_call,-
reduce:31
F->function_call,+
reduce:31
项目225:
T->F,==
reduce:26
T->F,>
reduce:26
T->F,<
reduce:26
T->F,<=
reduce:26
T->F,>=
reduce:26
T->F,/
reduce:26
T->F,*
reduce:26
T->F,-
reduce:26
T->F,+
reduce:26
项目226:
T->T./F,==
shift:177
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,==
shift:176
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E+T,==
reduce:21
E->E+T,>
reduce:21
E->E+T,<
reduce:21
E->E+T,<=
reduce:21
E->E+T,>=
reduce:21
E->E+T,-
reduce:21
E->E+T,+
reduce:21
项目227:
F->num,==
reduce:28
F->num,>
reduce:28
F->num,<
reduce:28
F->num,<=
reduce:28
F->num,>=
reduce:28
F->num,/
reduce:28
F->num,*
reduce:28
F->num,-
reduce:28
F->num,+
reduce:28
项目228:
F->array.[E],==
shift:279
F->array.[E],>
F->array.[E],<
F->array.[E],<=
F->array.[E],>=
F->array.[E],/
F->array.[E],*
F->array.[E],-
F->array.[E],+
项目229:
T->T./F,==
shift:177
T->T./F,>
T->T./F,<
T->T./F,<=
T->T./F,>=
T->T./F,/
T->T./F,*
T->T./F,-
T->T./F,+
T->T.*F,==
shift:176
T->T.*F,>
T->T.*F,<
T->T.*F,<=
T->T.*F,>=
T->T.*F,/
T->T.*F,*
T->T.*F,-
T->T.*F,+
E->E-T,==
reduce:22
E->E-T,>
reduce:22
E->E-T,<
reduce:22
E->E-T,<=
reduce:22
E->E-T,>=
reduce:22
E->E-T,-
reduce:22
E->E-T,+
reduce:22
项目230:
T->T*F,==
reduce:24
T->T*F,>
reduce:24
T->T*F,<
reduce:24
T->T*F,<=
reduce:24
T->T*F,>=
reduce:24
T->T*F,/
reduce:24
T->T*F,*
reduce:24
T->T*F,-
reduce:24
T->T*F,+
reduce:24
项目231:
T->T/F,==
reduce:25
T->T/F,>
reduce:25
T->T/F,<
reduce:25
T->T/F,<=
reduce:25
T->T/F,>=
reduce:25
T->T/F,/
reduce:25
T->T/F,*
reduce:25
T->T/F,-
reduce:25
T->T/F,+
reduce:25
项目232:
F->array[E.],==
shift:280
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],)
E->E.-T,]
shift:164
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:163
E->E.+T,-
E->E.+T,+
项目233:
whilesentence->sentence,scanf
reduce:50
whilesentence->sentence,printf
reduce:50
whilesentence->sentence,if
reduce:50
whilesentence->sentence,while
reduce:50
whilesentence->sentence,for
reduce:50
whilesentence->sentence,return
reduce:50
whilesentence->sentence,array
reduce:50
whilesentence->sentence,num
reduce:50
whilesentence->sentence,/
reduce:50
whilesentence->sentence,*
reduce:50
whilesentence->sentence,-
reduce:50
whilesentence->sentence,+
reduce:50
whilesentence->sentence,char
reduce:50
whilesentence->sentence,double
reduce:50
whilesentence->sentence,int
reduce:50
whilesentence->sentence,}
reduce:50
whilesentence->sentence,{
reduce:50
whilesentence->sentence,(
reduce:50
whilesentence->sentence,id
reduce:50
项目234:
while_expression->while1(bool_expression)whilesentence,scanf
reduce:48
while_expression->while1(bool_expression)whilesentence,printf
reduce:48
while_expression->while1(bool_expression)whilesentence,if
reduce:48
while_expression->while1(bool_expression)whilesentence,while
reduce:48
while_expression->while1(bool_expression)whilesentence,for
reduce:48
while_expression->while1(bool_expression)whilesentence,return
reduce:48
while_expression->while1(bool_expression)whilesentence,array
reduce:48
while_expression->while1(bool_expression)whilesentence,num
reduce:48
while_expression->while1(bool_expression)whilesentence,/
reduce:48
while_expression->while1(bool_expression)whilesentence,*
reduce:48
while_expression->while1(bool_expression)whilesentence,-
reduce:48
while_expression->while1(bool_expression)whilesentence,+
reduce:48
while_expression->while1(bool_expression)whilesentence,char
reduce:48
while_expression->while1(bool_expression)whilesentence,double
reduce:48
while_expression->while1(bool_expression)whilesentence,int
reduce:48
while_expression->while1(bool_expression)whilesentence,}
reduce:48
while_expression->while1(bool_expression)whilesentence,{
reduce:48
while_expression->while1(bool_expression)whilesentence,(
reduce:48
while_expression->while1(bool_expression)whilesentence,id
reduce:48
项目235:
H->E,)
reduce:58
E->E.-T,-
shift:105
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:104
E->E.+T,+
E->E.+T,)
项目236:
bool_expression->GopH,)
reduce:51
项目237:
scanf_expression->.scanf(string,getaddr);,scanf
shift:52
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:51
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:47
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:40
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:35
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->{.},scanf
shift:282
sentence->{.},printf
sentence->{.},else
sentence->{.},if
sentence->{.},while
sentence->{.},for
sentence->{.},return
sentence->{.},array
sentence->{.},num
sentence->{.},/
sentence->{.},*
sentence->{.},-
sentence->{.},+
sentence->{.},char
sentence->{.},double
sentence->{.},int
sentence->{.},}
sentence->{.},{
sentence->{.},(
sentence->{.},id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->{.block},scanf
sentence->{.block},printf
sentence->{.block},else
sentence->{.block},if
sentence->{.block},while
sentence->{.block},for
sentence->{.block},return
sentence->{.block},array
sentence->{.block},num
sentence->{.block},/
sentence->{.block},*
sentence->{.block},-
sentence->{.block},+
sentence->{.block},char
sentence->{.block},double
sentence->{.block},int
sentence->{.block},}
sentence->{.block},{
sentence->{.block},(
sentence->{.block},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
block->.sentenceblock,}
block->.sentence,}
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目238:
define->type.array[num];,scanf
shift:283
define->type.array[num];,printf
define->type.array[num];,else
define->type.array[num];,if
define->type.array[num];,while
define->type.array[num];,for
define->type.array[num];,return
define->type.array[num];,array
define->type.array[num];,num
define->type.array[num];,/
define->type.array[num];,*
define->type.array[num];,-
define->type.array[num];,+
define->type.array[num];,char
define->type.array[num];,double
define->type.array[num];,int
define->type.array[num];,}
define->type.array[num];,{
define->type.array[num];,(
define->type.array[num];,id
define->type.array[]={nums};,scanf
define->type.array[]={nums};,printf
define->type.array[]={nums};,else
define->type.array[]={nums};,if
define->type.array[]={nums};,while
define->type.array[]={nums};,for
define->type.array[]={nums};,return
define->type.array[]={nums};,array
define->type.array[]={nums};,num
define->type.array[]={nums};,/
define->type.array[]={nums};,*
define->type.array[]={nums};,-
define->type.array[]={nums};,+
define->type.array[]={nums};,char
define->type.array[]={nums};,double
define->type.array[]={nums};,int
define->type.array[]={nums};,}
define->type.array[]={nums};,{
define->type.array[]={nums};,(
define->type.array[]={nums};,id
define->type.array[num]={nums};,scanf
define->type.array[num]={nums};,printf
define->type.array[num]={nums};,else
define->type.array[num]={nums};,if
define->type.array[num]={nums};,while
define->type.array[num]={nums};,for
define->type.array[num]={nums};,return
define->type.array[num]={nums};,array
define->type.array[num]={nums};,num
define->type.array[num]={nums};,/
define->type.array[num]={nums};,*
define->type.array[num]={nums};,-
define->type.array[num]={nums};,+
define->type.array[num]={nums};,char
define->type.array[num]={nums};,double
define->type.array[num]={nums};,int
define->type.array[num]={nums};,}
define->type.array[num]={nums};,{
define->type.array[num]={nums};,(
define->type.array[num]={nums};,id
id_name->.id,=
shift:70
id_name->.id,;
define->type.id_name;,scanf
define->type.id_name;,printf
define->type.id_name;,else
define->type.id_name;,if
define->type.id_name;,while
define->type.id_name;,for
define->type.id_name;,return
define->type.id_name;,array
define->type.id_name;,num
define->type.id_name;,/
define->type.id_name;,*
define->type.id_name;,-
define->type.id_name;,+
define->type.id_name;,char
define->type.id_name;,double
define->type.id_name;,int
define->type.id_name;,}
define->type.id_name;,{
define->type.id_name;,(
define->type.id_name;,id
define->type.id_name=E;,scanf
define->type.id_name=E;,printf
define->type.id_name=E;,else
define->type.id_name=E;,if
define->type.id_name=E;,while
define->type.id_name=E;,for
define->type.id_name=E;,return
define->type.id_name=E;,array
define->type.id_name=E;,num
define->type.id_name=E;,/
define->type.id_name=E;,*
define->type.id_name=E;,-
define->type.id_name=E;,+
define->type.id_name=E;,char
define->type.id_name=E;,double
define->type.id_name=E;,int
define->type.id_name=E;,}
define->type.id_name=E;,{
define->type.id_name=E;,(
define->type.id_name=E;,id
项目239:
ifsentence->sentence,else
reduce:70
if_expression->if(bool_expression)sentence,scanf
reduce:68
if_expression->if(bool_expression)sentence,printf
reduce:68
if_expression->if(bool_expression)sentence,if
reduce:68
if_expression->if(bool_expression)sentence,while
reduce:68
if_expression->if(bool_expression)sentence,for
reduce:68
if_expression->if(bool_expression)sentence,return
reduce:68
if_expression->if(bool_expression)sentence,array
reduce:68
if_expression->if(bool_expression)sentence,num
reduce:68
if_expression->if(bool_expression)sentence,/
reduce:68
if_expression->if(bool_expression)sentence,*
reduce:68
if_expression->if(bool_expression)sentence,-
reduce:68
if_expression->if(bool_expression)sentence,+
reduce:68
if_expression->if(bool_expression)sentence,char
reduce:68
if_expression->if(bool_expression)sentence,double
reduce:68
if_expression->if(bool_expression)sentence,int
reduce:68
if_expression->if(bool_expression)sentence,}
reduce:68
if_expression->if(bool_expression)sentence,{
reduce:68
if_expression->if(bool_expression)sentence,(
reduce:68
if_expression->if(bool_expression)sentence,id
reduce:68
项目240:
E->E.-T,-
shift:76
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:75
E->E.+T,+
E->E.+T,;
sentence->E.;,scanf
shift:285
sentence->E.;,printf
sentence->E.;,else
sentence->E.;,if
sentence->E.;,while
sentence->E.;,for
sentence->E.;,return
sentence->E.;,array
sentence->E.;,num
sentence->E.;,/
sentence->E.;,*
sentence->E.;,-
sentence->E.;,+
sentence->E.;,char
sentence->E.;,double
sentence->E.;,int
sentence->E.;,}
sentence->E.;,{
sentence->E.;,(
sentence->E.;,id
项目241:
sentence->return.E;,scanf
sentence->return.E;,printf
sentence->return.E;,else
sentence->return.E;,if
sentence->return.E;,while
sentence->return.E;,for
sentence->return.E;,return
sentence->return.E;,array
sentence->return.E;,num
sentence->return.E;,/
sentence->return.E;,*
sentence->return.E;,-
sentence->return.E;,+
sentence->return.E;,char
sentence->return.E;,double
sentence->return.E;,int
sentence->return.E;,}
sentence->return.E;,{
sentence->return.E;,(
sentence->return.E;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目242:
sentence->define,scanf
reduce:33
sentence->define,printf
reduce:33
sentence->define,else
reduce:33
sentence->define,if
reduce:33
sentence->define,while
reduce:33
sentence->define,for
reduce:33
sentence->define,return
reduce:33
sentence->define,array
reduce:33
sentence->define,num
reduce:33
sentence->define,/
reduce:33
sentence->define,*
reduce:33
sentence->define,-
reduce:33
sentence->define,+
reduce:33
sentence->define,char
reduce:33
sentence->define,double
reduce:33
sentence->define,int
reduce:33
sentence->define,}
reduce:33
sentence->define,{
reduce:33
sentence->define,(
reduce:33
sentence->define,id
reduce:33
项目243:
sentence->set_value.;,scanf
shift:287
sentence->set_value.;,printf
sentence->set_value.;,else
sentence->set_value.;,if
sentence->set_value.;,while
sentence->set_value.;,for
sentence->set_value.;,return
sentence->set_value.;,array
sentence->set_value.;,num
sentence->set_value.;,/
sentence->set_value.;,*
sentence->set_value.;,-
sentence->set_value.;,+
sentence->set_value.;,char
sentence->set_value.;,double
sentence->set_value.;,int
sentence->set_value.;,}
sentence->set_value.;,{
sentence->set_value.;,(
sentence->set_value.;,id
项目244:
sentence->loop_expression,scanf
reduce:45
sentence->loop_expression,printf
reduce:45
sentence->loop_expression,else
reduce:45
sentence->loop_expression,if
reduce:45
sentence->loop_expression,while
reduce:45
sentence->loop_expression,for
reduce:45
sentence->loop_expression,return
reduce:45
sentence->loop_expression,array
reduce:45
sentence->loop_expression,num
reduce:45
sentence->loop_expression,/
reduce:45
sentence->loop_expression,*
reduce:45
sentence->loop_expression,-
reduce:45
sentence->loop_expression,+
reduce:45
sentence->loop_expression,char
reduce:45
sentence->loop_expression,double
reduce:45
sentence->loop_expression,int
reduce:45
sentence->loop_expression,}
reduce:45
sentence->loop_expression,{
reduce:45
sentence->loop_expression,(
reduce:45
sentence->loop_expression,id
reduce:45
项目245:
sentence->while_expression,scanf
reduce:46
sentence->while_expression,printf
reduce:46
sentence->while_expression,else
reduce:46
sentence->while_expression,if
reduce:46
sentence->while_expression,while
reduce:46
sentence->while_expression,for
reduce:46
sentence->while_expression,return
reduce:46
sentence->while_expression,array
reduce:46
sentence->while_expression,num
reduce:46
sentence->while_expression,/
reduce:46
sentence->while_expression,*
reduce:46
sentence->while_expression,-
reduce:46
sentence->while_expression,+
reduce:46
sentence->while_expression,char
reduce:46
sentence->while_expression,double
reduce:46
sentence->while_expression,int
reduce:46
sentence->while_expression,}
reduce:46
sentence->while_expression,{
reduce:46
sentence->while_expression,(
reduce:46
sentence->while_expression,id
reduce:46
项目246:
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:288
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for.(for_set_value;bool_expression;IncorDec)forsentence,id
项目247:
sentence->IncorDec.;,scanf
shift:289
sentence->IncorDec.;,printf
sentence->IncorDec.;,else
sentence->IncorDec.;,if
sentence->IncorDec.;,while
sentence->IncorDec.;,for
sentence->IncorDec.;,return
sentence->IncorDec.;,array
sentence->IncorDec.;,num
sentence->IncorDec.;,/
sentence->IncorDec.;,*
sentence->IncorDec.;,-
sentence->IncorDec.;,+
sentence->IncorDec.;,char
sentence->IncorDec.;,double
sentence->IncorDec.;,int
sentence->IncorDec.;,}
sentence->IncorDec.;,{
sentence->IncorDec.;,(
sentence->IncorDec.;,id
项目248:
while_expression->while1.(bool_expression)whilesentence,scanf
shift:290
while_expression->while1.(bool_expression)whilesentence,printf
while_expression->while1.(bool_expression)whilesentence,else
while_expression->while1.(bool_expression)whilesentence,if
while_expression->while1.(bool_expression)whilesentence,while
while_expression->while1.(bool_expression)whilesentence,for
while_expression->while1.(bool_expression)whilesentence,return
while_expression->while1.(bool_expression)whilesentence,array
while_expression->while1.(bool_expression)whilesentence,num
while_expression->while1.(bool_expression)whilesentence,/
while_expression->while1.(bool_expression)whilesentence,*
while_expression->while1.(bool_expression)whilesentence,-
while_expression->while1.(bool_expression)whilesentence,+
while_expression->while1.(bool_expression)whilesentence,char
while_expression->while1.(bool_expression)whilesentence,double
while_expression->while1.(bool_expression)whilesentence,int
while_expression->while1.(bool_expression)whilesentence,}
while_expression->while1.(bool_expression)whilesentence,{
while_expression->while1.(bool_expression)whilesentence,(
while_expression->while1.(bool_expression)whilesentence,id
项目249:
sentence->if_expression,scanf
reduce:67
sentence->if_expression,printf
reduce:67
sentence->if_expression,else
reduce:67
sentence->if_expression,if
reduce:67
sentence->if_expression,while
reduce:67
sentence->if_expression,for
reduce:67
sentence->if_expression,return
reduce:67
sentence->if_expression,array
reduce:67
sentence->if_expression,num
reduce:67
sentence->if_expression,/
reduce:67
sentence->if_expression,*
reduce:67
sentence->if_expression,-
reduce:67
sentence->if_expression,+
reduce:67
sentence->if_expression,char
reduce:67
sentence->if_expression,double
reduce:67
sentence->if_expression,int
reduce:67
sentence->if_expression,}
reduce:67
sentence->if_expression,{
reduce:67
sentence->if_expression,(
reduce:67
sentence->if_expression,id
reduce:67
项目250:
if_expression->if.(bool_expression)ifsentenceelsesentence,scanf
shift:291
if_expression->if.(bool_expression)ifsentenceelsesentence,printf
if_expression->if.(bool_expression)ifsentenceelsesentence,else
if_expression->if.(bool_expression)ifsentenceelsesentence,if
if_expression->if.(bool_expression)ifsentenceelsesentence,while
if_expression->if.(bool_expression)ifsentenceelsesentence,for
if_expression->if.(bool_expression)ifsentenceelsesentence,return
if_expression->if.(bool_expression)ifsentenceelsesentence,array
if_expression->if.(bool_expression)ifsentenceelsesentence,num
if_expression->if.(bool_expression)ifsentenceelsesentence,/
if_expression->if.(bool_expression)ifsentenceelsesentence,*
if_expression->if.(bool_expression)ifsentenceelsesentence,-
if_expression->if.(bool_expression)ifsentenceelsesentence,+
if_expression->if.(bool_expression)ifsentenceelsesentence,char
if_expression->if.(bool_expression)ifsentenceelsesentence,double
if_expression->if.(bool_expression)ifsentenceelsesentence,int
if_expression->if.(bool_expression)ifsentenceelsesentence,}
if_expression->if.(bool_expression)ifsentenceelsesentence,{
if_expression->if.(bool_expression)ifsentenceelsesentence,(
if_expression->if.(bool_expression)ifsentenceelsesentence,id
if_expression->if.(bool_expression)sentence,scanf
if_expression->if.(bool_expression)sentence,printf
if_expression->if.(bool_expression)sentence,else
if_expression->if.(bool_expression)sentence,if
if_expression->if.(bool_expression)sentence,while
if_expression->if.(bool_expression)sentence,for
if_expression->if.(bool_expression)sentence,return
if_expression->if.(bool_expression)sentence,array
if_expression->if.(bool_expression)sentence,num
if_expression->if.(bool_expression)sentence,/
if_expression->if.(bool_expression)sentence,*
if_expression->if.(bool_expression)sentence,-
if_expression->if.(bool_expression)sentence,+
if_expression->if.(bool_expression)sentence,char
if_expression->if.(bool_expression)sentence,double
if_expression->if.(bool_expression)sentence,int
if_expression->if.(bool_expression)sentence,}
if_expression->if.(bool_expression)sentence,{
if_expression->if.(bool_expression)sentence,(
if_expression->if.(bool_expression)sentence,id
项目251:
if_expression->if(bool_expression)ifsentence.elsesentence,scanf
shift:292
if_expression->if(bool_expression)ifsentence.elsesentence,printf
if_expression->if(bool_expression)ifsentence.elsesentence,if
if_expression->if(bool_expression)ifsentence.elsesentence,while
if_expression->if(bool_expression)ifsentence.elsesentence,for
if_expression->if(bool_expression)ifsentence.elsesentence,return
if_expression->if(bool_expression)ifsentence.elsesentence,array
if_expression->if(bool_expression)ifsentence.elsesentence,num
if_expression->if(bool_expression)ifsentence.elsesentence,/
if_expression->if(bool_expression)ifsentence.elsesentence,*
if_expression->if(bool_expression)ifsentence.elsesentence,-
if_expression->if(bool_expression)ifsentence.elsesentence,+
if_expression->if(bool_expression)ifsentence.elsesentence,char
if_expression->if(bool_expression)ifsentence.elsesentence,double
if_expression->if(bool_expression)ifsentence.elsesentence,int
if_expression->if(bool_expression)ifsentence.elsesentence,}
if_expression->if(bool_expression)ifsentence.elsesentence,{
if_expression->if(bool_expression)ifsentence.elsesentence,(
if_expression->if(bool_expression)ifsentence.elsesentence,id
项目252:
sentence->inout_expression,scanf
reduce:71
sentence->inout_expression,printf
reduce:71
sentence->inout_expression,else
reduce:71
sentence->inout_expression,if
reduce:71
sentence->inout_expression,while
reduce:71
sentence->inout_expression,for
reduce:71
sentence->inout_expression,return
reduce:71
sentence->inout_expression,array
reduce:71
sentence->inout_expression,num
reduce:71
sentence->inout_expression,/
reduce:71
sentence->inout_expression,*
reduce:71
sentence->inout_expression,-
reduce:71
sentence->inout_expression,+
reduce:71
sentence->inout_expression,char
reduce:71
sentence->inout_expression,double
reduce:71
sentence->inout_expression,int
reduce:71
sentence->inout_expression,}
reduce:71
sentence->inout_expression,{
reduce:71
sentence->inout_expression,(
reduce:71
sentence->inout_expression,id
reduce:71
项目253:
inout_expression->printf_expression,scanf
reduce:72
inout_expression->printf_expression,printf
reduce:72
inout_expression->printf_expression,else
reduce:72
inout_expression->printf_expression,if
reduce:72
inout_expression->printf_expression,while
reduce:72
inout_expression->printf_expression,for
reduce:72
inout_expression->printf_expression,return
reduce:72
inout_expression->printf_expression,array
reduce:72
inout_expression->printf_expression,num
reduce:72
inout_expression->printf_expression,/
reduce:72
inout_expression->printf_expression,*
reduce:72
inout_expression->printf_expression,-
reduce:72
inout_expression->printf_expression,+
reduce:72
inout_expression->printf_expression,char
reduce:72
inout_expression->printf_expression,double
reduce:72
inout_expression->printf_expression,int
reduce:72
inout_expression->printf_expression,}
reduce:72
inout_expression->printf_expression,{
reduce:72
inout_expression->printf_expression,(
reduce:72
inout_expression->printf_expression,id
reduce:72
项目254:
inout_expression->scanf_expression,scanf
reduce:73
inout_expression->scanf_expression,printf
reduce:73
inout_expression->scanf_expression,else
reduce:73
inout_expression->scanf_expression,if
reduce:73
inout_expression->scanf_expression,while
reduce:73
inout_expression->scanf_expression,for
reduce:73
inout_expression->scanf_expression,return
reduce:73
inout_expression->scanf_expression,array
reduce:73
inout_expression->scanf_expression,num
reduce:73
inout_expression->scanf_expression,/
reduce:73
inout_expression->scanf_expression,*
reduce:73
inout_expression->scanf_expression,-
reduce:73
inout_expression->scanf_expression,+
reduce:73
inout_expression->scanf_expression,char
reduce:73
inout_expression->scanf_expression,double
reduce:73
inout_expression->scanf_expression,int
reduce:73
inout_expression->scanf_expression,}
reduce:73
inout_expression->scanf_expression,{
reduce:73
inout_expression->scanf_expression,(
reduce:73
inout_expression->scanf_expression,id
reduce:73
项目255:
printf_expression->printf.(string,expressions);,scanf
shift:293
printf_expression->printf.(string,expressions);,printf
printf_expression->printf.(string,expressions);,else
printf_expression->printf.(string,expressions);,if
printf_expression->printf.(string,expressions);,while
printf_expression->printf.(string,expressions);,for
printf_expression->printf.(string,expressions);,return
printf_expression->printf.(string,expressions);,array
printf_expression->printf.(string,expressions);,num
printf_expression->printf.(string,expressions);,/
printf_expression->printf.(string,expressions);,*
printf_expression->printf.(string,expressions);,-
printf_expression->printf.(string,expressions);,+
printf_expression->printf.(string,expressions);,char
printf_expression->printf.(string,expressions);,double
printf_expression->printf.(string,expressions);,int
printf_expression->printf.(string,expressions);,}
printf_expression->printf.(string,expressions);,{
printf_expression->printf.(string,expressions);,(
printf_expression->printf.(string,expressions);,id
printf_expression->printf.(string);,scanf
printf_expression->printf.(string);,printf
printf_expression->printf.(string);,else
printf_expression->printf.(string);,if
printf_expression->printf.(string);,while
printf_expression->printf.(string);,for
printf_expression->printf.(string);,return
printf_expression->printf.(string);,array
printf_expression->printf.(string);,num
printf_expression->printf.(string);,/
printf_expression->printf.(string);,*
printf_expression->printf.(string);,-
printf_expression->printf.(string);,+
printf_expression->printf.(string);,char
printf_expression->printf.(string);,double
printf_expression->printf.(string);,int
printf_expression->printf.(string);,}
printf_expression->printf.(string);,{
printf_expression->printf.(string);,(
printf_expression->printf.(string);,id
项目256:
scanf_expression->scanf.(string,getaddr);,scanf
shift:294
scanf_expression->scanf.(string,getaddr);,printf
scanf_expression->scanf.(string,getaddr);,else
scanf_expression->scanf.(string,getaddr);,if
scanf_expression->scanf.(string,getaddr);,while
scanf_expression->scanf.(string,getaddr);,for
scanf_expression->scanf.(string,getaddr);,return
scanf_expression->scanf.(string,getaddr);,array
scanf_expression->scanf.(string,getaddr);,num
scanf_expression->scanf.(string,getaddr);,/
scanf_expression->scanf.(string,getaddr);,*
scanf_expression->scanf.(string,getaddr);,-
scanf_expression->scanf.(string,getaddr);,+
scanf_expression->scanf.(string,getaddr);,char
scanf_expression->scanf.(string,getaddr);,double
scanf_expression->scanf.(string,getaddr);,int
scanf_expression->scanf.(string,getaddr);,}
scanf_expression->scanf.(string,getaddr);,{
scanf_expression->scanf.(string,getaddr);,(
scanf_expression->scanf.(string,getaddr);,id
项目257:
printf_expression->printf(string);,scanf
reduce:74
printf_expression->printf(string);,printf
reduce:74
printf_expression->printf(string);,if
reduce:74
printf_expression->printf(string);,while
reduce:74
printf_expression->printf(string);,for
reduce:74
printf_expression->printf(string);,return
reduce:74
printf_expression->printf(string);,array
reduce:74
printf_expression->printf(string);,num
reduce:74
printf_expression->printf(string);,/
reduce:74
printf_expression->printf(string);,*
reduce:74
printf_expression->printf(string);,-
reduce:74
printf_expression->printf(string);,+
reduce:74
printf_expression->printf(string);,char
reduce:74
printf_expression->printf(string);,double
reduce:74
printf_expression->printf(string);,int
reduce:74
printf_expression->printf(string);,}
reduce:74
printf_expression->printf(string);,{
reduce:74
printf_expression->printf(string);,(
reduce:74
printf_expression->printf(string);,id
reduce:74
项目258:
expressions->id,)
reduce:77
expressions->id.,expressions,)
shift:295
项目259:
printf_expression->printf(string,expressions.);,scanf
shift:296
printf_expression->printf(string,expressions.);,printf
printf_expression->printf(string,expressions.);,if
printf_expression->printf(string,expressions.);,while
printf_expression->printf(string,expressions.);,for
printf_expression->printf(string,expressions.);,return
printf_expression->printf(string,expressions.);,array
printf_expression->printf(string,expressions.);,num
printf_expression->printf(string,expressions.);,/
printf_expression->printf(string,expressions.);,*
printf_expression->printf(string,expressions.);,-
printf_expression->printf(string,expressions.);,+
printf_expression->printf(string,expressions.);,char
printf_expression->printf(string,expressions.);,double
printf_expression->printf(string,expressions.);,int
printf_expression->printf(string,expressions.);,}
printf_expression->printf(string,expressions.);,{
printf_expression->printf(string,expressions.);,(
printf_expression->printf(string,expressions.);,id
项目260:
scanf_expression->scanf(string,getaddr.);,scanf
shift:297
scanf_expression->scanf(string,getaddr.);,printf
scanf_expression->scanf(string,getaddr.);,if
scanf_expression->scanf(string,getaddr.);,while
scanf_expression->scanf(string,getaddr.);,for
scanf_expression->scanf(string,getaddr.);,return
scanf_expression->scanf(string,getaddr.);,array
scanf_expression->scanf(string,getaddr.);,num
scanf_expression->scanf(string,getaddr.);,/
scanf_expression->scanf(string,getaddr.);,*
scanf_expression->scanf(string,getaddr.);,-
scanf_expression->scanf(string,getaddr.);,+
scanf_expression->scanf(string,getaddr.);,char
scanf_expression->scanf(string,getaddr.);,double
scanf_expression->scanf(string,getaddr.);,int
scanf_expression->scanf(string,getaddr.);,}
scanf_expression->scanf(string,getaddr.);,{
scanf_expression->scanf(string,getaddr.);,(
scanf_expression->scanf(string,getaddr.);,id
项目261:
getaddr->&.id,)
shift:298
项目262:
function_call->id(function_call_list),,
reduce:9
function_call->id(function_call_list),)
reduce:9
项目263:
F->array[E],,
reduce:30
F->array[E],)
reduce:30
项目264:
define->typearray[num];,scanf
reduce:39
define->typearray[num];,printf
reduce:39
define->typearray[num];,if
reduce:39
define->typearray[num];,while
reduce:39
define->typearray[num];,for
reduce:39
define->typearray[num];,return
reduce:39
define->typearray[num];,array
reduce:39
define->typearray[num];,num
reduce:39
define->typearray[num];,/
reduce:39
define->typearray[num];,*
reduce:39
define->typearray[num];,-
reduce:39
define->typearray[num];,+
reduce:39
define->typearray[num];,char
reduce:39
define->typearray[num];,double
reduce:39
define->typearray[num];,int
reduce:39
define->typearray[num];,}
reduce:39
define->typearray[num];,{
reduce:39
define->typearray[num];,(
reduce:39
define->typearray[num];,id
reduce:39
项目265:
define->typearray[num]=.{nums};,scanf
shift:299
define->typearray[num]=.{nums};,printf
define->typearray[num]=.{nums};,if
define->typearray[num]=.{nums};,while
define->typearray[num]=.{nums};,for
define->typearray[num]=.{nums};,return
define->typearray[num]=.{nums};,array
define->typearray[num]=.{nums};,num
define->typearray[num]=.{nums};,/
define->typearray[num]=.{nums};,*
define->typearray[num]=.{nums};,-
define->typearray[num]=.{nums};,+
define->typearray[num]=.{nums};,char
define->typearray[num]=.{nums};,double
define->typearray[num]=.{nums};,int
define->typearray[num]=.{nums};,}
define->typearray[num]=.{nums};,{
define->typearray[num]=.{nums};,(
define->typearray[num]=.{nums};,id
项目266:
nums->.num,}
shift:300
nums->.num,nums,}
define->typearray[]={.nums};,scanf
define->typearray[]={.nums};,printf
define->typearray[]={.nums};,if
define->typearray[]={.nums};,while
define->typearray[]={.nums};,for
define->typearray[]={.nums};,return
define->typearray[]={.nums};,array
define->typearray[]={.nums};,num
define->typearray[]={.nums};,/
define->typearray[]={.nums};,*
define->typearray[]={.nums};,-
define->typearray[]={.nums};,+
define->typearray[]={.nums};,char
define->typearray[]={.nums};,double
define->typearray[]={.nums};,int
define->typearray[]={.nums};,}
define->typearray[]={.nums};,{
define->typearray[]={.nums};,(
define->typearray[]={.nums};,id
项目267:
function_call->id(function_call_list),]
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
项目268:
set_value->array[E]=E,;
reduce:44
E->E.-T,-
shift:76
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:75
E->E.+T,+
E->E.+T,;
项目269:
F->array[E],]
reduce:30
F->array[E],/
reduce:30
F->array[E],*
reduce:30
F->array[E],-
reduce:30
F->array[E],+
reduce:30
项目270:
set_value->array[E].=E,;
shift:205
项目271:
F->.function_call,,
F->.function_call,)
F->.array[E],,
shift:99
F->.array[E],)
F->.id,,
shift:92
F->.id,)
F->.num,,
shift:98
F->.num,)
F->.(E),,
shift:93
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->id(.function_call_list),;
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),==
shift:302
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->id(.),;
function_call->.id(),,
function_call->.id(),)
项目272:
F->(E.),==
shift:304
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
F->(E.),;
E->E.-T,-
shift:105
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:104
E->E.+T,+
E->E.+T,)
项目273:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->array[.E],;
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目274:
Dec_expression->.id--,)
shift:306
Inc_expression->.id++,)
IncorDec->.Dec_expression,)
IncorDec->.Inc_expression,)
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,id
项目275:
H->.E,;
bool_expression->Gop.H,;
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目276:
function_call->id(function_call_list),==
reduce:9
function_call->id(function_call_list),>
reduce:9
function_call->id(function_call_list),<
reduce:9
function_call->id(function_call_list),<=
reduce:9
function_call->id(function_call_list),>=
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
function_call->id(function_call_list),)
reduce:9
项目277:
F->.function_call,,
F->.function_call,)
F->.array[E],,
shift:99
F->.array[E],)
F->.id,,
shift:92
F->.id,)
F->.num,,
shift:98
F->.num,)
F->.(E),,
shift:93
F->.(E),)
function_call_list->.function_call_list,F,,
function_call_list->.function_call_list,F,)
function_call_list->.F,,
function_call_list->.F,)
function_call->id(.function_call_list),==
function_call->id(.function_call_list),>
function_call->id(.function_call_list),<
function_call->id(.function_call_list),<=
function_call->id(.function_call_list),>=
function_call->id(.function_call_list),/
function_call->id(.function_call_list),*
function_call->id(.function_call_list),-
function_call->id(.function_call_list),+
function_call->.id(function_call_list),,
function_call->.id(function_call_list),)
function_call->id(.),==
shift:312
function_call->id(.),>
function_call->id(.),<
function_call->id(.),<=
function_call->id(.),>=
function_call->id(.),/
function_call->id(.),*
function_call->id(.),-
function_call->id(.),+
function_call->.id(),,
function_call->.id(),)
项目278:
F->(E.),==
shift:314
F->(E.),>
F->(E.),<
F->(E.),<=
F->(E.),>=
F->(E.),/
F->(E.),*
F->(E.),-
F->(E.),+
E->E.-T,-
shift:105
E->E.-T,+
E->E.-T,)
E->E.+T,-
shift:104
E->E.+T,+
E->E.+T,)
项目279:
F->.function_call,]
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->array[.E],==
F->array[.E],>
F->array[.E],<
F->array[.E],<=
F->array[.E],>=
F->array[.E],/
F->array[.E],*
F->array[.E],-
F->array[.E],+
F->.array[E],]
shift:124
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.id,]
shift:117
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.num,]
shift:123
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.(E),]
shift:118
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
T->.F,]
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,]
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,]
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,]
E->.T,-
E->.T,+
E->.E-T,]
E->.E-T,-
E->.E-T,+
E->.E+T,]
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),]
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(),]
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
项目280:
F->array[E],==
reduce:30
F->array[E],>
reduce:30
F->array[E],<
reduce:30
F->array[E],<=
reduce:30
F->array[E],>=
reduce:30
F->array[E],/
reduce:30
F->array[E],*
reduce:30
F->array[E],-
reduce:30
F->array[E],+
reduce:30
F->array[E],)
reduce:30
项目281:
sentence->{block.},scanf
shift:316
sentence->{block.},printf
sentence->{block.},else
sentence->{block.},if
sentence->{block.},while
sentence->{block.},for
sentence->{block.},return
sentence->{block.},array
sentence->{block.},num
sentence->{block.},/
sentence->{block.},*
sentence->{block.},-
sentence->{block.},+
sentence->{block.},char
sentence->{block.},double
sentence->{block.},int
sentence->{block.},}
sentence->{block.},{
sentence->{block.},(
sentence->{block.},id
项目282:
sentence->{},scanf
reduce:19
sentence->{},printf
reduce:19
sentence->{},else
reduce:19
sentence->{},if
reduce:19
sentence->{},while
reduce:19
sentence->{},for
reduce:19
sentence->{},return
reduce:19
sentence->{},array
reduce:19
sentence->{},num
reduce:19
sentence->{},/
reduce:19
sentence->{},*
reduce:19
sentence->{},-
reduce:19
sentence->{},+
reduce:19
sentence->{},char
reduce:19
sentence->{},double
reduce:19
sentence->{},int
reduce:19
sentence->{},}
reduce:19
sentence->{},{
reduce:19
sentence->{},(
reduce:19
sentence->{},id
reduce:19
项目283:
define->typearray.[num];,scanf
shift:317
define->typearray.[num];,printf
define->typearray.[num];,else
define->typearray.[num];,if
define->typearray.[num];,while
define->typearray.[num];,for
define->typearray.[num];,return
define->typearray.[num];,array
define->typearray.[num];,num
define->typearray.[num];,/
define->typearray.[num];,*
define->typearray.[num];,-
define->typearray.[num];,+
define->typearray.[num];,char
define->typearray.[num];,double
define->typearray.[num];,int
define->typearray.[num];,}
define->typearray.[num];,{
define->typearray.[num];,(
define->typearray.[num];,id
define->typearray.[]={nums};,scanf
define->typearray.[]={nums};,printf
define->typearray.[]={nums};,else
define->typearray.[]={nums};,if
define->typearray.[]={nums};,while
define->typearray.[]={nums};,for
define->typearray.[]={nums};,return
define->typearray.[]={nums};,array
define->typearray.[]={nums};,num
define->typearray.[]={nums};,/
define->typearray.[]={nums};,*
define->typearray.[]={nums};,-
define->typearray.[]={nums};,+
define->typearray.[]={nums};,char
define->typearray.[]={nums};,double
define->typearray.[]={nums};,int
define->typearray.[]={nums};,}
define->typearray.[]={nums};,{
define->typearray.[]={nums};,(
define->typearray.[]={nums};,id
define->typearray.[num]={nums};,scanf
define->typearray.[num]={nums};,printf
define->typearray.[num]={nums};,else
define->typearray.[num]={nums};,if
define->typearray.[num]={nums};,while
define->typearray.[num]={nums};,for
define->typearray.[num]={nums};,return
define->typearray.[num]={nums};,array
define->typearray.[num]={nums};,num
define->typearray.[num]={nums};,/
define->typearray.[num]={nums};,*
define->typearray.[num]={nums};,-
define->typearray.[num]={nums};,+
define->typearray.[num]={nums};,char
define->typearray.[num]={nums};,double
define->typearray.[num]={nums};,int
define->typearray.[num]={nums};,}
define->typearray.[num]={nums};,{
define->typearray.[num]={nums};,(
define->typearray.[num]={nums};,id
项目284:
define->typeid_name.;,scanf
shift:318
define->typeid_name.;,printf
define->typeid_name.;,else
define->typeid_name.;,if
define->typeid_name.;,while
define->typeid_name.;,for
define->typeid_name.;,return
define->typeid_name.;,array
define->typeid_name.;,num
define->typeid_name.;,/
define->typeid_name.;,*
define->typeid_name.;,-
define->typeid_name.;,+
define->typeid_name.;,char
define->typeid_name.;,double
define->typeid_name.;,int
define->typeid_name.;,}
define->typeid_name.;,{
define->typeid_name.;,(
define->typeid_name.;,id
define->typeid_name.=E;,scanf
shift:319
define->typeid_name.=E;,printf
define->typeid_name.=E;,else
define->typeid_name.=E;,if
define->typeid_name.=E;,while
define->typeid_name.=E;,for
define->typeid_name.=E;,return
define->typeid_name.=E;,array
define->typeid_name.=E;,num
define->typeid_name.=E;,/
define->typeid_name.=E;,*
define->typeid_name.=E;,-
define->typeid_name.=E;,+
define->typeid_name.=E;,char
define->typeid_name.=E;,double
define->typeid_name.=E;,int
define->typeid_name.=E;,}
define->typeid_name.=E;,{
define->typeid_name.=E;,(
define->typeid_name.=E;,id
项目285:
sentence->E;,scanf
reduce:20
sentence->E;,printf
reduce:20
sentence->E;,else
reduce:20
sentence->E;,if
reduce:20
sentence->E;,while
reduce:20
sentence->E;,for
reduce:20
sentence->E;,return
reduce:20
sentence->E;,array
reduce:20
sentence->E;,num
reduce:20
sentence->E;,/
reduce:20
sentence->E;,*
reduce:20
sentence->E;,-
reduce:20
sentence->E;,+
reduce:20
sentence->E;,char
reduce:20
sentence->E;,double
reduce:20
sentence->E;,int
reduce:20
sentence->E;,}
reduce:20
sentence->E;,{
reduce:20
sentence->E;,(
reduce:20
sentence->E;,id
reduce:20
项目286:
sentence->returnE.;,scanf
shift:320
sentence->returnE.;,printf
sentence->returnE.;,else
sentence->returnE.;,if
sentence->returnE.;,while
sentence->returnE.;,for
sentence->returnE.;,return
sentence->returnE.;,array
sentence->returnE.;,num
sentence->returnE.;,/
sentence->returnE.;,*
sentence->returnE.;,-
sentence->returnE.;,+
sentence->returnE.;,char
sentence->returnE.;,double
sentence->returnE.;,int
sentence->returnE.;,}
sentence->returnE.;,{
sentence->returnE.;,(
sentence->returnE.;,id
E->E.-T,-
shift:76
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:75
E->E.+T,+
E->E.+T,;
项目287:
sentence->set_value;,scanf
reduce:42
sentence->set_value;,printf
reduce:42
sentence->set_value;,else
reduce:42
sentence->set_value;,if
reduce:42
sentence->set_value;,while
reduce:42
sentence->set_value;,for
reduce:42
sentence->set_value;,return
reduce:42
sentence->set_value;,array
reduce:42
sentence->set_value;,num
reduce:42
sentence->set_value;,/
reduce:42
sentence->set_value;,*
reduce:42
sentence->set_value;,-
reduce:42
sentence->set_value;,+
reduce:42
sentence->set_value;,char
reduce:42
sentence->set_value;,double
reduce:42
sentence->set_value;,int
reduce:42
sentence->set_value;,}
reduce:42
sentence->set_value;,{
reduce:42
sentence->set_value;,(
reduce:42
sentence->set_value;,id
reduce:42
项目288:
for_set_value->.set_value,;
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,scanf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->for(.for_set_value;bool_expression;IncorDec)forsentence,id
set_value->.array[E]=E,;
shift:128
set_value->.id=E,;
shift:127
项目289:
sentence->IncorDec;,scanf
reduce:62
sentence->IncorDec;,printf
reduce:62
sentence->IncorDec;,else
reduce:62
sentence->IncorDec;,if
reduce:62
sentence->IncorDec;,while
reduce:62
sentence->IncorDec;,for
reduce:62
sentence->IncorDec;,return
reduce:62
sentence->IncorDec;,array
reduce:62
sentence->IncorDec;,num
reduce:62
sentence->IncorDec;,/
reduce:62
sentence->IncorDec;,*
reduce:62
sentence->IncorDec;,-
reduce:62
sentence->IncorDec;,+
reduce:62
sentence->IncorDec;,char
reduce:62
sentence->IncorDec;,double
reduce:62
sentence->IncorDec;,int
reduce:62
sentence->IncorDec;,}
reduce:62
sentence->IncorDec;,{
reduce:62
sentence->IncorDec;,(
reduce:62
sentence->IncorDec;,id
reduce:62
项目290:
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
while_expression->while1(.bool_expression)whilesentence,scanf
while_expression->while1(.bool_expression)whilesentence,printf
while_expression->while1(.bool_expression)whilesentence,else
while_expression->while1(.bool_expression)whilesentence,if
while_expression->while1(.bool_expression)whilesentence,while
while_expression->while1(.bool_expression)whilesentence,for
while_expression->while1(.bool_expression)whilesentence,return
while_expression->while1(.bool_expression)whilesentence,array
while_expression->while1(.bool_expression)whilesentence,num
while_expression->while1(.bool_expression)whilesentence,/
while_expression->while1(.bool_expression)whilesentence,*
while_expression->while1(.bool_expression)whilesentence,-
while_expression->while1(.bool_expression)whilesentence,+
while_expression->while1(.bool_expression)whilesentence,char
while_expression->while1(.bool_expression)whilesentence,double
while_expression->while1(.bool_expression)whilesentence,int
while_expression->while1(.bool_expression)whilesentence,}
while_expression->while1(.bool_expression)whilesentence,{
while_expression->while1(.bool_expression)whilesentence,(
while_expression->while1(.bool_expression)whilesentence,id
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],==
shift:138
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,==
shift:131
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,==
shift:137
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),==
shift:132
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目291:
if_expression->if(.bool_expression)ifsentenceelsesentence,scanf
if_expression->if(.bool_expression)ifsentenceelsesentence,printf
if_expression->if(.bool_expression)ifsentenceelsesentence,else
if_expression->if(.bool_expression)ifsentenceelsesentence,if
if_expression->if(.bool_expression)ifsentenceelsesentence,while
if_expression->if(.bool_expression)ifsentenceelsesentence,for
if_expression->if(.bool_expression)ifsentenceelsesentence,return
if_expression->if(.bool_expression)ifsentenceelsesentence,array
if_expression->if(.bool_expression)ifsentenceelsesentence,num
if_expression->if(.bool_expression)ifsentenceelsesentence,/
if_expression->if(.bool_expression)ifsentenceelsesentence,*
if_expression->if(.bool_expression)ifsentenceelsesentence,-
if_expression->if(.bool_expression)ifsentenceelsesentence,+
if_expression->if(.bool_expression)ifsentenceelsesentence,char
if_expression->if(.bool_expression)ifsentenceelsesentence,double
if_expression->if(.bool_expression)ifsentenceelsesentence,int
if_expression->if(.bool_expression)ifsentenceelsesentence,}
if_expression->if(.bool_expression)ifsentenceelsesentence,{
if_expression->if(.bool_expression)ifsentenceelsesentence,(
if_expression->if(.bool_expression)ifsentenceelsesentence,id
if_expression->if(.bool_expression)sentence,scanf
if_expression->if(.bool_expression)sentence,printf
if_expression->if(.bool_expression)sentence,else
if_expression->if(.bool_expression)sentence,if
if_expression->if(.bool_expression)sentence,while
if_expression->if(.bool_expression)sentence,for
if_expression->if(.bool_expression)sentence,return
if_expression->if(.bool_expression)sentence,array
if_expression->if(.bool_expression)sentence,num
if_expression->if(.bool_expression)sentence,/
if_expression->if(.bool_expression)sentence,*
if_expression->if(.bool_expression)sentence,-
if_expression->if(.bool_expression)sentence,+
if_expression->if(.bool_expression)sentence,char
if_expression->if(.bool_expression)sentence,double
if_expression->if(.bool_expression)sentence,int
if_expression->if(.bool_expression)sentence,}
if_expression->if(.bool_expression)sentence,{
if_expression->if(.bool_expression)sentence,(
if_expression->if(.bool_expression)sentence,id
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,)
bool_expression->.GopH,)
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,)
F->.array[E],==
shift:138
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],)
F->.id,==
shift:131
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,)
F->.num,==
shift:137
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,)
F->.(E),==
shift:132
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),)
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),)
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),)
项目292:
scanf_expression->.scanf(string,getaddr);,scanf
shift:52
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:51
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->if(bool_expression)ifsentenceelse.sentence,scanf
if_expression->if(bool_expression)ifsentenceelse.sentence,printf
if_expression->if(bool_expression)ifsentenceelse.sentence,if
if_expression->if(bool_expression)ifsentenceelse.sentence,while
if_expression->if(bool_expression)ifsentenceelse.sentence,for
if_expression->if(bool_expression)ifsentenceelse.sentence,return
if_expression->if(bool_expression)ifsentenceelse.sentence,array
if_expression->if(bool_expression)ifsentenceelse.sentence,num
if_expression->if(bool_expression)ifsentenceelse.sentence,/
if_expression->if(bool_expression)ifsentenceelse.sentence,*
if_expression->if(bool_expression)ifsentenceelse.sentence,-
if_expression->if(bool_expression)ifsentenceelse.sentence,+
if_expression->if(bool_expression)ifsentenceelse.sentence,char
if_expression->if(bool_expression)ifsentenceelse.sentence,double
if_expression->if(bool_expression)ifsentenceelse.sentence,int
if_expression->if(bool_expression)ifsentenceelse.sentence,}
if_expression->if(bool_expression)ifsentenceelse.sentence,{
if_expression->if(bool_expression)ifsentenceelse.sentence,(
if_expression->if(bool_expression)ifsentenceelse.sentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:47
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:40
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:35
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目293:
printf_expression->printf(.string,expressions);,scanf
shift:325
printf_expression->printf(.string,expressions);,printf
printf_expression->printf(.string,expressions);,else
printf_expression->printf(.string,expressions);,if
printf_expression->printf(.string,expressions);,while
printf_expression->printf(.string,expressions);,for
printf_expression->printf(.string,expressions);,return
printf_expression->printf(.string,expressions);,array
printf_expression->printf(.string,expressions);,num
printf_expression->printf(.string,expressions);,/
printf_expression->printf(.string,expressions);,*
printf_expression->printf(.string,expressions);,-
printf_expression->printf(.string,expressions);,+
printf_expression->printf(.string,expressions);,char
printf_expression->printf(.string,expressions);,double
printf_expression->printf(.string,expressions);,int
printf_expression->printf(.string,expressions);,}
printf_expression->printf(.string,expressions);,{
printf_expression->printf(.string,expressions);,(
printf_expression->printf(.string,expressions);,id
printf_expression->printf(.string);,scanf
printf_expression->printf(.string);,printf
printf_expression->printf(.string);,else
printf_expression->printf(.string);,if
printf_expression->printf(.string);,while
printf_expression->printf(.string);,for
printf_expression->printf(.string);,return
printf_expression->printf(.string);,array
printf_expression->printf(.string);,num
printf_expression->printf(.string);,/
printf_expression->printf(.string);,*
printf_expression->printf(.string);,-
printf_expression->printf(.string);,+
printf_expression->printf(.string);,char
printf_expression->printf(.string);,double
printf_expression->printf(.string);,int
printf_expression->printf(.string);,}
printf_expression->printf(.string);,{
printf_expression->printf(.string);,(
printf_expression->printf(.string);,id
项目294:
scanf_expression->scanf(.string,getaddr);,scanf
shift:326
scanf_expression->scanf(.string,getaddr);,printf
scanf_expression->scanf(.string,getaddr);,else
scanf_expression->scanf(.string,getaddr);,if
scanf_expression->scanf(.string,getaddr);,while
scanf_expression->scanf(.string,getaddr);,for
scanf_expression->scanf(.string,getaddr);,return
scanf_expression->scanf(.string,getaddr);,array
scanf_expression->scanf(.string,getaddr);,num
scanf_expression->scanf(.string,getaddr);,/
scanf_expression->scanf(.string,getaddr);,*
scanf_expression->scanf(.string,getaddr);,-
scanf_expression->scanf(.string,getaddr);,+
scanf_expression->scanf(.string,getaddr);,char
scanf_expression->scanf(.string,getaddr);,double
scanf_expression->scanf(.string,getaddr);,int
scanf_expression->scanf(.string,getaddr);,}
scanf_expression->scanf(.string,getaddr);,{
scanf_expression->scanf(.string,getaddr);,(
scanf_expression->scanf(.string,getaddr);,id
项目295:
expressions->.id,)
shift:258
expressions->id,.expressions,)
expressions->.id,expressions,)
项目296:
printf_expression->printf(string,expressions).;,scanf
shift:328
printf_expression->printf(string,expressions).;,printf
printf_expression->printf(string,expressions).;,if
printf_expression->printf(string,expressions).;,while
printf_expression->printf(string,expressions).;,for
printf_expression->printf(string,expressions).;,return
printf_expression->printf(string,expressions).;,array
printf_expression->printf(string,expressions).;,num
printf_expression->printf(string,expressions).;,/
printf_expression->printf(string,expressions).;,*
printf_expression->printf(string,expressions).;,-
printf_expression->printf(string,expressions).;,+
printf_expression->printf(string,expressions).;,char
printf_expression->printf(string,expressions).;,double
printf_expression->printf(string,expressions).;,int
printf_expression->printf(string,expressions).;,}
printf_expression->printf(string,expressions).;,{
printf_expression->printf(string,expressions).;,(
printf_expression->printf(string,expressions).;,id
项目297:
scanf_expression->scanf(string,getaddr).;,scanf
shift:329
scanf_expression->scanf(string,getaddr).;,printf
scanf_expression->scanf(string,getaddr).;,if
scanf_expression->scanf(string,getaddr).;,while
scanf_expression->scanf(string,getaddr).;,for
scanf_expression->scanf(string,getaddr).;,return
scanf_expression->scanf(string,getaddr).;,array
scanf_expression->scanf(string,getaddr).;,num
scanf_expression->scanf(string,getaddr).;,/
scanf_expression->scanf(string,getaddr).;,*
scanf_expression->scanf(string,getaddr).;,-
scanf_expression->scanf(string,getaddr).;,+
scanf_expression->scanf(string,getaddr).;,char
scanf_expression->scanf(string,getaddr).;,double
scanf_expression->scanf(string,getaddr).;,int
scanf_expression->scanf(string,getaddr).;,}
scanf_expression->scanf(string,getaddr).;,{
scanf_expression->scanf(string,getaddr).;,(
scanf_expression->scanf(string,getaddr).;,id
项目298:
getaddr->&id,)
reduce:79
项目299:
nums->.num,}
shift:300
nums->.num,nums,}
define->typearray[num]={.nums};,scanf
define->typearray[num]={.nums};,printf
define->typearray[num]={.nums};,if
define->typearray[num]={.nums};,while
define->typearray[num]={.nums};,for
define->typearray[num]={.nums};,return
define->typearray[num]={.nums};,array
define->typearray[num]={.nums};,num
define->typearray[num]={.nums};,/
define->typearray[num]={.nums};,*
define->typearray[num]={.nums};,-
define->typearray[num]={.nums};,+
define->typearray[num]={.nums};,char
define->typearray[num]={.nums};,double
define->typearray[num]={.nums};,int
define->typearray[num]={.nums};,}
define->typearray[num]={.nums};,{
define->typearray[num]={.nums};,(
define->typearray[num]={.nums};,id
项目300:
nums->num,}
reduce:41
nums->num.,nums,}
shift:331
项目301:
define->typearray[]={nums.};,scanf
shift:332
define->typearray[]={nums.};,printf
define->typearray[]={nums.};,if
define->typearray[]={nums.};,while
define->typearray[]={nums.};,for
define->typearray[]={nums.};,return
define->typearray[]={nums.};,array
define->typearray[]={nums.};,num
define->typearray[]={nums.};,/
define->typearray[]={nums.};,*
define->typearray[]={nums.};,-
define->typearray[]={nums.};,+
define->typearray[]={nums.};,char
define->typearray[]={nums.};,double
define->typearray[]={nums.};,int
define->typearray[]={nums.};,}
define->typearray[]={nums.};,{
define->typearray[]={nums.};,(
define->typearray[]={nums.};,id
项目302:
function_call->id(),==
reduce:8
function_call->id(),>
reduce:8
function_call->id(),<
reduce:8
function_call->id(),<=
reduce:8
function_call->id(),>=
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
function_call->id(),;
reduce:8
项目303:
function_call_list->function_call_list.,F,,
shift:148
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),==
shift:333
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
function_call->id(function_call_list.),;
项目304:
F->(E),==
reduce:27
F->(E),>
reduce:27
F->(E),<
reduce:27
F->(E),<=
reduce:27
F->(E),>=
reduce:27
F->(E),/
reduce:27
F->(E),*
reduce:27
F->(E),-
reduce:27
F->(E),+
reduce:27
F->(E),;
reduce:27
项目305:
F->array[E.],==
shift:334
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
F->array[E.],;
E->E.-T,]
shift:164
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:163
E->E.+T,-
E->E.+T,+
项目306:
Dec_expression->id.--,)
shift:336
Inc_expression->id.++,)
shift:335
项目307:
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,scanf
shift:337
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,id
项目308:
IncorDec->Inc_expression,)
reduce:63
项目309:
IncorDec->Dec_expression,)
reduce:64
项目310:
H->E,;
reduce:58
E->E.-T,-
shift:76
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:75
E->E.+T,+
E->E.+T,;
项目311:
bool_expression->GopH,;
reduce:51
项目312:
function_call->id(),==
reduce:8
function_call->id(),>
reduce:8
function_call->id(),<
reduce:8
function_call->id(),<=
reduce:8
function_call->id(),>=
reduce:8
function_call->id(),/
reduce:8
function_call->id(),*
reduce:8
function_call->id(),-
reduce:8
function_call->id(),+
reduce:8
项目313:
function_call_list->function_call_list.,F,,
shift:148
function_call_list->function_call_list.,F,)
function_call->id(function_call_list.),==
shift:338
function_call->id(function_call_list.),>
function_call->id(function_call_list.),<
function_call->id(function_call_list.),<=
function_call->id(function_call_list.),>=
function_call->id(function_call_list.),/
function_call->id(function_call_list.),*
function_call->id(function_call_list.),-
function_call->id(function_call_list.),+
项目314:
F->(E),==
reduce:27
F->(E),>
reduce:27
F->(E),<
reduce:27
F->(E),<=
reduce:27
F->(E),>=
reduce:27
F->(E),/
reduce:27
F->(E),*
reduce:27
F->(E),-
reduce:27
F->(E),+
reduce:27
项目315:
F->array[E.],==
shift:339
F->array[E.],>
F->array[E.],<
F->array[E.],<=
F->array[E.],>=
F->array[E.],/
F->array[E.],*
F->array[E.],-
F->array[E.],+
E->E.-T,]
shift:164
E->E.-T,-
E->E.-T,+
E->E.+T,]
shift:163
E->E.+T,-
E->E.+T,+
项目316:
sentence->{block},scanf
reduce:18
sentence->{block},printf
reduce:18
sentence->{block},else
reduce:18
sentence->{block},if
reduce:18
sentence->{block},while
reduce:18
sentence->{block},for
reduce:18
sentence->{block},return
reduce:18
sentence->{block},array
reduce:18
sentence->{block},num
reduce:18
sentence->{block},/
reduce:18
sentence->{block},*
reduce:18
sentence->{block},-
reduce:18
sentence->{block},+
reduce:18
sentence->{block},char
reduce:18
sentence->{block},double
reduce:18
sentence->{block},int
reduce:18
sentence->{block},}
reduce:18
sentence->{block},{
reduce:18
sentence->{block},(
reduce:18
sentence->{block},id
reduce:18
项目317:
define->typearray[.num];,scanf
shift:340
define->typearray[.num];,printf
define->typearray[.num];,else
define->typearray[.num];,if
define->typearray[.num];,while
define->typearray[.num];,for
define->typearray[.num];,return
define->typearray[.num];,array
define->typearray[.num];,num
define->typearray[.num];,/
define->typearray[.num];,*
define->typearray[.num];,-
define->typearray[.num];,+
define->typearray[.num];,char
define->typearray[.num];,double
define->typearray[.num];,int
define->typearray[.num];,}
define->typearray[.num];,{
define->typearray[.num];,(
define->typearray[.num];,id
define->typearray[.]={nums};,scanf
shift:341
define->typearray[.]={nums};,printf
define->typearray[.]={nums};,else
define->typearray[.]={nums};,if
define->typearray[.]={nums};,while
define->typearray[.]={nums};,for
define->typearray[.]={nums};,return
define->typearray[.]={nums};,array
define->typearray[.]={nums};,num
define->typearray[.]={nums};,/
define->typearray[.]={nums};,*
define->typearray[.]={nums};,-
define->typearray[.]={nums};,+
define->typearray[.]={nums};,char
define->typearray[.]={nums};,double
define->typearray[.]={nums};,int
define->typearray[.]={nums};,}
define->typearray[.]={nums};,{
define->typearray[.]={nums};,(
define->typearray[.]={nums};,id
define->typearray[.num]={nums};,scanf
define->typearray[.num]={nums};,printf
define->typearray[.num]={nums};,else
define->typearray[.num]={nums};,if
define->typearray[.num]={nums};,while
define->typearray[.num]={nums};,for
define->typearray[.num]={nums};,return
define->typearray[.num]={nums};,array
define->typearray[.num]={nums};,num
define->typearray[.num]={nums};,/
define->typearray[.num]={nums};,*
define->typearray[.num]={nums};,-
define->typearray[.num]={nums};,+
define->typearray[.num]={nums};,char
define->typearray[.num]={nums};,double
define->typearray[.num]={nums};,int
define->typearray[.num]={nums};,}
define->typearray[.num]={nums};,{
define->typearray[.num]={nums};,(
define->typearray[.num]={nums};,id
项目318:
define->typeid_name;,scanf
reduce:35
define->typeid_name;,printf
reduce:35
define->typeid_name;,else
reduce:35
define->typeid_name;,if
reduce:35
define->typeid_name;,while
reduce:35
define->typeid_name;,for
reduce:35
define->typeid_name;,return
reduce:35
define->typeid_name;,array
reduce:35
define->typeid_name;,num
reduce:35
define->typeid_name;,/
reduce:35
define->typeid_name;,*
reduce:35
define->typeid_name;,-
reduce:35
define->typeid_name;,+
reduce:35
define->typeid_name;,char
reduce:35
define->typeid_name;,double
reduce:35
define->typeid_name;,int
reduce:35
define->typeid_name;,}
reduce:35
define->typeid_name;,{
reduce:35
define->typeid_name;,(
reduce:35
define->typeid_name;,id
reduce:35
项目319:
define->typeid_name=.E;,scanf
define->typeid_name=.E;,printf
define->typeid_name=.E;,else
define->typeid_name=.E;,if
define->typeid_name=.E;,while
define->typeid_name=.E;,for
define->typeid_name=.E;,return
define->typeid_name=.E;,array
define->typeid_name=.E;,num
define->typeid_name=.E;,/
define->typeid_name=.E;,*
define->typeid_name=.E;,-
define->typeid_name=.E;,+
define->typeid_name=.E;,char
define->typeid_name=.E;,double
define->typeid_name=.E;,int
define->typeid_name=.E;,}
define->typeid_name=.E;,{
define->typeid_name=.E;,(
define->typeid_name=.E;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
shift:82
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
shift:80
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目320:
sentence->returnE;,scanf
reduce:32
sentence->returnE;,printf
reduce:32
sentence->returnE;,else
reduce:32
sentence->returnE;,if
reduce:32
sentence->returnE;,while
reduce:32
sentence->returnE;,for
reduce:32
sentence->returnE;,return
reduce:32
sentence->returnE;,array
reduce:32
sentence->returnE;,num
reduce:32
sentence->returnE;,/
reduce:32
sentence->returnE;,*
reduce:32
sentence->returnE;,-
reduce:32
sentence->returnE;,+
reduce:32
sentence->returnE;,char
reduce:32
sentence->returnE;,double
reduce:32
sentence->returnE;,int
reduce:32
sentence->returnE;,}
reduce:32
sentence->returnE;,{
reduce:32
sentence->returnE;,(
reduce:32
sentence->returnE;,id
reduce:32
项目321:
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,scanf
shift:343
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value.;bool_expression;IncorDec)forsentence,id
项目322:
while_expression->while1(bool_expression.)whilesentence,scanf
shift:344
while_expression->while1(bool_expression.)whilesentence,printf
while_expression->while1(bool_expression.)whilesentence,else
while_expression->while1(bool_expression.)whilesentence,if
while_expression->while1(bool_expression.)whilesentence,while
while_expression->while1(bool_expression.)whilesentence,for
while_expression->while1(bool_expression.)whilesentence,return
while_expression->while1(bool_expression.)whilesentence,array
while_expression->while1(bool_expression.)whilesentence,num
while_expression->while1(bool_expression.)whilesentence,/
while_expression->while1(bool_expression.)whilesentence,*
while_expression->while1(bool_expression.)whilesentence,-
while_expression->while1(bool_expression.)whilesentence,+
while_expression->while1(bool_expression.)whilesentence,char
while_expression->while1(bool_expression.)whilesentence,double
while_expression->while1(bool_expression.)whilesentence,int
while_expression->while1(bool_expression.)whilesentence,}
while_expression->while1(bool_expression.)whilesentence,{
while_expression->while1(bool_expression.)whilesentence,(
while_expression->while1(bool_expression.)whilesentence,id
项目323:
if_expression->if(bool_expression.)ifsentenceelsesentence,scanf
shift:345
if_expression->if(bool_expression.)ifsentenceelsesentence,printf
if_expression->if(bool_expression.)ifsentenceelsesentence,else
if_expression->if(bool_expression.)ifsentenceelsesentence,if
if_expression->if(bool_expression.)ifsentenceelsesentence,while
if_expression->if(bool_expression.)ifsentenceelsesentence,for
if_expression->if(bool_expression.)ifsentenceelsesentence,return
if_expression->if(bool_expression.)ifsentenceelsesentence,array
if_expression->if(bool_expression.)ifsentenceelsesentence,num
if_expression->if(bool_expression.)ifsentenceelsesentence,/
if_expression->if(bool_expression.)ifsentenceelsesentence,*
if_expression->if(bool_expression.)ifsentenceelsesentence,-
if_expression->if(bool_expression.)ifsentenceelsesentence,+
if_expression->if(bool_expression.)ifsentenceelsesentence,char
if_expression->if(bool_expression.)ifsentenceelsesentence,double
if_expression->if(bool_expression.)ifsentenceelsesentence,int
if_expression->if(bool_expression.)ifsentenceelsesentence,}
if_expression->if(bool_expression.)ifsentenceelsesentence,{
if_expression->if(bool_expression.)ifsentenceelsesentence,(
if_expression->if(bool_expression.)ifsentenceelsesentence,id
if_expression->if(bool_expression.)sentence,scanf
if_expression->if(bool_expression.)sentence,printf
if_expression->if(bool_expression.)sentence,else
if_expression->if(bool_expression.)sentence,if
if_expression->if(bool_expression.)sentence,while
if_expression->if(bool_expression.)sentence,for
if_expression->if(bool_expression.)sentence,return
if_expression->if(bool_expression.)sentence,array
if_expression->if(bool_expression.)sentence,num
if_expression->if(bool_expression.)sentence,/
if_expression->if(bool_expression.)sentence,*
if_expression->if(bool_expression.)sentence,-
if_expression->if(bool_expression.)sentence,+
if_expression->if(bool_expression.)sentence,char
if_expression->if(bool_expression.)sentence,double
if_expression->if(bool_expression.)sentence,int
if_expression->if(bool_expression.)sentence,}
if_expression->if(bool_expression.)sentence,{
if_expression->if(bool_expression.)sentence,(
if_expression->if(bool_expression.)sentence,id
项目324:
if_expression->if(bool_expression)ifsentenceelsesentence,scanf
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,printf
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,if
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,while
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,for
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,return
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,array
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,num
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,/
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,*
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,-
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,+
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,char
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,double
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,int
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,}
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,{
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,(
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,id
reduce:69
项目325:
printf_expression->printf(string.,expressions);,scanf
shift:347
printf_expression->printf(string.,expressions);,printf
printf_expression->printf(string.,expressions);,else
printf_expression->printf(string.,expressions);,if
printf_expression->printf(string.,expressions);,while
printf_expression->printf(string.,expressions);,for
printf_expression->printf(string.,expressions);,return
printf_expression->printf(string.,expressions);,array
printf_expression->printf(string.,expressions);,num
printf_expression->printf(string.,expressions);,/
printf_expression->printf(string.,expressions);,*
printf_expression->printf(string.,expressions);,-
printf_expression->printf(string.,expressions);,+
printf_expression->printf(string.,expressions);,char
printf_expression->printf(string.,expressions);,double
printf_expression->printf(string.,expressions);,int
printf_expression->printf(string.,expressions);,}
printf_expression->printf(string.,expressions);,{
printf_expression->printf(string.,expressions);,(
printf_expression->printf(string.,expressions);,id
printf_expression->printf(string.);,scanf
shift:346
printf_expression->printf(string.);,printf
printf_expression->printf(string.);,else
printf_expression->printf(string.);,if
printf_expression->printf(string.);,while
printf_expression->printf(string.);,for
printf_expression->printf(string.);,return
printf_expression->printf(string.);,array
printf_expression->printf(string.);,num
printf_expression->printf(string.);,/
printf_expression->printf(string.);,*
printf_expression->printf(string.);,-
printf_expression->printf(string.);,+
printf_expression->printf(string.);,char
printf_expression->printf(string.);,double
printf_expression->printf(string.);,int
printf_expression->printf(string.);,}
printf_expression->printf(string.);,{
printf_expression->printf(string.);,(
printf_expression->printf(string.);,id
项目326:
scanf_expression->scanf(string.,getaddr);,scanf
shift:348
scanf_expression->scanf(string.,getaddr);,printf
scanf_expression->scanf(string.,getaddr);,else
scanf_expression->scanf(string.,getaddr);,if
scanf_expression->scanf(string.,getaddr);,while
scanf_expression->scanf(string.,getaddr);,for
scanf_expression->scanf(string.,getaddr);,return
scanf_expression->scanf(string.,getaddr);,array
scanf_expression->scanf(string.,getaddr);,num
scanf_expression->scanf(string.,getaddr);,/
scanf_expression->scanf(string.,getaddr);,*
scanf_expression->scanf(string.,getaddr);,-
scanf_expression->scanf(string.,getaddr);,+
scanf_expression->scanf(string.,getaddr);,char
scanf_expression->scanf(string.,getaddr);,double
scanf_expression->scanf(string.,getaddr);,int
scanf_expression->scanf(string.,getaddr);,}
scanf_expression->scanf(string.,getaddr);,{
scanf_expression->scanf(string.,getaddr);,(
scanf_expression->scanf(string.,getaddr);,id
项目327:
expressions->id,expressions,)
reduce:76
项目328:
printf_expression->printf(string,expressions);,scanf
reduce:75
printf_expression->printf(string,expressions);,printf
reduce:75
printf_expression->printf(string,expressions);,if
reduce:75
printf_expression->printf(string,expressions);,while
reduce:75
printf_expression->printf(string,expressions);,for
reduce:75
printf_expression->printf(string,expressions);,return
reduce:75
printf_expression->printf(string,expressions);,array
reduce:75
printf_expression->printf(string,expressions);,num
reduce:75
printf_expression->printf(string,expressions);,/
reduce:75
printf_expression->printf(string,expressions);,*
reduce:75
printf_expression->printf(string,expressions);,-
reduce:75
printf_expression->printf(string,expressions);,+
reduce:75
printf_expression->printf(string,expressions);,char
reduce:75
printf_expression->printf(string,expressions);,double
reduce:75
printf_expression->printf(string,expressions);,int
reduce:75
printf_expression->printf(string,expressions);,}
reduce:75
printf_expression->printf(string,expressions);,{
reduce:75
printf_expression->printf(string,expressions);,(
reduce:75
printf_expression->printf(string,expressions);,id
reduce:75
项目329:
scanf_expression->scanf(string,getaddr);,scanf
reduce:78
scanf_expression->scanf(string,getaddr);,printf
reduce:78
scanf_expression->scanf(string,getaddr);,if
reduce:78
scanf_expression->scanf(string,getaddr);,while
reduce:78
scanf_expression->scanf(string,getaddr);,for
reduce:78
scanf_expression->scanf(string,getaddr);,return
reduce:78
scanf_expression->scanf(string,getaddr);,array
reduce:78
scanf_expression->scanf(string,getaddr);,num
reduce:78
scanf_expression->scanf(string,getaddr);,/
reduce:78
scanf_expression->scanf(string,getaddr);,*
reduce:78
scanf_expression->scanf(string,getaddr);,-
reduce:78
scanf_expression->scanf(string,getaddr);,+
reduce:78
scanf_expression->scanf(string,getaddr);,char
reduce:78
scanf_expression->scanf(string,getaddr);,double
reduce:78
scanf_expression->scanf(string,getaddr);,int
reduce:78
scanf_expression->scanf(string,getaddr);,}
reduce:78
scanf_expression->scanf(string,getaddr);,{
reduce:78
scanf_expression->scanf(string,getaddr);,(
reduce:78
scanf_expression->scanf(string,getaddr);,id
reduce:78
项目330:
define->typearray[num]={nums.};,scanf
shift:349
define->typearray[num]={nums.};,printf
define->typearray[num]={nums.};,if
define->typearray[num]={nums.};,while
define->typearray[num]={nums.};,for
define->typearray[num]={nums.};,return
define->typearray[num]={nums.};,array
define->typearray[num]={nums.};,num
define->typearray[num]={nums.};,/
define->typearray[num]={nums.};,*
define->typearray[num]={nums.};,-
define->typearray[num]={nums.};,+
define->typearray[num]={nums.};,char
define->typearray[num]={nums.};,double
define->typearray[num]={nums.};,int
define->typearray[num]={nums.};,}
define->typearray[num]={nums.};,{
define->typearray[num]={nums.};,(
define->typearray[num]={nums.};,id
项目331:
nums->.num,}
shift:300
nums->num,.nums,}
nums->.num,nums,}
项目332:
define->typearray[]={nums}.;,scanf
shift:351
define->typearray[]={nums}.;,printf
define->typearray[]={nums}.;,if
define->typearray[]={nums}.;,while
define->typearray[]={nums}.;,for
define->typearray[]={nums}.;,return
define->typearray[]={nums}.;,array
define->typearray[]={nums}.;,num
define->typearray[]={nums}.;,/
define->typearray[]={nums}.;,*
define->typearray[]={nums}.;,-
define->typearray[]={nums}.;,+
define->typearray[]={nums}.;,char
define->typearray[]={nums}.;,double
define->typearray[]={nums}.;,int
define->typearray[]={nums}.;,}
define->typearray[]={nums}.;,{
define->typearray[]={nums}.;,(
define->typearray[]={nums}.;,id
项目333:
function_call->id(function_call_list),==
reduce:9
function_call->id(function_call_list),>
reduce:9
function_call->id(function_call_list),<
reduce:9
function_call->id(function_call_list),<=
reduce:9
function_call->id(function_call_list),>=
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
function_call->id(function_call_list),;
reduce:9
项目334:
F->array[E],==
reduce:30
F->array[E],>
reduce:30
F->array[E],<
reduce:30
F->array[E],<=
reduce:30
F->array[E],>=
reduce:30
F->array[E],/
reduce:30
F->array[E],*
reduce:30
F->array[E],-
reduce:30
F->array[E],+
reduce:30
F->array[E],;
reduce:30
项目335:
Inc_expression->id++,)
reduce:65
项目336:
Dec_expression->id--,)
reduce:66
项目337:
scanf_expression->.scanf(string,getaddr);,scanf
shift:52
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:51
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:47
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
forsentence->.sentence,scanf
forsentence->.sentence,printf
forsentence->.sentence,if
forsentence->.sentence,while
forsentence->.sentence,for
forsentence->.sentence,return
forsentence->.sentence,array
forsentence->.sentence,num
forsentence->.sentence,/
forsentence->.sentence,*
forsentence->.sentence,-
forsentence->.sentence,+
forsentence->.sentence,char
forsentence->.sentence,double
forsentence->.sentence,int
forsentence->.sentence,}
forsentence->.sentence,{
forsentence->.sentence,(
forsentence->.sentence,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:40
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:35
sentence->.returnE;,printf
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:22
sentence->.{},printf
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目338:
function_call->id(function_call_list),==
reduce:9
function_call->id(function_call_list),>
reduce:9
function_call->id(function_call_list),<
reduce:9
function_call->id(function_call_list),<=
reduce:9
function_call->id(function_call_list),>=
reduce:9
function_call->id(function_call_list),/
reduce:9
function_call->id(function_call_list),*
reduce:9
function_call->id(function_call_list),-
reduce:9
function_call->id(function_call_list),+
reduce:9
项目339:
F->array[E],==
reduce:30
F->array[E],>
reduce:30
F->array[E],<
reduce:30
F->array[E],<=
reduce:30
F->array[E],>=
reduce:30
F->array[E],/
reduce:30
F->array[E],*
reduce:30
F->array[E],-
reduce:30
F->array[E],+
reduce:30
项目340:
define->typearray[num.];,scanf
shift:354
define->typearray[num.];,printf
define->typearray[num.];,else
define->typearray[num.];,if
define->typearray[num.];,while
define->typearray[num.];,for
define->typearray[num.];,return
define->typearray[num.];,array
define->typearray[num.];,num
define->typearray[num.];,/
define->typearray[num.];,*
define->typearray[num.];,-
define->typearray[num.];,+
define->typearray[num.];,char
define->typearray[num.];,double
define->typearray[num.];,int
define->typearray[num.];,}
define->typearray[num.];,{
define->typearray[num.];,(
define->typearray[num.];,id
define->typearray[num.]={nums};,scanf
define->typearray[num.]={nums};,printf
define->typearray[num.]={nums};,else
define->typearray[num.]={nums};,if
define->typearray[num.]={nums};,while
define->typearray[num.]={nums};,for
define->typearray[num.]={nums};,return
define->typearray[num.]={nums};,array
define->typearray[num.]={nums};,num
define->typearray[num.]={nums};,/
define->typearray[num.]={nums};,*
define->typearray[num.]={nums};,-
define->typearray[num.]={nums};,+
define->typearray[num.]={nums};,char
define->typearray[num.]={nums};,double
define->typearray[num.]={nums};,int
define->typearray[num.]={nums};,}
define->typearray[num.]={nums};,{
define->typearray[num.]={nums};,(
define->typearray[num.]={nums};,id
项目341:
define->typearray[].={nums};,scanf
shift:355
define->typearray[].={nums};,printf
define->typearray[].={nums};,else
define->typearray[].={nums};,if
define->typearray[].={nums};,while
define->typearray[].={nums};,for
define->typearray[].={nums};,return
define->typearray[].={nums};,array
define->typearray[].={nums};,num
define->typearray[].={nums};,/
define->typearray[].={nums};,*
define->typearray[].={nums};,-
define->typearray[].={nums};,+
define->typearray[].={nums};,char
define->typearray[].={nums};,double
define->typearray[].={nums};,int
define->typearray[].={nums};,}
define->typearray[].={nums};,{
define->typearray[].={nums};,(
define->typearray[].={nums};,id
项目342:
define->typeid_name=E.;,scanf
shift:356
define->typeid_name=E.;,printf
define->typeid_name=E.;,else
define->typeid_name=E.;,if
define->typeid_name=E.;,while
define->typeid_name=E.;,for
define->typeid_name=E.;,return
define->typeid_name=E.;,array
define->typeid_name=E.;,num
define->typeid_name=E.;,/
define->typeid_name=E.;,*
define->typeid_name=E.;,-
define->typeid_name=E.;,+
define->typeid_name=E.;,char
define->typeid_name=E.;,double
define->typeid_name=E.;,int
define->typeid_name=E.;,}
define->typeid_name=E.;,{
define->typeid_name=E.;,(
define->typeid_name=E.;,id
E->E.-T,-
shift:76
E->E.-T,+
E->E.-T,;
E->E.+T,-
shift:75
E->E.+T,+
E->E.+T,;
项目343:
G->.E,==
G->.E,>
G->.E,<
G->.E,<=
G->.E,>=
bool_expression->.F,;
bool_expression->.GopH,;
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,scanf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,printf
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,else
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,if
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,while
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,for
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,return
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,array
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,num
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,/
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,*
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,-
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,+
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,char
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,double
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,int
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,}
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,{
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,(
loop_expression->for(for_set_value;.bool_expression;IncorDec)forsentence,id
F->.function_call,==
F->.function_call,>
F->.function_call,<
F->.function_call,<=
F->.function_call,>=
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],==
shift:216
F->.array[E],>
F->.array[E],<
F->.array[E],<=
F->.array[E],>=
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,==
shift:211
F->.id,>
F->.id,<
F->.id,<=
F->.id,>=
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,==
shift:215
F->.num,>
F->.num,<
F->.num,<=
F->.num,>=
F->.num,/
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),==
shift:212
F->.(E),>
F->.(E),<
F->.(E),<=
F->.(E),>=
F->.(E),/
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,==
T->.F,>
T->.F,<
T->.F,<=
T->.F,>=
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.T/F,==
T->.T/F,>
T->.T/F,<
T->.T/F,<=
T->.T/F,>=
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T*F,==
T->.T*F,>
T->.T*F,<
T->.T*F,<=
T->.T*F,>=
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
E->.T,==
E->.T,>
E->.T,<
E->.T,<=
E->.T,>=
E->.T,-
E->.T,+
E->.E-T,==
E->.E-T,>
E->.E-T,<
E->.E-T,<=
E->.E-T,>=
E->.E-T,-
E->.E-T,+
E->.E+T,==
E->.E+T,>
E->.E+T,<
E->.E+T,<=
E->.E+T,>=
E->.E+T,-
E->.E+T,+
function_call->.id(function_call_list),==
function_call->.id(function_call_list),>
function_call->.id(function_call_list),<
function_call->.id(function_call_list),<=
function_call->.id(function_call_list),>=
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),==
function_call->.id(),>
function_call->.id(),<
function_call->.id(),<=
function_call->.id(),>=
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目344:
scanf_expression->.scanf(string,getaddr);,scanf
shift:256
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:255
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:250
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
whilesentence->.sentence,scanf
whilesentence->.sentence,printf
whilesentence->.sentence,else
whilesentence->.sentence,if
whilesentence->.sentence,while
whilesentence->.sentence,for
whilesentence->.sentence,return
whilesentence->.sentence,array
whilesentence->.sentence,num
whilesentence->.sentence,/
whilesentence->.sentence,*
whilesentence->.sentence,-
whilesentence->.sentence,+
whilesentence->.sentence,char
whilesentence->.sentence,double
whilesentence->.sentence,int
whilesentence->.sentence,}
whilesentence->.sentence,{
whilesentence->.sentence,(
whilesentence->.sentence,id
while1->.while,(
shift:43
while_expression->while1(bool_expression).whilesentence,scanf
while_expression->while1(bool_expression).whilesentence,printf
while_expression->while1(bool_expression).whilesentence,else
while_expression->while1(bool_expression).whilesentence,if
while_expression->while1(bool_expression).whilesentence,while
while_expression->while1(bool_expression).whilesentence,for
while_expression->while1(bool_expression).whilesentence,return
while_expression->while1(bool_expression).whilesentence,array
while_expression->while1(bool_expression).whilesentence,num
while_expression->while1(bool_expression).whilesentence,/
while_expression->while1(bool_expression).whilesentence,*
while_expression->while1(bool_expression).whilesentence,-
while_expression->while1(bool_expression).whilesentence,+
while_expression->while1(bool_expression).whilesentence,char
while_expression->while1(bool_expression).whilesentence,double
while_expression->while1(bool_expression).whilesentence,int
while_expression->while1(bool_expression).whilesentence,}
while_expression->while1(bool_expression).whilesentence,{
while_expression->while1(bool_expression).whilesentence,(
while_expression->while1(bool_expression).whilesentence,id
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:246
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:241
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:237
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目345:
scanf_expression->.scanf(string,getaddr);,scanf
shift:256
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:255
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
ifsentence->.sentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,scanf
if_expression->if(bool_expression).ifsentenceelsesentence,printf
if_expression->if(bool_expression).ifsentenceelsesentence,else
if_expression->if(bool_expression).ifsentenceelsesentence,if
if_expression->if(bool_expression).ifsentenceelsesentence,while
if_expression->if(bool_expression).ifsentenceelsesentence,for
if_expression->if(bool_expression).ifsentenceelsesentence,return
if_expression->if(bool_expression).ifsentenceelsesentence,array
if_expression->if(bool_expression).ifsentenceelsesentence,num
if_expression->if(bool_expression).ifsentenceelsesentence,/
if_expression->if(bool_expression).ifsentenceelsesentence,*
if_expression->if(bool_expression).ifsentenceelsesentence,-
if_expression->if(bool_expression).ifsentenceelsesentence,+
if_expression->if(bool_expression).ifsentenceelsesentence,char
if_expression->if(bool_expression).ifsentenceelsesentence,double
if_expression->if(bool_expression).ifsentenceelsesentence,int
if_expression->if(bool_expression).ifsentenceelsesentence,}
if_expression->if(bool_expression).ifsentenceelsesentence,{
if_expression->if(bool_expression).ifsentenceelsesentence,(
if_expression->if(bool_expression).ifsentenceelsesentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:250
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->if(bool_expression).sentence,scanf
if_expression->if(bool_expression).sentence,printf
if_expression->if(bool_expression).sentence,else
if_expression->if(bool_expression).sentence,if
if_expression->if(bool_expression).sentence,while
if_expression->if(bool_expression).sentence,for
if_expression->if(bool_expression).sentence,return
if_expression->if(bool_expression).sentence,array
if_expression->if(bool_expression).sentence,num
if_expression->if(bool_expression).sentence,/
if_expression->if(bool_expression).sentence,*
if_expression->if(bool_expression).sentence,-
if_expression->if(bool_expression).sentence,+
if_expression->if(bool_expression).sentence,char
if_expression->if(bool_expression).sentence,double
if_expression->if(bool_expression).sentence,int
if_expression->if(bool_expression).sentence,}
if_expression->if(bool_expression).sentence,{
if_expression->if(bool_expression).sentence,(
if_expression->if(bool_expression).sentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:246
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:241
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:237
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目346:
printf_expression->printf(string).;,scanf
shift:362
printf_expression->printf(string).;,printf
printf_expression->printf(string).;,else
printf_expression->printf(string).;,if
printf_expression->printf(string).;,while
printf_expression->printf(string).;,for
printf_expression->printf(string).;,return
printf_expression->printf(string).;,array
printf_expression->printf(string).;,num
printf_expression->printf(string).;,/
printf_expression->printf(string).;,*
printf_expression->printf(string).;,-
printf_expression->printf(string).;,+
printf_expression->printf(string).;,char
printf_expression->printf(string).;,double
printf_expression->printf(string).;,int
printf_expression->printf(string).;,}
printf_expression->printf(string).;,{
printf_expression->printf(string).;,(
printf_expression->printf(string).;,id
项目347:
expressions->.id,)
shift:258
expressions->.id,expressions,)
printf_expression->printf(string,.expressions);,scanf
printf_expression->printf(string,.expressions);,printf
printf_expression->printf(string,.expressions);,else
printf_expression->printf(string,.expressions);,if
printf_expression->printf(string,.expressions);,while
printf_expression->printf(string,.expressions);,for
printf_expression->printf(string,.expressions);,return
printf_expression->printf(string,.expressions);,array
printf_expression->printf(string,.expressions);,num
printf_expression->printf(string,.expressions);,/
printf_expression->printf(string,.expressions);,*
printf_expression->printf(string,.expressions);,-
printf_expression->printf(string,.expressions);,+
printf_expression->printf(string,.expressions);,char
printf_expression->printf(string,.expressions);,double
printf_expression->printf(string,.expressions);,int
printf_expression->printf(string,.expressions);,}
printf_expression->printf(string,.expressions);,{
printf_expression->printf(string,.expressions);,(
printf_expression->printf(string,.expressions);,id
项目348:
getaddr->.&id,)
shift:261
scanf_expression->scanf(string,.getaddr);,scanf
scanf_expression->scanf(string,.getaddr);,printf
scanf_expression->scanf(string,.getaddr);,else
scanf_expression->scanf(string,.getaddr);,if
scanf_expression->scanf(string,.getaddr);,while
scanf_expression->scanf(string,.getaddr);,for
scanf_expression->scanf(string,.getaddr);,return
scanf_expression->scanf(string,.getaddr);,array
scanf_expression->scanf(string,.getaddr);,num
scanf_expression->scanf(string,.getaddr);,/
scanf_expression->scanf(string,.getaddr);,*
scanf_expression->scanf(string,.getaddr);,-
scanf_expression->scanf(string,.getaddr);,+
scanf_expression->scanf(string,.getaddr);,char
scanf_expression->scanf(string,.getaddr);,double
scanf_expression->scanf(string,.getaddr);,int
scanf_expression->scanf(string,.getaddr);,}
scanf_expression->scanf(string,.getaddr);,{
scanf_expression->scanf(string,.getaddr);,(
scanf_expression->scanf(string,.getaddr);,id
项目349:
define->typearray[num]={nums}.;,scanf
shift:365
define->typearray[num]={nums}.;,printf
define->typearray[num]={nums}.;,if
define->typearray[num]={nums}.;,while
define->typearray[num]={nums}.;,for
define->typearray[num]={nums}.;,return
define->typearray[num]={nums}.;,array
define->typearray[num]={nums}.;,num
define->typearray[num]={nums}.;,/
define->typearray[num]={nums}.;,*
define->typearray[num]={nums}.;,-
define->typearray[num]={nums}.;,+
define->typearray[num]={nums}.;,char
define->typearray[num]={nums}.;,double
define->typearray[num]={nums}.;,int
define->typearray[num]={nums}.;,}
define->typearray[num]={nums}.;,{
define->typearray[num]={nums}.;,(
define->typearray[num]={nums}.;,id
项目350:
nums->num,nums,}
reduce:40
项目351:
define->typearray[]={nums};,scanf
reduce:38
define->typearray[]={nums};,printf
reduce:38
define->typearray[]={nums};,if
reduce:38
define->typearray[]={nums};,while
reduce:38
define->typearray[]={nums};,for
reduce:38
define->typearray[]={nums};,return
reduce:38
define->typearray[]={nums};,array
reduce:38
define->typearray[]={nums};,num
reduce:38
define->typearray[]={nums};,/
reduce:38
define->typearray[]={nums};,*
reduce:38
define->typearray[]={nums};,-
reduce:38
define->typearray[]={nums};,+
reduce:38
define->typearray[]={nums};,char
reduce:38
define->typearray[]={nums};,double
reduce:38
define->typearray[]={nums};,int
reduce:38
define->typearray[]={nums};,}
reduce:38
define->typearray[]={nums};,{
reduce:38
define->typearray[]={nums};,(
reduce:38
define->typearray[]={nums};,id
reduce:38
项目352:
forsentence->sentence,scanf
reduce:60
forsentence->sentence,printf
reduce:60
forsentence->sentence,if
reduce:60
forsentence->sentence,while
reduce:60
forsentence->sentence,for
reduce:60
forsentence->sentence,return
reduce:60
forsentence->sentence,array
reduce:60
forsentence->sentence,num
reduce:60
forsentence->sentence,/
reduce:60
forsentence->sentence,*
reduce:60
forsentence->sentence,-
reduce:60
forsentence->sentence,+
reduce:60
forsentence->sentence,char
reduce:60
forsentence->sentence,double
reduce:60
forsentence->sentence,int
reduce:60
forsentence->sentence,}
reduce:60
forsentence->sentence,{
reduce:60
forsentence->sentence,(
reduce:60
forsentence->sentence,id
reduce:60
项目353:
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,scanf
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,printf
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,if
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,while
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,for
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,return
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,array
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,num
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,/
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,*
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,-
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,+
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,char
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,double
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,int
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,}
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,{
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,(
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,id
reduce:47
项目354:
define->typearray[num].;,scanf
shift:366
define->typearray[num].;,printf
define->typearray[num].;,else
define->typearray[num].;,if
define->typearray[num].;,while
define->typearray[num].;,for
define->typearray[num].;,return
define->typearray[num].;,array
define->typearray[num].;,num
define->typearray[num].;,/
define->typearray[num].;,*
define->typearray[num].;,-
define->typearray[num].;,+
define->typearray[num].;,char
define->typearray[num].;,double
define->typearray[num].;,int
define->typearray[num].;,}
define->typearray[num].;,{
define->typearray[num].;,(
define->typearray[num].;,id
define->typearray[num].={nums};,scanf
shift:367
define->typearray[num].={nums};,printf
define->typearray[num].={nums};,else
define->typearray[num].={nums};,if
define->typearray[num].={nums};,while
define->typearray[num].={nums};,for
define->typearray[num].={nums};,return
define->typearray[num].={nums};,array
define->typearray[num].={nums};,num
define->typearray[num].={nums};,/
define->typearray[num].={nums};,*
define->typearray[num].={nums};,-
define->typearray[num].={nums};,+
define->typearray[num].={nums};,char
define->typearray[num].={nums};,double
define->typearray[num].={nums};,int
define->typearray[num].={nums};,}
define->typearray[num].={nums};,{
define->typearray[num].={nums};,(
define->typearray[num].={nums};,id
项目355:
define->typearray[]=.{nums};,scanf
shift:368
define->typearray[]=.{nums};,printf
define->typearray[]=.{nums};,else
define->typearray[]=.{nums};,if
define->typearray[]=.{nums};,while
define->typearray[]=.{nums};,for
define->typearray[]=.{nums};,return
define->typearray[]=.{nums};,array
define->typearray[]=.{nums};,num
define->typearray[]=.{nums};,/
define->typearray[]=.{nums};,*
define->typearray[]=.{nums};,-
define->typearray[]=.{nums};,+
define->typearray[]=.{nums};,char
define->typearray[]=.{nums};,double
define->typearray[]=.{nums};,int
define->typearray[]=.{nums};,}
define->typearray[]=.{nums};,{
define->typearray[]=.{nums};,(
define->typearray[]=.{nums};,id
项目356:
define->typeid_name=E;,scanf
reduce:34
define->typeid_name=E;,printf
reduce:34
define->typeid_name=E;,else
reduce:34
define->typeid_name=E;,if
reduce:34
define->typeid_name=E;,while
reduce:34
define->typeid_name=E;,for
reduce:34
define->typeid_name=E;,return
reduce:34
define->typeid_name=E;,array
reduce:34
define->typeid_name=E;,num
reduce:34
define->typeid_name=E;,/
reduce:34
define->typeid_name=E;,*
reduce:34
define->typeid_name=E;,-
reduce:34
define->typeid_name=E;,+
reduce:34
define->typeid_name=E;,char
reduce:34
define->typeid_name=E;,double
reduce:34
define->typeid_name=E;,int
reduce:34
define->typeid_name=E;,}
reduce:34
define->typeid_name=E;,{
reduce:34
define->typeid_name=E;,(
reduce:34
define->typeid_name=E;,id
reduce:34
项目357:
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,scanf
shift:369
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression.;IncorDec)forsentence,id
项目358:
whilesentence->sentence,scanf
reduce:50
whilesentence->sentence,printf
reduce:50
whilesentence->sentence,else
reduce:50
whilesentence->sentence,if
reduce:50
whilesentence->sentence,while
reduce:50
whilesentence->sentence,for
reduce:50
whilesentence->sentence,return
reduce:50
whilesentence->sentence,array
reduce:50
whilesentence->sentence,num
reduce:50
whilesentence->sentence,/
reduce:50
whilesentence->sentence,*
reduce:50
whilesentence->sentence,-
reduce:50
whilesentence->sentence,+
reduce:50
whilesentence->sentence,char
reduce:50
whilesentence->sentence,double
reduce:50
whilesentence->sentence,int
reduce:50
whilesentence->sentence,}
reduce:50
whilesentence->sentence,{
reduce:50
whilesentence->sentence,(
reduce:50
whilesentence->sentence,id
reduce:50
项目359:
while_expression->while1(bool_expression)whilesentence,scanf
reduce:48
while_expression->while1(bool_expression)whilesentence,printf
reduce:48
while_expression->while1(bool_expression)whilesentence,else
reduce:48
while_expression->while1(bool_expression)whilesentence,if
reduce:48
while_expression->while1(bool_expression)whilesentence,while
reduce:48
while_expression->while1(bool_expression)whilesentence,for
reduce:48
while_expression->while1(bool_expression)whilesentence,return
reduce:48
while_expression->while1(bool_expression)whilesentence,array
reduce:48
while_expression->while1(bool_expression)whilesentence,num
reduce:48
while_expression->while1(bool_expression)whilesentence,/
reduce:48
while_expression->while1(bool_expression)whilesentence,*
reduce:48
while_expression->while1(bool_expression)whilesentence,-
reduce:48
while_expression->while1(bool_expression)whilesentence,+
reduce:48
while_expression->while1(bool_expression)whilesentence,char
reduce:48
while_expression->while1(bool_expression)whilesentence,double
reduce:48
while_expression->while1(bool_expression)whilesentence,int
reduce:48
while_expression->while1(bool_expression)whilesentence,}
reduce:48
while_expression->while1(bool_expression)whilesentence,{
reduce:48
while_expression->while1(bool_expression)whilesentence,(
reduce:48
while_expression->while1(bool_expression)whilesentence,id
reduce:48
项目360:
ifsentence->sentence,else
reduce:70
if_expression->if(bool_expression)sentence,scanf
reduce:68
if_expression->if(bool_expression)sentence,printf
reduce:68
if_expression->if(bool_expression)sentence,else
规约-规约冲突！
if_expression->if(bool_expression)sentence,if
reduce:68
if_expression->if(bool_expression)sentence,while
reduce:68
if_expression->if(bool_expression)sentence,for
reduce:68
if_expression->if(bool_expression)sentence,return
reduce:68
if_expression->if(bool_expression)sentence,array
reduce:68
if_expression->if(bool_expression)sentence,num
reduce:68
if_expression->if(bool_expression)sentence,/
reduce:68
if_expression->if(bool_expression)sentence,*
reduce:68
if_expression->if(bool_expression)sentence,-
reduce:68
if_expression->if(bool_expression)sentence,+
reduce:68
if_expression->if(bool_expression)sentence,char
reduce:68
if_expression->if(bool_expression)sentence,double
reduce:68
if_expression->if(bool_expression)sentence,int
reduce:68
if_expression->if(bool_expression)sentence,}
reduce:68
if_expression->if(bool_expression)sentence,{
reduce:68
if_expression->if(bool_expression)sentence,(
reduce:68
if_expression->if(bool_expression)sentence,id
reduce:68
项目361:
if_expression->if(bool_expression)ifsentence.elsesentence,scanf
shift:370
if_expression->if(bool_expression)ifsentence.elsesentence,printf
if_expression->if(bool_expression)ifsentence.elsesentence,else
if_expression->if(bool_expression)ifsentence.elsesentence,if
if_expression->if(bool_expression)ifsentence.elsesentence,while
if_expression->if(bool_expression)ifsentence.elsesentence,for
if_expression->if(bool_expression)ifsentence.elsesentence,return
if_expression->if(bool_expression)ifsentence.elsesentence,array
if_expression->if(bool_expression)ifsentence.elsesentence,num
if_expression->if(bool_expression)ifsentence.elsesentence,/
if_expression->if(bool_expression)ifsentence.elsesentence,*
if_expression->if(bool_expression)ifsentence.elsesentence,-
if_expression->if(bool_expression)ifsentence.elsesentence,+
if_expression->if(bool_expression)ifsentence.elsesentence,char
if_expression->if(bool_expression)ifsentence.elsesentence,double
if_expression->if(bool_expression)ifsentence.elsesentence,int
if_expression->if(bool_expression)ifsentence.elsesentence,}
if_expression->if(bool_expression)ifsentence.elsesentence,{
if_expression->if(bool_expression)ifsentence.elsesentence,(
if_expression->if(bool_expression)ifsentence.elsesentence,id
项目362:
printf_expression->printf(string);,scanf
reduce:74
printf_expression->printf(string);,printf
reduce:74
printf_expression->printf(string);,else
reduce:74
printf_expression->printf(string);,if
reduce:74
printf_expression->printf(string);,while
reduce:74
printf_expression->printf(string);,for
reduce:74
printf_expression->printf(string);,return
reduce:74
printf_expression->printf(string);,array
reduce:74
printf_expression->printf(string);,num
reduce:74
printf_expression->printf(string);,/
reduce:74
printf_expression->printf(string);,*
reduce:74
printf_expression->printf(string);,-
reduce:74
printf_expression->printf(string);,+
reduce:74
printf_expression->printf(string);,char
reduce:74
printf_expression->printf(string);,double
reduce:74
printf_expression->printf(string);,int
reduce:74
printf_expression->printf(string);,}
reduce:74
printf_expression->printf(string);,{
reduce:74
printf_expression->printf(string);,(
reduce:74
printf_expression->printf(string);,id
reduce:74
项目363:
printf_expression->printf(string,expressions.);,scanf
shift:371
printf_expression->printf(string,expressions.);,printf
printf_expression->printf(string,expressions.);,else
printf_expression->printf(string,expressions.);,if
printf_expression->printf(string,expressions.);,while
printf_expression->printf(string,expressions.);,for
printf_expression->printf(string,expressions.);,return
printf_expression->printf(string,expressions.);,array
printf_expression->printf(string,expressions.);,num
printf_expression->printf(string,expressions.);,/
printf_expression->printf(string,expressions.);,*
printf_expression->printf(string,expressions.);,-
printf_expression->printf(string,expressions.);,+
printf_expression->printf(string,expressions.);,char
printf_expression->printf(string,expressions.);,double
printf_expression->printf(string,expressions.);,int
printf_expression->printf(string,expressions.);,}
printf_expression->printf(string,expressions.);,{
printf_expression->printf(string,expressions.);,(
printf_expression->printf(string,expressions.);,id
项目364:
scanf_expression->scanf(string,getaddr.);,scanf
shift:372
scanf_expression->scanf(string,getaddr.);,printf
scanf_expression->scanf(string,getaddr.);,else
scanf_expression->scanf(string,getaddr.);,if
scanf_expression->scanf(string,getaddr.);,while
scanf_expression->scanf(string,getaddr.);,for
scanf_expression->scanf(string,getaddr.);,return
scanf_expression->scanf(string,getaddr.);,array
scanf_expression->scanf(string,getaddr.);,num
scanf_expression->scanf(string,getaddr.);,/
scanf_expression->scanf(string,getaddr.);,*
scanf_expression->scanf(string,getaddr.);,-
scanf_expression->scanf(string,getaddr.);,+
scanf_expression->scanf(string,getaddr.);,char
scanf_expression->scanf(string,getaddr.);,double
scanf_expression->scanf(string,getaddr.);,int
scanf_expression->scanf(string,getaddr.);,}
scanf_expression->scanf(string,getaddr.);,{
scanf_expression->scanf(string,getaddr.);,(
scanf_expression->scanf(string,getaddr.);,id
项目365:
define->typearray[num]={nums};,scanf
reduce:37
define->typearray[num]={nums};,printf
reduce:37
define->typearray[num]={nums};,if
reduce:37
define->typearray[num]={nums};,while
reduce:37
define->typearray[num]={nums};,for
reduce:37
define->typearray[num]={nums};,return
reduce:37
define->typearray[num]={nums};,array
reduce:37
define->typearray[num]={nums};,num
reduce:37
define->typearray[num]={nums};,/
reduce:37
define->typearray[num]={nums};,*
reduce:37
define->typearray[num]={nums};,-
reduce:37
define->typearray[num]={nums};,+
reduce:37
define->typearray[num]={nums};,char
reduce:37
define->typearray[num]={nums};,double
reduce:37
define->typearray[num]={nums};,int
reduce:37
define->typearray[num]={nums};,}
reduce:37
define->typearray[num]={nums};,{
reduce:37
define->typearray[num]={nums};,(
reduce:37
define->typearray[num]={nums};,id
reduce:37
项目366:
define->typearray[num];,scanf
reduce:39
define->typearray[num];,printf
reduce:39
define->typearray[num];,else
reduce:39
define->typearray[num];,if
reduce:39
define->typearray[num];,while
reduce:39
define->typearray[num];,for
reduce:39
define->typearray[num];,return
reduce:39
define->typearray[num];,array
reduce:39
define->typearray[num];,num
reduce:39
define->typearray[num];,/
reduce:39
define->typearray[num];,*
reduce:39
define->typearray[num];,-
reduce:39
define->typearray[num];,+
reduce:39
define->typearray[num];,char
reduce:39
define->typearray[num];,double
reduce:39
define->typearray[num];,int
reduce:39
define->typearray[num];,}
reduce:39
define->typearray[num];,{
reduce:39
define->typearray[num];,(
reduce:39
define->typearray[num];,id
reduce:39
项目367:
define->typearray[num]=.{nums};,scanf
shift:373
define->typearray[num]=.{nums};,printf
define->typearray[num]=.{nums};,else
define->typearray[num]=.{nums};,if
define->typearray[num]=.{nums};,while
define->typearray[num]=.{nums};,for
define->typearray[num]=.{nums};,return
define->typearray[num]=.{nums};,array
define->typearray[num]=.{nums};,num
define->typearray[num]=.{nums};,/
define->typearray[num]=.{nums};,*
define->typearray[num]=.{nums};,-
define->typearray[num]=.{nums};,+
define->typearray[num]=.{nums};,char
define->typearray[num]=.{nums};,double
define->typearray[num]=.{nums};,int
define->typearray[num]=.{nums};,}
define->typearray[num]=.{nums};,{
define->typearray[num]=.{nums};,(
define->typearray[num]=.{nums};,id
项目368:
nums->.num,}
shift:300
nums->.num,nums,}
define->typearray[]={.nums};,scanf
define->typearray[]={.nums};,printf
define->typearray[]={.nums};,else
define->typearray[]={.nums};,if
define->typearray[]={.nums};,while
define->typearray[]={.nums};,for
define->typearray[]={.nums};,return
define->typearray[]={.nums};,array
define->typearray[]={.nums};,num
define->typearray[]={.nums};,/
define->typearray[]={.nums};,*
define->typearray[]={.nums};,-
define->typearray[]={.nums};,+
define->typearray[]={.nums};,char
define->typearray[]={.nums};,double
define->typearray[]={.nums};,int
define->typearray[]={.nums};,}
define->typearray[]={.nums};,{
define->typearray[]={.nums};,(
define->typearray[]={.nums};,id
项目369:
Dec_expression->.id--,)
shift:306
Inc_expression->.id++,)
IncorDec->.Dec_expression,)
IncorDec->.Inc_expression,)
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,scanf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,printf
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,else
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,if
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,while
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,for
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,return
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,array
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,num
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,/
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,*
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,-
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,+
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,char
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,double
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,int
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,}
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,{
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,(
loop_expression->for(for_set_value;bool_expression;.IncorDec)forsentence,id
项目370:
scanf_expression->.scanf(string,getaddr);,scanf
shift:256
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:255
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->if(bool_expression)ifsentenceelse.sentence,scanf
if_expression->if(bool_expression)ifsentenceelse.sentence,printf
if_expression->if(bool_expression)ifsentenceelse.sentence,else
if_expression->if(bool_expression)ifsentenceelse.sentence,if
if_expression->if(bool_expression)ifsentenceelse.sentence,while
if_expression->if(bool_expression)ifsentenceelse.sentence,for
if_expression->if(bool_expression)ifsentenceelse.sentence,return
if_expression->if(bool_expression)ifsentenceelse.sentence,array
if_expression->if(bool_expression)ifsentenceelse.sentence,num
if_expression->if(bool_expression)ifsentenceelse.sentence,/
if_expression->if(bool_expression)ifsentenceelse.sentence,*
if_expression->if(bool_expression)ifsentenceelse.sentence,-
if_expression->if(bool_expression)ifsentenceelse.sentence,+
if_expression->if(bool_expression)ifsentenceelse.sentence,char
if_expression->if(bool_expression)ifsentenceelse.sentence,double
if_expression->if(bool_expression)ifsentenceelse.sentence,int
if_expression->if(bool_expression)ifsentenceelse.sentence,}
if_expression->if(bool_expression)ifsentenceelse.sentence,{
if_expression->if(bool_expression)ifsentenceelse.sentence,(
if_expression->if(bool_expression)ifsentenceelse.sentence,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:250
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:246
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:241
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:237
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目371:
printf_expression->printf(string,expressions).;,scanf
shift:377
printf_expression->printf(string,expressions).;,printf
printf_expression->printf(string,expressions).;,else
printf_expression->printf(string,expressions).;,if
printf_expression->printf(string,expressions).;,while
printf_expression->printf(string,expressions).;,for
printf_expression->printf(string,expressions).;,return
printf_expression->printf(string,expressions).;,array
printf_expression->printf(string,expressions).;,num
printf_expression->printf(string,expressions).;,/
printf_expression->printf(string,expressions).;,*
printf_expression->printf(string,expressions).;,-
printf_expression->printf(string,expressions).;,+
printf_expression->printf(string,expressions).;,char
printf_expression->printf(string,expressions).;,double
printf_expression->printf(string,expressions).;,int
printf_expression->printf(string,expressions).;,}
printf_expression->printf(string,expressions).;,{
printf_expression->printf(string,expressions).;,(
printf_expression->printf(string,expressions).;,id
项目372:
scanf_expression->scanf(string,getaddr).;,scanf
shift:378
scanf_expression->scanf(string,getaddr).;,printf
scanf_expression->scanf(string,getaddr).;,else
scanf_expression->scanf(string,getaddr).;,if
scanf_expression->scanf(string,getaddr).;,while
scanf_expression->scanf(string,getaddr).;,for
scanf_expression->scanf(string,getaddr).;,return
scanf_expression->scanf(string,getaddr).;,array
scanf_expression->scanf(string,getaddr).;,num
scanf_expression->scanf(string,getaddr).;,/
scanf_expression->scanf(string,getaddr).;,*
scanf_expression->scanf(string,getaddr).;,-
scanf_expression->scanf(string,getaddr).;,+
scanf_expression->scanf(string,getaddr).;,char
scanf_expression->scanf(string,getaddr).;,double
scanf_expression->scanf(string,getaddr).;,int
scanf_expression->scanf(string,getaddr).;,}
scanf_expression->scanf(string,getaddr).;,{
scanf_expression->scanf(string,getaddr).;,(
scanf_expression->scanf(string,getaddr).;,id
项目373:
nums->.num,}
shift:300
nums->.num,nums,}
define->typearray[num]={.nums};,scanf
define->typearray[num]={.nums};,printf
define->typearray[num]={.nums};,else
define->typearray[num]={.nums};,if
define->typearray[num]={.nums};,while
define->typearray[num]={.nums};,for
define->typearray[num]={.nums};,return
define->typearray[num]={.nums};,array
define->typearray[num]={.nums};,num
define->typearray[num]={.nums};,/
define->typearray[num]={.nums};,*
define->typearray[num]={.nums};,-
define->typearray[num]={.nums};,+
define->typearray[num]={.nums};,char
define->typearray[num]={.nums};,double
define->typearray[num]={.nums};,int
define->typearray[num]={.nums};,}
define->typearray[num]={.nums};,{
define->typearray[num]={.nums};,(
define->typearray[num]={.nums};,id
项目374:
define->typearray[]={nums.};,scanf
shift:380
define->typearray[]={nums.};,printf
define->typearray[]={nums.};,else
define->typearray[]={nums.};,if
define->typearray[]={nums.};,while
define->typearray[]={nums.};,for
define->typearray[]={nums.};,return
define->typearray[]={nums.};,array
define->typearray[]={nums.};,num
define->typearray[]={nums.};,/
define->typearray[]={nums.};,*
define->typearray[]={nums.};,-
define->typearray[]={nums.};,+
define->typearray[]={nums.};,char
define->typearray[]={nums.};,double
define->typearray[]={nums.};,int
define->typearray[]={nums.};,}
define->typearray[]={nums.};,{
define->typearray[]={nums.};,(
define->typearray[]={nums.};,id
项目375:
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,scanf
shift:381
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec.)forsentence,id
项目376:
if_expression->if(bool_expression)ifsentenceelsesentence,scanf
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,printf
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,else
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,if
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,while
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,for
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,return
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,array
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,num
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,/
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,*
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,-
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,+
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,char
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,double
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,int
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,}
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,{
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,(
reduce:69
if_expression->if(bool_expression)ifsentenceelsesentence,id
reduce:69
项目377:
printf_expression->printf(string,expressions);,scanf
reduce:75
printf_expression->printf(string,expressions);,printf
reduce:75
printf_expression->printf(string,expressions);,else
reduce:75
printf_expression->printf(string,expressions);,if
reduce:75
printf_expression->printf(string,expressions);,while
reduce:75
printf_expression->printf(string,expressions);,for
reduce:75
printf_expression->printf(string,expressions);,return
reduce:75
printf_expression->printf(string,expressions);,array
reduce:75
printf_expression->printf(string,expressions);,num
reduce:75
printf_expression->printf(string,expressions);,/
reduce:75
printf_expression->printf(string,expressions);,*
reduce:75
printf_expression->printf(string,expressions);,-
reduce:75
printf_expression->printf(string,expressions);,+
reduce:75
printf_expression->printf(string,expressions);,char
reduce:75
printf_expression->printf(string,expressions);,double
reduce:75
printf_expression->printf(string,expressions);,int
reduce:75
printf_expression->printf(string,expressions);,}
reduce:75
printf_expression->printf(string,expressions);,{
reduce:75
printf_expression->printf(string,expressions);,(
reduce:75
printf_expression->printf(string,expressions);,id
reduce:75
项目378:
scanf_expression->scanf(string,getaddr);,scanf
reduce:78
scanf_expression->scanf(string,getaddr);,printf
reduce:78
scanf_expression->scanf(string,getaddr);,else
reduce:78
scanf_expression->scanf(string,getaddr);,if
reduce:78
scanf_expression->scanf(string,getaddr);,while
reduce:78
scanf_expression->scanf(string,getaddr);,for
reduce:78
scanf_expression->scanf(string,getaddr);,return
reduce:78
scanf_expression->scanf(string,getaddr);,array
reduce:78
scanf_expression->scanf(string,getaddr);,num
reduce:78
scanf_expression->scanf(string,getaddr);,/
reduce:78
scanf_expression->scanf(string,getaddr);,*
reduce:78
scanf_expression->scanf(string,getaddr);,-
reduce:78
scanf_expression->scanf(string,getaddr);,+
reduce:78
scanf_expression->scanf(string,getaddr);,char
reduce:78
scanf_expression->scanf(string,getaddr);,double
reduce:78
scanf_expression->scanf(string,getaddr);,int
reduce:78
scanf_expression->scanf(string,getaddr);,}
reduce:78
scanf_expression->scanf(string,getaddr);,{
reduce:78
scanf_expression->scanf(string,getaddr);,(
reduce:78
scanf_expression->scanf(string,getaddr);,id
reduce:78
项目379:
define->typearray[num]={nums.};,scanf
shift:382
define->typearray[num]={nums.};,printf
define->typearray[num]={nums.};,else
define->typearray[num]={nums.};,if
define->typearray[num]={nums.};,while
define->typearray[num]={nums.};,for
define->typearray[num]={nums.};,return
define->typearray[num]={nums.};,array
define->typearray[num]={nums.};,num
define->typearray[num]={nums.};,/
define->typearray[num]={nums.};,*
define->typearray[num]={nums.};,-
define->typearray[num]={nums.};,+
define->typearray[num]={nums.};,char
define->typearray[num]={nums.};,double
define->typearray[num]={nums.};,int
define->typearray[num]={nums.};,}
define->typearray[num]={nums.};,{
define->typearray[num]={nums.};,(
define->typearray[num]={nums.};,id
项目380:
define->typearray[]={nums}.;,scanf
shift:383
define->typearray[]={nums}.;,printf
define->typearray[]={nums}.;,else
define->typearray[]={nums}.;,if
define->typearray[]={nums}.;,while
define->typearray[]={nums}.;,for
define->typearray[]={nums}.;,return
define->typearray[]={nums}.;,array
define->typearray[]={nums}.;,num
define->typearray[]={nums}.;,/
define->typearray[]={nums}.;,*
define->typearray[]={nums}.;,-
define->typearray[]={nums}.;,+
define->typearray[]={nums}.;,char
define->typearray[]={nums}.;,double
define->typearray[]={nums}.;,int
define->typearray[]={nums}.;,}
define->typearray[]={nums}.;,{
define->typearray[]={nums}.;,(
define->typearray[]={nums}.;,id
项目381:
scanf_expression->.scanf(string,getaddr);,scanf
shift:256
scanf_expression->.scanf(string,getaddr);,printf
scanf_expression->.scanf(string,getaddr);,else
scanf_expression->.scanf(string,getaddr);,if
scanf_expression->.scanf(string,getaddr);,while
scanf_expression->.scanf(string,getaddr);,for
scanf_expression->.scanf(string,getaddr);,return
scanf_expression->.scanf(string,getaddr);,array
scanf_expression->.scanf(string,getaddr);,num
scanf_expression->.scanf(string,getaddr);,/
scanf_expression->.scanf(string,getaddr);,*
scanf_expression->.scanf(string,getaddr);,-
scanf_expression->.scanf(string,getaddr);,+
scanf_expression->.scanf(string,getaddr);,char
scanf_expression->.scanf(string,getaddr);,double
scanf_expression->.scanf(string,getaddr);,int
scanf_expression->.scanf(string,getaddr);,}
scanf_expression->.scanf(string,getaddr);,{
scanf_expression->.scanf(string,getaddr);,(
scanf_expression->.scanf(string,getaddr);,id
printf_expression->.printf(string,expressions);,scanf
shift:255
printf_expression->.printf(string,expressions);,printf
printf_expression->.printf(string,expressions);,else
printf_expression->.printf(string,expressions);,if
printf_expression->.printf(string,expressions);,while
printf_expression->.printf(string,expressions);,for
printf_expression->.printf(string,expressions);,return
printf_expression->.printf(string,expressions);,array
printf_expression->.printf(string,expressions);,num
printf_expression->.printf(string,expressions);,/
printf_expression->.printf(string,expressions);,*
printf_expression->.printf(string,expressions);,-
printf_expression->.printf(string,expressions);,+
printf_expression->.printf(string,expressions);,char
printf_expression->.printf(string,expressions);,double
printf_expression->.printf(string,expressions);,int
printf_expression->.printf(string,expressions);,}
printf_expression->.printf(string,expressions);,{
printf_expression->.printf(string,expressions);,(
printf_expression->.printf(string,expressions);,id
printf_expression->.printf(string);,scanf
printf_expression->.printf(string);,printf
printf_expression->.printf(string);,else
printf_expression->.printf(string);,if
printf_expression->.printf(string);,while
printf_expression->.printf(string);,for
printf_expression->.printf(string);,return
printf_expression->.printf(string);,array
printf_expression->.printf(string);,num
printf_expression->.printf(string);,/
printf_expression->.printf(string);,*
printf_expression->.printf(string);,-
printf_expression->.printf(string);,+
printf_expression->.printf(string);,char
printf_expression->.printf(string);,double
printf_expression->.printf(string);,int
printf_expression->.printf(string);,}
printf_expression->.printf(string);,{
printf_expression->.printf(string);,(
printf_expression->.printf(string);,id
inout_expression->.scanf_expression,scanf
inout_expression->.scanf_expression,printf
inout_expression->.scanf_expression,else
inout_expression->.scanf_expression,if
inout_expression->.scanf_expression,while
inout_expression->.scanf_expression,for
inout_expression->.scanf_expression,return
inout_expression->.scanf_expression,array
inout_expression->.scanf_expression,num
inout_expression->.scanf_expression,/
inout_expression->.scanf_expression,*
inout_expression->.scanf_expression,-
inout_expression->.scanf_expression,+
inout_expression->.scanf_expression,char
inout_expression->.scanf_expression,double
inout_expression->.scanf_expression,int
inout_expression->.scanf_expression,}
inout_expression->.scanf_expression,{
inout_expression->.scanf_expression,(
inout_expression->.scanf_expression,id
inout_expression->.printf_expression,scanf
inout_expression->.printf_expression,printf
inout_expression->.printf_expression,else
inout_expression->.printf_expression,if
inout_expression->.printf_expression,while
inout_expression->.printf_expression,for
inout_expression->.printf_expression,return
inout_expression->.printf_expression,array
inout_expression->.printf_expression,num
inout_expression->.printf_expression,/
inout_expression->.printf_expression,*
inout_expression->.printf_expression,-
inout_expression->.printf_expression,+
inout_expression->.printf_expression,char
inout_expression->.printf_expression,double
inout_expression->.printf_expression,int
inout_expression->.printf_expression,}
inout_expression->.printf_expression,{
inout_expression->.printf_expression,(
inout_expression->.printf_expression,id
sentence->.inout_expression,scanf
sentence->.inout_expression,printf
sentence->.inout_expression,else
sentence->.inout_expression,if
sentence->.inout_expression,while
sentence->.inout_expression,for
sentence->.inout_expression,return
sentence->.inout_expression,array
sentence->.inout_expression,num
sentence->.inout_expression,/
sentence->.inout_expression,*
sentence->.inout_expression,-
sentence->.inout_expression,+
sentence->.inout_expression,char
sentence->.inout_expression,double
sentence->.inout_expression,int
sentence->.inout_expression,}
sentence->.inout_expression,{
sentence->.inout_expression,(
sentence->.inout_expression,id
if_expression->.if(bool_expression)ifsentenceelsesentence,scanf
shift:250
if_expression->.if(bool_expression)ifsentenceelsesentence,printf
if_expression->.if(bool_expression)ifsentenceelsesentence,else
if_expression->.if(bool_expression)ifsentenceelsesentence,if
if_expression->.if(bool_expression)ifsentenceelsesentence,while
if_expression->.if(bool_expression)ifsentenceelsesentence,for
if_expression->.if(bool_expression)ifsentenceelsesentence,return
if_expression->.if(bool_expression)ifsentenceelsesentence,array
if_expression->.if(bool_expression)ifsentenceelsesentence,num
if_expression->.if(bool_expression)ifsentenceelsesentence,/
if_expression->.if(bool_expression)ifsentenceelsesentence,*
if_expression->.if(bool_expression)ifsentenceelsesentence,-
if_expression->.if(bool_expression)ifsentenceelsesentence,+
if_expression->.if(bool_expression)ifsentenceelsesentence,char
if_expression->.if(bool_expression)ifsentenceelsesentence,double
if_expression->.if(bool_expression)ifsentenceelsesentence,int
if_expression->.if(bool_expression)ifsentenceelsesentence,}
if_expression->.if(bool_expression)ifsentenceelsesentence,{
if_expression->.if(bool_expression)ifsentenceelsesentence,(
if_expression->.if(bool_expression)ifsentenceelsesentence,id
if_expression->.if(bool_expression)sentence,scanf
if_expression->.if(bool_expression)sentence,printf
if_expression->.if(bool_expression)sentence,else
if_expression->.if(bool_expression)sentence,if
if_expression->.if(bool_expression)sentence,while
if_expression->.if(bool_expression)sentence,for
if_expression->.if(bool_expression)sentence,return
if_expression->.if(bool_expression)sentence,array
if_expression->.if(bool_expression)sentence,num
if_expression->.if(bool_expression)sentence,/
if_expression->.if(bool_expression)sentence,*
if_expression->.if(bool_expression)sentence,-
if_expression->.if(bool_expression)sentence,+
if_expression->.if(bool_expression)sentence,char
if_expression->.if(bool_expression)sentence,double
if_expression->.if(bool_expression)sentence,int
if_expression->.if(bool_expression)sentence,}
if_expression->.if(bool_expression)sentence,{
if_expression->.if(bool_expression)sentence,(
if_expression->.if(bool_expression)sentence,id
sentence->.if_expression,scanf
sentence->.if_expression,printf
sentence->.if_expression,else
sentence->.if_expression,if
sentence->.if_expression,while
sentence->.if_expression,for
sentence->.if_expression,return
sentence->.if_expression,array
sentence->.if_expression,num
sentence->.if_expression,/
sentence->.if_expression,*
sentence->.if_expression,-
sentence->.if_expression,+
sentence->.if_expression,char
sentence->.if_expression,double
sentence->.if_expression,int
sentence->.if_expression,}
sentence->.if_expression,{
sentence->.if_expression,(
sentence->.if_expression,id
Dec_expression->.id--,;
shift:20
Inc_expression->.id++,;
IncorDec->.Dec_expression,;
IncorDec->.Inc_expression,;
sentence->.IncorDec;,scanf
sentence->.IncorDec;,printf
sentence->.IncorDec;,else
sentence->.IncorDec;,if
sentence->.IncorDec;,while
sentence->.IncorDec;,for
sentence->.IncorDec;,return
sentence->.IncorDec;,array
sentence->.IncorDec;,num
sentence->.IncorDec;,/
sentence->.IncorDec;,*
sentence->.IncorDec;,-
sentence->.IncorDec;,+
sentence->.IncorDec;,char
sentence->.IncorDec;,double
sentence->.IncorDec;,int
sentence->.IncorDec;,}
sentence->.IncorDec;,{
sentence->.IncorDec;,(
sentence->.IncorDec;,id
forsentence->.sentence,scanf
forsentence->.sentence,printf
forsentence->.sentence,else
forsentence->.sentence,if
forsentence->.sentence,while
forsentence->.sentence,for
forsentence->.sentence,return
forsentence->.sentence,array
forsentence->.sentence,num
forsentence->.sentence,/
forsentence->.sentence,*
forsentence->.sentence,-
forsentence->.sentence,+
forsentence->.sentence,char
forsentence->.sentence,double
forsentence->.sentence,int
forsentence->.sentence,}
forsentence->.sentence,{
forsentence->.sentence,(
forsentence->.sentence,id
while1->.while,(
shift:43
while_expression->.while1(bool_expression)whilesentence,scanf
while_expression->.while1(bool_expression)whilesentence,printf
while_expression->.while1(bool_expression)whilesentence,else
while_expression->.while1(bool_expression)whilesentence,if
while_expression->.while1(bool_expression)whilesentence,while
while_expression->.while1(bool_expression)whilesentence,for
while_expression->.while1(bool_expression)whilesentence,return
while_expression->.while1(bool_expression)whilesentence,array
while_expression->.while1(bool_expression)whilesentence,num
while_expression->.while1(bool_expression)whilesentence,/
while_expression->.while1(bool_expression)whilesentence,*
while_expression->.while1(bool_expression)whilesentence,-
while_expression->.while1(bool_expression)whilesentence,+
while_expression->.while1(bool_expression)whilesentence,char
while_expression->.while1(bool_expression)whilesentence,double
while_expression->.while1(bool_expression)whilesentence,int
while_expression->.while1(bool_expression)whilesentence,}
while_expression->.while1(bool_expression)whilesentence,{
while_expression->.while1(bool_expression)whilesentence,(
while_expression->.while1(bool_expression)whilesentence,id
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,scanf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,printf
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,else
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,if
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,while
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,for
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,return
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,array
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,num
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,/
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,*
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,-
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,+
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,char
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,double
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,int
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,}
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,{
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,(
loop_expression->for(for_set_value;bool_expression;IncorDec).forsentence,id
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,scanf
shift:246
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,printf
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,else
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,if
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,while
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,for
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,return
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,array
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,num
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,/
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,*
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,-
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,+
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,char
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,double
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,int
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,}
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,{
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,(
loop_expression->.for(for_set_value;bool_expression;IncorDec)forsentence,id
sentence->.while_expression,scanf
sentence->.while_expression,printf
sentence->.while_expression,else
sentence->.while_expression,if
sentence->.while_expression,while
sentence->.while_expression,for
sentence->.while_expression,return
sentence->.while_expression,array
sentence->.while_expression,num
sentence->.while_expression,/
sentence->.while_expression,*
sentence->.while_expression,-
sentence->.while_expression,+
sentence->.while_expression,char
sentence->.while_expression,double
sentence->.while_expression,int
sentence->.while_expression,}
sentence->.while_expression,{
sentence->.while_expression,(
sentence->.while_expression,id
sentence->.loop_expression,scanf
sentence->.loop_expression,printf
sentence->.loop_expression,else
sentence->.loop_expression,if
sentence->.loop_expression,while
sentence->.loop_expression,for
sentence->.loop_expression,return
sentence->.loop_expression,array
sentence->.loop_expression,num
sentence->.loop_expression,/
sentence->.loop_expression,*
sentence->.loop_expression,-
sentence->.loop_expression,+
sentence->.loop_expression,char
sentence->.loop_expression,double
sentence->.loop_expression,int
sentence->.loop_expression,}
sentence->.loop_expression,{
sentence->.loop_expression,(
sentence->.loop_expression,id
set_value->.array[E]=E,;
shift:34
set_value->.id=E,;
sentence->.set_value;,scanf
sentence->.set_value;,printf
sentence->.set_value;,else
sentence->.set_value;,if
sentence->.set_value;,while
sentence->.set_value;,for
sentence->.set_value;,return
sentence->.set_value;,array
sentence->.set_value;,num
sentence->.set_value;,/
sentence->.set_value;,*
sentence->.set_value;,-
sentence->.set_value;,+
sentence->.set_value;,char
sentence->.set_value;,double
sentence->.set_value;,int
sentence->.set_value;,}
sentence->.set_value;,{
sentence->.set_value;,(
sentence->.set_value;,id
define->.typearray[num];,scanf
define->.typearray[num];,printf
define->.typearray[num];,else
define->.typearray[num];,if
define->.typearray[num];,while
define->.typearray[num];,for
define->.typearray[num];,return
define->.typearray[num];,array
define->.typearray[num];,num
define->.typearray[num];,/
define->.typearray[num];,*
define->.typearray[num];,-
define->.typearray[num];,+
define->.typearray[num];,char
define->.typearray[num];,double
define->.typearray[num];,int
define->.typearray[num];,}
define->.typearray[num];,{
define->.typearray[num];,(
define->.typearray[num];,id
define->.typearray[]={nums};,scanf
define->.typearray[]={nums};,printf
define->.typearray[]={nums};,else
define->.typearray[]={nums};,if
define->.typearray[]={nums};,while
define->.typearray[]={nums};,for
define->.typearray[]={nums};,return
define->.typearray[]={nums};,array
define->.typearray[]={nums};,num
define->.typearray[]={nums};,/
define->.typearray[]={nums};,*
define->.typearray[]={nums};,-
define->.typearray[]={nums};,+
define->.typearray[]={nums};,char
define->.typearray[]={nums};,double
define->.typearray[]={nums};,int
define->.typearray[]={nums};,}
define->.typearray[]={nums};,{
define->.typearray[]={nums};,(
define->.typearray[]={nums};,id
define->.typearray[num]={nums};,scanf
define->.typearray[num]={nums};,printf
define->.typearray[num]={nums};,else
define->.typearray[num]={nums};,if
define->.typearray[num]={nums};,while
define->.typearray[num]={nums};,for
define->.typearray[num]={nums};,return
define->.typearray[num]={nums};,array
define->.typearray[num]={nums};,num
define->.typearray[num]={nums};,/
define->.typearray[num]={nums};,*
define->.typearray[num]={nums};,-
define->.typearray[num]={nums};,+
define->.typearray[num]={nums};,char
define->.typearray[num]={nums};,double
define->.typearray[num]={nums};,int
define->.typearray[num]={nums};,}
define->.typearray[num]={nums};,{
define->.typearray[num]={nums};,(
define->.typearray[num]={nums};,id
define->.typeid_name;,scanf
define->.typeid_name;,printf
define->.typeid_name;,else
define->.typeid_name;,if
define->.typeid_name;,while
define->.typeid_name;,for
define->.typeid_name;,return
define->.typeid_name;,array
define->.typeid_name;,num
define->.typeid_name;,/
define->.typeid_name;,*
define->.typeid_name;,-
define->.typeid_name;,+
define->.typeid_name;,char
define->.typeid_name;,double
define->.typeid_name;,int
define->.typeid_name;,}
define->.typeid_name;,{
define->.typeid_name;,(
define->.typeid_name;,id
define->.typeid_name=E;,scanf
define->.typeid_name=E;,printf
define->.typeid_name=E;,else
define->.typeid_name=E;,if
define->.typeid_name=E;,while
define->.typeid_name=E;,for
define->.typeid_name=E;,return
define->.typeid_name=E;,array
define->.typeid_name=E;,num
define->.typeid_name=E;,/
define->.typeid_name=E;,*
define->.typeid_name=E;,-
define->.typeid_name=E;,+
define->.typeid_name=E;,char
define->.typeid_name=E;,double
define->.typeid_name=E;,int
define->.typeid_name=E;,}
define->.typeid_name=E;,{
define->.typeid_name=E;,(
define->.typeid_name=E;,id
sentence->.define,scanf
sentence->.define,printf
sentence->.define,else
sentence->.define,if
sentence->.define,while
sentence->.define,for
sentence->.define,return
sentence->.define,array
sentence->.define,num
sentence->.define,/
sentence->.define,*
sentence->.define,-
sentence->.define,+
sentence->.define,char
sentence->.define,double
sentence->.define,int
sentence->.define,}
sentence->.define,{
sentence->.define,(
sentence->.define,id
sentence->.returnE;,scanf
shift:241
sentence->.returnE;,printf
sentence->.returnE;,else
sentence->.returnE;,if
sentence->.returnE;,while
sentence->.returnE;,for
sentence->.returnE;,return
sentence->.returnE;,array
sentence->.returnE;,num
sentence->.returnE;,/
sentence->.returnE;,*
sentence->.returnE;,-
sentence->.returnE;,+
sentence->.returnE;,char
sentence->.returnE;,double
sentence->.returnE;,int
sentence->.returnE;,}
sentence->.returnE;,{
sentence->.returnE;,(
sentence->.returnE;,id
F->.function_call,/
F->.function_call,*
F->.function_call,-
F->.function_call,+
F->.function_call,;
F->.array[E],/
F->.array[E],*
F->.array[E],-
F->.array[E],+
F->.array[E],;
F->.id,/
F->.id,*
F->.id,-
F->.id,+
F->.id,;
F->.num,/
shift:33
F->.num,*
F->.num,-
F->.num,+
F->.num,;
F->.(E),/
shift:21
F->.(E),*
F->.(E),-
F->.(E),+
F->.(E),;
T->.F,/
T->.F,*
T->.F,-
T->.F,+
T->.F,;
T->.T/F,/
T->.T/F,*
T->.T/F,-
T->.T/F,+
T->.T/F,;
T->.T*F,/
T->.T*F,*
T->.T*F,-
T->.T*F,+
T->.T*F,;
E->.T,-
E->.T,+
E->.T,;
E->.E-T,-
E->.E-T,+
E->.E-T,;
E->.E+T,-
E->.E+T,+
E->.E+T,;
sentence->.E;,scanf
sentence->.E;,printf
sentence->.E;,else
sentence->.E;,if
sentence->.E;,while
sentence->.E;,for
sentence->.E;,return
sentence->.E;,array
sentence->.E;,num
sentence->.E;,/
sentence->.E;,*
sentence->.E;,-
sentence->.E;,+
sentence->.E;,char
sentence->.E;,double
sentence->.E;,int
sentence->.E;,}
sentence->.E;,{
sentence->.E;,(
sentence->.E;,id
sentence->.{},scanf
shift:237
sentence->.{},printf
sentence->.{},else
sentence->.{},if
sentence->.{},while
sentence->.{},for
sentence->.{},return
sentence->.{},array
sentence->.{},num
sentence->.{},/
sentence->.{},*
sentence->.{},-
sentence->.{},+
sentence->.{},char
sentence->.{},double
sentence->.{},int
sentence->.{},}
sentence->.{},{
sentence->.{},(
sentence->.{},id
sentence->.{block},scanf
sentence->.{block},printf
sentence->.{block},else
sentence->.{block},if
sentence->.{block},while
sentence->.{block},for
sentence->.{block},return
sentence->.{block},array
sentence->.{block},num
sentence->.{block},/
sentence->.{block},*
sentence->.{block},-
sentence->.{block},+
sentence->.{block},char
sentence->.{block},double
sentence->.{block},int
sentence->.{block},}
sentence->.{block},{
sentence->.{block},(
sentence->.{block},id
type->.char,array
shift:29
type->.char,id
type->.double,array
shift:28
type->.double,id
type->.int,array
shift:27
type->.int,id
function_call->.id(function_call_list),/
function_call->.id(function_call_list),*
function_call->.id(function_call_list),-
function_call->.id(function_call_list),+
function_call->.id(function_call_list),;
function_call->.id(),/
function_call->.id(),*
function_call->.id(),-
function_call->.id(),+
function_call->.id(),;
项目382:
define->typearray[num]={nums}.;,scanf
shift:386
define->typearray[num]={nums}.;,printf
define->typearray[num]={nums}.;,else
define->typearray[num]={nums}.;,if
define->typearray[num]={nums}.;,while
define->typearray[num]={nums}.;,for
define->typearray[num]={nums}.;,return
define->typearray[num]={nums}.;,array
define->typearray[num]={nums}.;,num
define->typearray[num]={nums}.;,/
define->typearray[num]={nums}.;,*
define->typearray[num]={nums}.;,-
define->typearray[num]={nums}.;,+
define->typearray[num]={nums}.;,char
define->typearray[num]={nums}.;,double
define->typearray[num]={nums}.;,int
define->typearray[num]={nums}.;,}
define->typearray[num]={nums}.;,{
define->typearray[num]={nums}.;,(
define->typearray[num]={nums}.;,id
项目383:
define->typearray[]={nums};,scanf
reduce:38
define->typearray[]={nums};,printf
reduce:38
define->typearray[]={nums};,else
reduce:38
define->typearray[]={nums};,if
reduce:38
define->typearray[]={nums};,while
reduce:38
define->typearray[]={nums};,for
reduce:38
define->typearray[]={nums};,return
reduce:38
define->typearray[]={nums};,array
reduce:38
define->typearray[]={nums};,num
reduce:38
define->typearray[]={nums};,/
reduce:38
define->typearray[]={nums};,*
reduce:38
define->typearray[]={nums};,-
reduce:38
define->typearray[]={nums};,+
reduce:38
define->typearray[]={nums};,char
reduce:38
define->typearray[]={nums};,double
reduce:38
define->typearray[]={nums};,int
reduce:38
define->typearray[]={nums};,}
reduce:38
define->typearray[]={nums};,{
reduce:38
define->typearray[]={nums};,(
reduce:38
define->typearray[]={nums};,id
reduce:38
项目384:
forsentence->sentence,scanf
reduce:60
forsentence->sentence,printf
reduce:60
forsentence->sentence,else
reduce:60
forsentence->sentence,if
reduce:60
forsentence->sentence,while
reduce:60
forsentence->sentence,for
reduce:60
forsentence->sentence,return
reduce:60
forsentence->sentence,array
reduce:60
forsentence->sentence,num
reduce:60
forsentence->sentence,/
reduce:60
forsentence->sentence,*
reduce:60
forsentence->sentence,-
reduce:60
forsentence->sentence,+
reduce:60
forsentence->sentence,char
reduce:60
forsentence->sentence,double
reduce:60
forsentence->sentence,int
reduce:60
forsentence->sentence,}
reduce:60
forsentence->sentence,{
reduce:60
forsentence->sentence,(
reduce:60
forsentence->sentence,id
reduce:60
项目385:
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,scanf
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,printf
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,else
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,if
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,while
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,for
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,return
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,array
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,num
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,/
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,*
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,-
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,+
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,char
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,double
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,int
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,}
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,{
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,(
reduce:47
loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence,id
reduce:47
项目386:
define->typearray[num]={nums};,scanf
reduce:37
define->typearray[num]={nums};,printf
reduce:37
define->typearray[num]={nums};,else
reduce:37
define->typearray[num]={nums};,if
reduce:37
define->typearray[num]={nums};,while
reduce:37
define->typearray[num]={nums};,for
reduce:37
define->typearray[num]={nums};,return
reduce:37
define->typearray[num]={nums};,array
reduce:37
define->typearray[num]={nums};,num
reduce:37
define->typearray[num]={nums};,/
reduce:37
define->typearray[num]={nums};,*
reduce:37
define->typearray[num]={nums};,-
reduce:37
define->typearray[num]={nums};,+
reduce:37
define->typearray[num]={nums};,char
reduce:37
define->typearray[num]={nums};,double
reduce:37
define->typearray[num]={nums};,int
reduce:37
define->typearray[num]={nums};,}
reduce:37
define->typearray[num]={nums};,{
reduce:37
define->typearray[num]={nums};,(
reduce:37
define->typearray[num]={nums};,id
reduce:37
Action Table:
        #      id       (       )       {       }    void       ,     int  double    char       ;       +       -       *       /     num   array       [       ]  return       =     for   while      >=      <=       <       >      ==      ++      --      if    else  printf  string   scanf       &
 0    error   error   error   error   error   errorS      5   errorS      7S      8S      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 1 r     12   error   error   error   error   errorS      5   errorS      7S      8S      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 2 r      0   error   error   error   error   errorr      0   errorr      0r      0r      0   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 3    errorS     11   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 4    errorr      4   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 5    errorr      5   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 6      acc   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 7    errorr     13   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 8    errorr     14   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
 9    errorr     15   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
10 r      1   error   error   error   error   errorr      1   errorr      1r      1r      1   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
11    error   errorS     12   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
12    error   error   errorS     13   error   error   error   errorS      7S      8S      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
13    error   error   error   errorS     16   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
14    error   error   errorS     17   error   error   errorS     18   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
15    errorS     19   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
16    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS     35   errorS     40S     43   error   error   error   error   error   error   errorS     47   errorS     51   errorS     52   error
17    error   error   error   errorS     53   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
18    error   error   error   error   error   error   error   errorS      7S      8S      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
19    error   error   errorr      6   error   error   errorr      6   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
20    error   errorS     55   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   errorS     56   error   error   error   error   error   error   errorS     57S     58   error   error   error   error   error   error
21    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
22    errorS     20S     21   errorS     22S     68   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS     35   errorS     40S     43   error   error   error   error   error   error   errorS     47   errorS     51   errorS     52   error
23    error   error   error   error   errorS     69   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
24    errorS     70   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     71   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
25    error   error   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
26    error   error   error   error   error   error   error   error   error   error   errorr     26r     26r     26r     26r     26   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
27    errorr     13   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorr     13   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
28    errorr     14   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorr     14   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
29    errorr     15   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorr     15   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
30    errorS     20S     21   errorS     22r     16   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS     35   errorS     40S     43   error   error   error   error   error   error   errorS     47   errorS     51   errorS     52   error
31    error   error   error   error   error   error   error   error   error   error   errorS     74S     75S     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
32    error   error   error   error   error   error   error   error   error   error   errorr     23r     23r     23S     77S     78   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
33    error   error   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
34    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     79   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
35    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
36    errorr     33r     33   errorr     33r     33   error   errorr     33r     33r     33   errorr     33r     33r     33r     33r     33r     33   error   errorr     33   errorr     33r     33   error   error   error   error   error   error   errorr     33   errorr     33   errorr     33   error
37    error   error   error   error   error   error   error   error   error   error   errorS     83   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
38    errorr     45r     45   errorr     45r     45   error   errorr     45r     45r     45   errorr     45r     45r     45r     45r     45r     45   error   errorr     45   errorr     45r     45   error   error   error   error   error   error   errorr     45   errorr     45   errorr     45   error
39    errorr     46r     46   errorr     46r     46   error   errorr     46r     46r     46   errorr     46r     46r     46r     46r     46r     46   error   errorr     46   errorr     46r     46   error   error   error   error   error   error   errorr     46   errorr     46   errorr     46   error
40    error   errorS     84   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
41    error   error   error   error   error   error   error   error   error   error   errorS     85   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
42    error   errorS     86   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
43    error   errorr     49   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
44    error   error   error   error   error   error   error   error   error   error   errorr     63   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
45    error   error   error   error   error   error   error   error   error   error   errorr     64   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
46    errorr     67r     67   errorr     67r     67   error   errorr     67r     67r     67   errorr     67r     67r     67r     67r     67r     67   error   errorr     67   errorr     67r     67   error   error   error   error   error   error   errorr     67   errorr     67   errorr     67   error
47    error   errorS     87   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
48    errorr     71r     71   errorr     71r     71   error   errorr     71r     71r     71   errorr     71r     71r     71r     71r     71r     71   error   errorr     71   errorr     71r     71   error   error   error   error   error   error   errorr     71   errorr     71   errorr     71   error
49    errorr     72r     72   errorr     72r     72   error   errorr     72r     72r     72   errorr     72r     72r     72r     72r     72r     72   error   errorr     72   errorr     72r     72   error   error   error   error   error   error   errorr     72   errorr     72   errorr     72   error
50    errorr     73r     73   errorr     73r     73   error   errorr     73r     73r     73   errorr     73r     73r     73r     73r     73r     73   error   errorr     73   errorr     73r     73   error   error   error   error   error   error   errorr     73   errorr     73   errorr     73   error
51    error   errorS     88   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
52    error   errorS     89   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
53    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS     35   errorS     40S     43   error   error   error   error   error   error   errorS     47   errorS     51   errorS     52   error
54    errorS     91   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
55    errorS     92S     93S     94   error   error   error   error   error   error   error   error   error   error   error   errorS     98S     99   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
56    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
57    error   error   error   error   error   error   error   error   error   error   errorr     65   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
58    error   error   error   error   error   error   error   error   error   error   errorr     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
59    error   errorS    101r     29   error   error   error   error   error   error   error   errorr     29r     29r     29r     29   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
60    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
61    error   error   errorr     31   error   error   error   error   error   error   error   errorr     31r     31r     31r     31   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
62    error   error   errorr     26   error   error   error   error   error   error   error   errorr     26r     26r     26r     26   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
63    error   error   errorS    103   error   error   error   error   error   error   error   errorS    104S    105   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
64    error   error   errorr     23   error   error   error   error   error   error   error   errorr     23r     23S    106S    107   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
65    error   error   errorr     28   error   error   error   error   error   error   error   errorr     28r     28r     28r     28   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
66    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    108   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
67    error   error   error   error   errorS    109   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
68    errorr     19r     19   errorr     19r     19   error   errorr     19r     19r     19   errorr     19r     19r     19r     19r     19r     19   error   errorr     19   errorr     19r     19   error   error   error   error   error   error   errorr     19   errorr     19   errorr     19   error
69 r      2   error   error   error   error   errorr      2   errorr      2r      2r      2   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
70    error   error   error   error   error   error   error   error   error   error   errorr     36   error   error   error   error   error   error   error   error   errorr     36   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
71    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    110   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
72    error   error   error   error   error   error   error   error   error   error   errorS    111   error   error   error   error   error   error   error   error   errorS    112   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
73    error   error   error   error   errorr     17   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
74    errorr     20r     20   errorr     20r     20   error   errorr     20r     20r     20   errorr     20r     20r     20r     20r     20r     20   error   errorr     20   errorr     20r     20   error   error   error   error   error   error   errorr     20   errorr     20   errorr     20   error
75    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
76    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
77    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
78    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
79    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
80    error   errorS     55   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
81    error   error   error   error   error   error   error   error   error   error   errorS    125S     75S     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
82    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    126   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
83    errorr     42r     42   errorr     42r     42   error   errorr     42r     42r     42   errorr     42r     42r     42r     42r     42r     42   error   errorr     42   errorr     42r     42   error   error   error   error   error   error   errorr     42   errorr     42   errorr     42   error
84    errorS    127   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    128   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
85    errorr     62r     62   errorr     62r     62   error   errorr     62r     62r     62   errorr     62r     62r     62r     62r     62r     62   error   errorr     62   errorr     62r     62   error   error   error   error   error   error   errorr     62   errorr     62   errorr     62   error
86    errorS    131S    132   error   error   error   error   error   error   error   error   error   error   error   error   errorS    137S    138   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
87    errorS    131S    132   error   error   error   error   error   error   error   error   error   error   error   error   errorS    137S    138   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
88    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    142   error   error
89    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    143   error   error
90    error   error   error   error   errorS    144   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
91    error   error   errorr      7   error   error   errorr      7   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
92    error   errorS    145r     29   error   error   errorr     29   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
93    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
94    error   error   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
95    error   error   errorr     31   error   error   errorr     31   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
96    error   error   errorS    147   error   error   errorS    148   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
97    error   error   errorr     10   error   error   errorr     10   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
98    error   error   errorr     28   error   error   errorr     28   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
99    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    149   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
100    error   error   error   error   error   error   error   error   error   error   errorr     43S     75S     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
101    errorS     92S     93S    150   error   error   error   error   error   error   error   error   error   error   error   errorS     98S     99   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
102    error   error   errorS    152   error   error   error   error   error   error   error   errorS    104S    105   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
103    error   error   error   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
104    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
105    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
106    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
107    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
108    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
109    errorr     18r     18   errorr     18r     18   error   errorr     18r     18r     18   errorr     18r     18r     18r     18r     18r     18   error   errorr     18   errorr     18r     18   error   error   error   error   error   error   errorr     18   errorr     18   errorr     18   error
110    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    158   error   errorS    159   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
111    errorr     35r     35   errorr     35r     35   error   errorr     35r     35r     35   errorr     35r     35r     35r     35r     35r     35   error   errorr     35   errorr     35r     35   error   error   error   error   error   error   errorr     35   errorr     35   errorr     35   error
112    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
113    error   error   error   error   error   error   error   error   error   error   errorr     21r     21r     21S     77S     78   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
114    error   error   error   error   error   error   error   error   error   error   errorr     22r     22r     22S     77S     78   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
115    error   error   error   error   error   error   error   error   error   error   errorr     24r     24r     24r     24r     24   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
116    error   error   error   error   error   error   error   error   error   error   errorr     25r     25r     25r     25r     25   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
117    error   errorS    161   error   error   error   error   error   error   error   error   errorr     29r     29r     29r     29   error   error   errorr     29   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
118    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
119    error   error   error   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31   error   error   errorr     31   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
120    error   error   error   error   error   error   error   error   error   error   error   errorr     26r     26r     26r     26   error   error   errorr     26   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
121    error   error   error   error   error   error   error   error   error   error   error   errorS    163S    164   error   error   error   error   errorS    165   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
122    error   error   error   error   error   error   error   error   error   error   error   errorr     23r     23S    166S    167   error   error   errorr     23   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
123    error   error   error   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28   error   error   errorr     28   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
124    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    168   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
125    errorr     32r     32   errorr     32r     32   error   errorr     32r     32r     32   errorr     32r     32r     32r     32r     32r     32   error   errorr     32   errorr     32r     32   error   error   error   error   error   error   errorr     32   errorr     32   errorr     32   error
126    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
127    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS     56   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
128    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    170   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
129    error   error   error   error   error   error   error   error   error   error   errorr     61   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
130    error   error   error   error   error   error   error   error   error   error   errorS    171   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
131    error   errorS    172r     29   error   error   error   error   error   error   error   errorr     29r     29r     29r     29   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error
132    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
133    error   error   errorr     31   error   error   error   error   error   error   error   errorr     31r     31r     31r     31   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error
134    error   error   errorr     52   error   error   error   error   error   error   error   errorr     26r     26r     26r     26   error   error   error   error   error   error   error   errorr     26r     26r     26r     26r     26   error   error   error   error   error   error   error   error
135    error   error   error   error   error   error   error   error   error   error   error   errorS    174S    175   error   error   error   error   error   error   error   error   error   errorr     59r     59r     59r     59r     59   error   error   error   error   error   error   error   error
136    error   error   error   error   error   error   error   error   error   error   error   errorr     23r     23S    176S    177   error   error   error   error   error   error   error   errorr     23r     23r     23r     23r     23   error   error   error   error   error   error   error   error
137    error   error   errorr     28   error   error   error   error   error   error   error   errorr     28r     28r     28r     28   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error
138    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    178   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
139    error   error   errorS    179   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
140    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    181S    182S    183S    184S    185   error   error   error   error   error   error   error   error
141    error   error   errorS    186   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
142    error   error   errorS    187   error   error   errorS    188   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
143    error   error   error   error   error   error   errorS    189   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
144 r      3   error   error   error   error   errorr      3   errorr      3r      3r      3   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
145    errorS     92S     93S    190   error   error   error   error   error   error   error   error   error   error   error   errorS     98S     99   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
146    error   error   errorS    192   error   error   error   error   error   error   error   errorS    104S    105   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
147    error   error   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
148    errorS     92S     93   error   error   error   error   error   error   error   error   error   error   error   error   errorS     98S     99   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
149    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
150    error   error   errorr      8   error   error   error   error   error   error   error   errorr      8r      8r      8r      8   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
151    error   error   errorS    195   error   error   errorS    148   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
152    error   error   errorr     27   error   error   error   error   error   error   error   errorr     27r     27r     27r     27   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
153    error   error   errorr     21   error   error   error   error   error   error   error   errorr     21r     21S    106S    107   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
154    error   error   errorr     22   error   error   error   error   error   error   error   errorr     22r     22S    106S    107   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
155    error   error   errorr     24   error   error   error   error   error   error   error   errorr     24r     24r     24r     24   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
156    error   error   errorr     25   error   error   error   error   error   error   error   errorr     25r     25r     25r     25   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
157    error   error   error   error   error   error   error   error   error   error   error   errorS    163S    164   error   error   error   error   errorS    196   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
158    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    197   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
159    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    198   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
160    error   error   error   error   error   error   error   error   error   error   errorS    199S     75S     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
161    errorS     92S     93S    200   error   error   error   error   error   error   error   error   error   error   error   errorS     98S     99   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
162    error   error   errorS    202   error   error   error   error   error   error   error   errorS    104S    105   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
163    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
164    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
165    error   error   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   errorS    205   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
166    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
167    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
168    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
169    error   error   error   error   error   error   error   error   error   error   error   errorS    163S    164   error   error   error   error   errorS    209   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
170    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
171    errorS    211S    212   error   error   error   error   error   error   error   error   error   error   error   error   errorS    215S    216   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
172    errorS     92S     93S    219   error   error   error   error   error   error   error   error   error   error   error   errorS     98S     99   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
173    error   error   errorS    221   error   error   error   error   error   error   error   errorS    104S    105   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
174    errorS    222S    223   error   error   error   error   error   error   error   error   error   error   error   error   errorS    227S    228   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
175    errorS    222S    223   error   error   error   error   error   error   error   error   error   error   error   error   errorS    227S    228   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
176    errorS    222S    223   error   error   error   error   error   error   error   error   error   error   error   error   errorS    227S    228   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
177    errorS    222S    223   error   error   error   error   error   error   error   error   error   error   error   error   errorS    227S    228   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
178    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
179    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS     35   errorS     40S     43   error   error   error   error   error   error   errorS     47   errorS     51   errorS     52   error
180    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
181    errorr     53r     53   error   error   error   error   error   error   error   error   errorr     53r     53r     53r     53r     53r     53   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
182    errorr     54r     54   error   error   error   error   error   error   error   error   errorr     54r     54r     54r     54r     54r     54   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
183    errorr     55r     55   error   error   error   error   error   error   error   error   errorr     55r     55r     55r     55r     55r     55   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
184    errorr     56r     56   error   error   error   error   error   error   error   error   errorr     56r     56r     56r     56r     56r     56   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
185    errorr     57r     57   error   error   error   error   error   error   error   error   errorr     57r     57r     57r     57r     57r     57   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
186    errorS     20S     21   errorS    237   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS    241   errorS    246S     43   error   error   error   error   error   error   errorS    250   errorS    255   errorS    256   error
187    error   error   error   error   error   error   error   error   error   error   errorS    257   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
188    errorS    258   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
189    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    261
190    error   error   errorr      8   error   error   errorr      8   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
191    error   error   errorS    262   error   error   errorS    148   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
192    error   error   errorr     27   error   error   errorr     27   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
193    error   error   errorr     11   error   error   errorr     11   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
194    error   error   error   error   error   error   error   error   error   error   error   errorS    163S    164   error   error   error   error   errorS    263   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
195    error   error   errorr      9   error   error   error   error   error   error   error   errorr      9r      9r      9r      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
196    error   error   errorr     30   error   error   error   error   error   error   error   errorr     30r     30r     30r     30   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
197    error   error   error   error   error   error   error   error   error   error   errorS    264   error   error   error   error   error   error   error   error   errorS    265   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
198    error   error   error   errorS    266   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
199    errorr     34r     34   errorr     34r     34   error   errorr     34r     34r     34   errorr     34r     34r     34r     34r     34r     34   error   errorr     34   errorr     34r     34   error   error   error   error   error   error   errorr     34   errorr     34   errorr     34   error
200    error   error   error   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8   error   error   errorr      8   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
201    error   error   errorS    267   error   error   errorS    148   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
202    error   error   error   error   error   error   error   error   error   error   error   errorr     27r     27r     27r     27   error   error   errorr     27   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
203    error   error   error   error   error   error   error   error   error   error   error   errorr     21r     21S    166S    167   error   error   errorr     21   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
204    error   error   error   error   error   error   error   error   error   error   error   errorr     22r     22S    166S    167   error   error   errorr     22   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
205    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
206    error   error   error   error   error   error   error   error   error   error   error   errorr     24r     24r     24r     24   error   error   errorr     24   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
207    error   error   error   error   error   error   error   error   error   error   error   errorr     25r     25r     25r     25   error   error   errorr     25   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
208    error   error   error   error   error   error   error   error   error   error   error   errorS    163S    164   error   error   error   error   errorS    269   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
209    error   error   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
210    error   error   error   error   error   error   error   error   error   error   error   errorS    163S    164   error   error   error   error   errorS    270   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
211    error   errorS    271   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error
212    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
213    error   error   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error
214    error   error   error   error   error   error   error   error   error   error   errorr     52r     26r     26r     26r     26   error   error   error   error   error   error   error   errorr     26r     26r     26r     26r     26   error   error   error   error   error   error   error   error
215    error   error   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error
216    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    273   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
217    error   error   error   error   error   error   error   error   error   error   errorS    274   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
218    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    181S    182S    183S    184S    185   error   error   error   error   error   error   error   error
219    error   error   errorr      8   error   error   error   error   error   error   error   errorr      8r      8r      8r      8   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error
220    error   error   errorS    276   error   error   errorS    148   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
221    error   error   errorr     27   error   error   error   error   error   error   error   errorr     27r     27r     27r     27   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27   error   error   error   error   error   error   error   error
222    error   errorS    277   error   error   error   error   error   error   error   error   errorr     29r     29r     29r     29   error   error   error   error   error   error   error   errorr     29r     29r     29r     29r     29   error   error   error   error   error   error   error   error
223    errorS     59S     60   error   error   error   error   error   error   error   error   error   error   error   error   errorS     65S     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
224    error   error   error   error   error   error   error   error   error   error   error   errorr     31r     31r     31r     31   error   error   error   error   error   error   error   errorr     31r     31r     31r     31r     31   error   error   error   error   error   error   error   error
225    error   error   error   error   error   error   error   error   error   error   error   errorr     26r     26r     26r     26   error   error   error   error   error   error   error   errorr     26r     26r     26r     26r     26   error   error   error   error   error   error   error   error
226    error   error   error   error   error   error   error   error   error   error   error   errorr     21r     21S    176S    177   error   error   error   error   error   error   error   errorr     21r     21r     21r     21r     21   error   error   error   error   error   error   error   error
227    error   error   error   error   error   error   error   error   error   error   error   errorr     28r     28r     28r     28   error   error   error   error   error   error   error   errorr     28r     28r     28r     28r     28   error   error   error   error   error   error   error   error
228    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    279   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
229    error   error   error   error   error   error   error   error   error   error   error   errorr     22r     22S    176S    177   error   error   error   error   error   error   error   errorr     22r     22r     22r     22r     22   error   error   error   error   error   error   error   error
230    error   error   error   error   error   error   error   error   error   error   error   errorr     24r     24r     24r     24   error   error   error   error   error   error   error   errorr     24r     24r     24r     24r     24   error   error   error   error   error   error   error   error
231    error   error   error   error   error   error   error   error   error   error   error   errorr     25r     25r     25r     25   error   error   error   error   error   error   error   errorr     25r     25r     25r     25r     25   error   error   error   error   error   error   error   error
232    error   error   error   error   error   error   error   error   error   error   error   errorS    163S    164   error   error   error   error   errorS    280   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
233    errorr     50r     50   errorr     50r     50   error   errorr     50r     50r     50   errorr     50r     50r     50r     50r     50r     50   error   errorr     50   errorr     50r     50   error   error   error   error   error   error   errorr     50   errorr     50   errorr     50   error
234    errorr     48r     48   errorr     48r     48   error   errorr     48r     48r     48   errorr     48r     48r     48r     48r     48r     48   error   errorr     48   errorr     48r     48   error   error   error   error   error   error   errorr     48   errorr     48   errorr     48   error
235    error   error   errorr     58   error   error   error   error   error   error   error   errorS    104S    105   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
236    error   error   errorr     51   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
237    errorS     20S     21   errorS     22S    282   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS     35   errorS     40S     43   error   error   error   error   error   error   errorS     47   errorS     51   errorS     52   error
238    errorS     70   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    283   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
239    errorr     68r     68   errorr     68r     68   error   errorr     68r     68r     68   errorr     68r     68r     68r     68r     68r     68   error   errorr     68   errorr     68r     68   error   error   error   error   error   error   errorr     68r     70r     68   errorr     68   error
240    error   error   error   error   error   error   error   error   error   error   errorS    285S     75S     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
241    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
242    errorr     33r     33   errorr     33r     33   error   errorr     33r     33r     33   errorr     33r     33r     33r     33r     33r     33   error   errorr     33   errorr     33r     33   error   error   error   error   error   error   errorr     33r     33r     33   errorr     33   error
243    error   error   error   error   error   error   error   error   error   error   errorS    287   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
244    errorr     45r     45   errorr     45r     45   error   errorr     45r     45r     45   errorr     45r     45r     45r     45r     45r     45   error   errorr     45   errorr     45r     45   error   error   error   error   error   error   errorr     45r     45r     45   errorr     45   error
245    errorr     46r     46   errorr     46r     46   error   errorr     46r     46r     46   errorr     46r     46r     46r     46r     46r     46   error   errorr     46   errorr     46r     46   error   error   error   error   error   error   errorr     46r     46r     46   errorr     46   error
246    error   errorS    288   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
247    error   error   error   error   error   error   error   error   error   error   errorS    289   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
248    error   errorS    290   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
249    errorr     67r     67   errorr     67r     67   error   errorr     67r     67r     67   errorr     67r     67r     67r     67r     67r     67   error   errorr     67   errorr     67r     67   error   error   error   error   error   error   errorr     67r     67r     67   errorr     67   error
250    error   errorS    291   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
251    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    292   error   error   error   error
252    errorr     71r     71   errorr     71r     71   error   errorr     71r     71r     71   errorr     71r     71r     71r     71r     71r     71   error   errorr     71   errorr     71r     71   error   error   error   error   error   error   errorr     71r     71r     71   errorr     71   error
253    errorr     72r     72   errorr     72r     72   error   errorr     72r     72r     72   errorr     72r     72r     72r     72r     72r     72   error   errorr     72   errorr     72r     72   error   error   error   error   error   error   errorr     72r     72r     72   errorr     72   error
254    errorr     73r     73   errorr     73r     73   error   errorr     73r     73r     73   errorr     73r     73r     73r     73r     73r     73   error   errorr     73   errorr     73r     73   error   error   error   error   error   error   errorr     73r     73r     73   errorr     73   error
255    error   errorS    293   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
256    error   errorS    294   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
257    errorr     74r     74   errorr     74r     74   error   errorr     74r     74r     74   errorr     74r     74r     74r     74r     74r     74   error   errorr     74   errorr     74r     74   error   error   error   error   error   error   errorr     74   errorr     74   errorr     74   error
258    error   error   errorr     77   error   error   errorS    295   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
259    error   error   errorS    296   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
260    error   error   errorS    297   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
261    errorS    298   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
262    error   error   errorr      9   error   error   errorr      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
263    error   error   errorr     30   error   error   errorr     30   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
264    errorr     39r     39   errorr     39r     39   error   errorr     39r     39r     39   errorr     39r     39r     39r     39r     39r     39   error   errorr     39   errorr     39r     39   error   error   error   error   error   error   errorr     39   errorr     39   errorr     39   error
265    error   error   error   errorS    299   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
266    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    300   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
267    error   error   error   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9   error   error   errorr      9   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
268    error   error   error   error   error   error   error   error   error   error   errorr     44S     75S     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
269    error   error   error   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30   error   error   errorr     30   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
270    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    205   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
271    errorS     92S     93S    302   error   error   error   error   error   error   error   error   error   error   error   errorS     98S     99   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
272    error   error   errorS    304   error   error   error   error   error   error   error   errorS    104S    105   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
273    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
274    errorS    306   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
275    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
276    error   error   errorr      9   error   error   error   error   error   error   error   errorr      9r      9r      9r      9   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error
277    errorS     92S     93S    312   error   error   error   error   error   error   error   error   error   error   error   errorS     98S     99   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
278    error   error   errorS    314   error   error   error   error   error   error   error   errorS    104S    105   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
279    errorS    117S    118   error   error   error   error   error   error   error   error   error   error   error   error   errorS    123S    124   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
280    error   error   errorr     30   error   error   error   error   error   error   error   errorr     30r     30r     30r     30   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error
281    error   error   error   error   errorS    316   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
282    errorr     19r     19   errorr     19r     19   error   errorr     19r     19r     19   errorr     19r     19r     19r     19r     19r     19   error   errorr     19   errorr     19r     19   error   error   error   error   error   error   errorr     19r     19r     19   errorr     19   error
283    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    317   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
284    error   error   error   error   error   error   error   error   error   error   errorS    318   error   error   error   error   error   error   error   error   errorS    319   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
285    errorr     20r     20   errorr     20r     20   error   errorr     20r     20r     20   errorr     20r     20r     20r     20r     20r     20   error   errorr     20   errorr     20r     20   error   error   error   error   error   error   errorr     20r     20r     20   errorr     20   error
286    error   error   error   error   error   error   error   error   error   error   errorS    320S     75S     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
287    errorr     42r     42   errorr     42r     42   error   errorr     42r     42r     42   errorr     42r     42r     42r     42r     42r     42   error   errorr     42   errorr     42r     42   error   error   error   error   error   error   errorr     42r     42r     42   errorr     42   error
288    errorS    127   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    128   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
289    errorr     62r     62   errorr     62r     62   error   errorr     62r     62r     62   errorr     62r     62r     62r     62r     62r     62   error   errorr     62   errorr     62r     62   error   error   error   error   error   error   errorr     62r     62r     62   errorr     62   error
290    errorS    131S    132   error   error   error   error   error   error   error   error   error   error   error   error   errorS    137S    138   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
291    errorS    131S    132   error   error   error   error   error   error   error   error   error   error   error   error   errorS    137S    138   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
292    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS     35   errorS     40S     43   error   error   error   error   error   error   errorS     47   errorS     51   errorS     52   error
293    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    325   error   error
294    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    326   error   error
295    errorS    258   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
296    error   error   error   error   error   error   error   error   error   error   errorS    328   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
297    error   error   error   error   error   error   error   error   error   error   errorS    329   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
298    error   error   errorr     79   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
299    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    300   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
300    error   error   error   error   errorr     41   errorS    331   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
301    error   error   error   error   errorS    332   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
302    error   error   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error
303    error   error   errorS    333   error   error   errorS    148   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
304    error   error   error   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27   error   error   error   error   error   error   error   error
305    error   error   error   error   error   error   error   error   error   error   error   errorS    163S    164   error   error   error   error   errorS    334   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
306    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    335S    336   error   error   error   error   error   error
307    error   error   errorS    337   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
308    error   error   errorr     63   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
309    error   error   errorr     64   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
310    error   error   error   error   error   error   error   error   error   error   errorr     58S     75S     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
311    error   error   error   error   error   error   error   error   error   error   errorr     51   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
312    error   error   error   error   error   error   error   error   error   error   error   errorr      8r      8r      8r      8   error   error   error   error   error   error   error   errorr      8r      8r      8r      8r      8   error   error   error   error   error   error   error   error
313    error   error   errorS    338   error   error   errorS    148   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
314    error   error   error   error   error   error   error   error   error   error   error   errorr     27r     27r     27r     27   error   error   error   error   error   error   error   errorr     27r     27r     27r     27r     27   error   error   error   error   error   error   error   error
315    error   error   error   error   error   error   error   error   error   error   error   errorS    163S    164   error   error   error   error   errorS    339   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
316    errorr     18r     18   errorr     18r     18   error   errorr     18r     18r     18   errorr     18r     18r     18r     18r     18r     18   error   errorr     18   errorr     18r     18   error   error   error   error   error   error   errorr     18r     18r     18   errorr     18   error
317    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    340   error   errorS    341   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
318    errorr     35r     35   errorr     35r     35   error   errorr     35r     35r     35   errorr     35r     35r     35r     35r     35r     35   error   errorr     35   errorr     35r     35   error   error   error   error   error   error   errorr     35r     35r     35   errorr     35   error
319    errorS     80S     21   error   error   error   error   error   error   error   error   error   error   error   error   errorS     33S     82   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
320    errorr     32r     32   errorr     32r     32   error   errorr     32r     32r     32   errorr     32r     32r     32r     32r     32r     32   error   errorr     32   errorr     32r     32   error   error   error   error   error   error   errorr     32r     32r     32   errorr     32   error
321    error   error   error   error   error   error   error   error   error   error   errorS    343   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
322    error   error   errorS    344   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
323    error   error   errorS    345   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
324    errorr     69r     69   errorr     69r     69   error   errorr     69r     69r     69   errorr     69r     69r     69r     69r     69r     69   error   errorr     69   errorr     69r     69   error   error   error   error   error   error   errorr     69   errorr     69   errorr     69   error
325    error   error   errorS    346   error   error   errorS    347   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
326    error   error   error   error   error   error   errorS    348   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
327    error   error   errorr     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
328    errorr     75r     75   errorr     75r     75   error   errorr     75r     75r     75   errorr     75r     75r     75r     75r     75r     75   error   errorr     75   errorr     75r     75   error   error   error   error   error   error   errorr     75   errorr     75   errorr     75   error
329    errorr     78r     78   errorr     78r     78   error   errorr     78r     78r     78   errorr     78r     78r     78r     78r     78r     78   error   errorr     78   errorr     78r     78   error   error   error   error   error   error   errorr     78   errorr     78   errorr     78   error
330    error   error   error   error   errorS    349   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
331    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    300   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
332    error   error   error   error   error   error   error   error   error   error   errorS    351   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
333    error   error   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error
334    error   error   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error
335    error   error   errorr     65   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
336    error   error   errorr     66   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
337    errorS     20S     21   errorS     22   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS     35   errorS     40S     43   error   error   error   error   error   error   errorS     47   errorS     51   errorS     52   error
338    error   error   error   error   error   error   error   error   error   error   error   errorr      9r      9r      9r      9   error   error   error   error   error   error   error   errorr      9r      9r      9r      9r      9   error   error   error   error   error   error   error   error
339    error   error   error   error   error   error   error   error   error   error   error   errorr     30r     30r     30r     30   error   error   error   error   error   error   error   errorr     30r     30r     30r     30r     30   error   error   error   error   error   error   error   error
340    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    354   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
341    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    355   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
342    error   error   error   error   error   error   error   error   error   error   errorS    356S     75S     76   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
343    errorS    211S    212   error   error   error   error   error   error   error   error   error   error   error   error   errorS    215S    216   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
344    errorS     20S     21   errorS    237   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS    241   errorS    246S     43   error   error   error   error   error   error   errorS    250   errorS    255   errorS    256   error
345    errorS     20S     21   errorS    237   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS    241   errorS    246S     43   error   error   error   error   error   error   errorS    250   errorS    255   errorS    256   error
346    error   error   error   error   error   error   error   error   error   error   errorS    362   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
347    errorS    258   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
348    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    261
349    error   error   error   error   error   error   error   error   error   error   errorS    365   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
350    error   error   error   error   errorr     40   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
351    errorr     38r     38   errorr     38r     38   error   errorr     38r     38r     38   errorr     38r     38r     38r     38r     38r     38   error   errorr     38   errorr     38r     38   error   error   error   error   error   error   errorr     38   errorr     38   errorr     38   error
352    errorr     60r     60   errorr     60r     60   error   errorr     60r     60r     60   errorr     60r     60r     60r     60r     60r     60   error   errorr     60   errorr     60r     60   error   error   error   error   error   error   errorr     60   errorr     60   errorr     60   error
353    errorr     47r     47   errorr     47r     47   error   errorr     47r     47r     47   errorr     47r     47r     47r     47r     47r     47   error   errorr     47   errorr     47r     47   error   error   error   error   error   error   errorr     47   errorr     47   errorr     47   error
354    error   error   error   error   error   error   error   error   error   error   errorS    366   error   error   error   error   error   error   error   error   errorS    367   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
355    error   error   error   errorS    368   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
356    errorr     34r     34   errorr     34r     34   error   errorr     34r     34r     34   errorr     34r     34r     34r     34r     34r     34   error   errorr     34   errorr     34r     34   error   error   error   error   error   error   errorr     34r     34r     34   errorr     34   error
357    error   error   error   error   error   error   error   error   error   error   errorS    369   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
358    errorr     50r     50   errorr     50r     50   error   errorr     50r     50r     50   errorr     50r     50r     50r     50r     50r     50   error   errorr     50   errorr     50r     50   error   error   error   error   error   error   errorr     50r     50r     50   errorr     50   error
359    errorr     48r     48   errorr     48r     48   error   errorr     48r     48r     48   errorr     48r     48r     48r     48r     48r     48   error   errorr     48   errorr     48r     48   error   error   error   error   error   error   errorr     48r     48r     48   errorr     48   error
360    errorr     68r     68   errorr     68r     68   error   errorr     68r     68r     68   errorr     68r     68r     68r     68r     68r     68   error   errorr     68   errorr     68r     68   error   error   error   error   error   error   errorr     68r     70r     68   errorr     68   error
361    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    370   error   error   error   error
362    errorr     74r     74   errorr     74r     74   error   errorr     74r     74r     74   errorr     74r     74r     74r     74r     74r     74   error   errorr     74   errorr     74r     74   error   error   error   error   error   error   errorr     74r     74r     74   errorr     74   error
363    error   error   errorS    371   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
364    error   error   errorS    372   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
365    errorr     37r     37   errorr     37r     37   error   errorr     37r     37r     37   errorr     37r     37r     37r     37r     37r     37   error   errorr     37   errorr     37r     37   error   error   error   error   error   error   errorr     37   errorr     37   errorr     37   error
366    errorr     39r     39   errorr     39r     39   error   errorr     39r     39r     39   errorr     39r     39r     39r     39r     39r     39   error   errorr     39   errorr     39r     39   error   error   error   error   error   error   errorr     39r     39r     39   errorr     39   error
367    error   error   error   errorS    373   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
368    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    300   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
369    errorS    306   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
370    errorS     20S     21   errorS    237   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS    241   errorS    246S     43   error   error   error   error   error   error   errorS    250   errorS    255   errorS    256   error
371    error   error   error   error   error   error   error   error   error   error   errorS    377   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
372    error   error   error   error   error   error   error   error   error   error   errorS    378   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
373    error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   errorS    300   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
374    error   error   error   error   errorS    380   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
375    error   error   errorS    381   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
376    errorr     69r     69   errorr     69r     69   error   errorr     69r     69r     69   errorr     69r     69r     69r     69r     69r     69   error   errorr     69   errorr     69r     69   error   error   error   error   error   error   errorr     69r     69r     69   errorr     69   error
377    errorr     75r     75   errorr     75r     75   error   errorr     75r     75r     75   errorr     75r     75r     75r     75r     75r     75   error   errorr     75   errorr     75r     75   error   error   error   error   error   error   errorr     75r     75r     75   errorr     75   error
378    errorr     78r     78   errorr     78r     78   error   errorr     78r     78r     78   errorr     78r     78r     78r     78r     78r     78   error   errorr     78   errorr     78r     78   error   error   error   error   error   error   errorr     78r     78r     78   errorr     78   error
379    error   error   error   error   errorS    382   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
380    error   error   error   error   error   error   error   error   error   error   errorS    383   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
381    errorS     20S     21   errorS    237   error   error   errorS     27S     28S     29   error   error   error   error   errorS     33S     34   error   errorS    241   errorS    246S     43   error   error   error   error   error   error   errorS    250   errorS    255   errorS    256   error
382    error   error   error   error   error   error   error   error   error   error   errorS    386   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error   error
383    errorr     38r     38   errorr     38r     38   error   errorr     38r     38r     38   errorr     38r     38r     38r     38r     38r     38   error   errorr     38   errorr     38r     38   error   error   error   error   error   error   errorr     38r     38r     38   errorr     38   error
384    errorr     60r     60   errorr     60r     60   error   errorr     60r     60r     60   errorr     60r     60r     60r     60r     60r     60   error   errorr     60   errorr     60r     60   error   error   error   error   error   error   errorr     60r     60r     60   errorr     60   error
385    errorr     47r     47   errorr     47r     47   error   errorr     47r     47r     47   errorr     47r     47r     47r     47r     47r     47   error   errorr     47   errorr     47r     47   error   error   error   error   error   error   errorr     47r     47r     47   errorr     47   error
386    errorr     37r     37   errorr     37r     37   error   errorr     37r     37r     37   errorr     37r     37r     37r     37r     37r     37   error   errorr     37   errorr     37r     37   error   error   error   error   error   error   errorr     37r     37r     37   errorr     37   error
Goto Table:
      functionfunction_definefunction_type        blockfunction_define_list         typefunction_callfunction_call_list            F            S     sentence            E            T       define      id_name         nums    set_valueloop_expressionwhile_expressionfor_set_valuebool_expression     IncorDec  forsentence       while1whilesentence            G           op            HInc_expressionDec_expressionif_expression   ifsentenceinout_expressionprintf_expressionscanf_expression  expressions      getaddr           S'
 0             1             2             3            -1            -1             4            -1            -1            -1             6            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
 1            -1            10             3            -1            -1             4            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
 2            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 




 7            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 


10            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

12            -1            -1            -1            -1            14            15            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 



16            -1            -1            -1            23            -1            24            25            -1            26            -1            30            31            32            36            -1            -1            37            38            39            -1            -1            41            -1            42            -1            -1            -1            -1            44            45            46            -1            48            49            50            -1            -1            -1 
17            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
18            -1            -1            -1            -1            -1            54            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 


21            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1            63            64            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
22            -1            -1            -1            67            -1            24            25            -1            26            -1            30            31            32            36            -1            -1            37            38            39            -1            -1            41            -1            42            -1            -1            -1            -1            44            45            46            -1            48            49            50            -1            -1            -1 

24            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            72            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 





30            -1            -1            -1            73            -1            24            25            -1            26            -1            30            31            32            36            -1            -1            37            38            39            -1            -1            41            -1            42            -1            -1            -1            -1            44            45            46            -1            48            49            50            -1            -1            -1 




35            -1            -1            -1            -1            -1            -1            25            -1            26            -1            -1            81            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
















52            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
53            -1            -1            -1            90            -1            24            25            -1            26            -1            30            31            32            36            -1            -1            37            38            39            -1            -1            41            -1            42            -1            -1            -1            -1            44            45            46            -1            48            49            50            -1            -1            -1 

55            -1            -1            -1            -1            -1            -1            95            96            97            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
56            -1            -1            -1            -1            -1            -1            25            -1            26            -1            -1           100            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

58            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

60            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1           102            64            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 









70            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 




75            -1            -1            -1            -1            -1            -1            25            -1            26            -1            -1            -1           113            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
76            -1            -1            -1            -1            -1            -1            25            -1            26            -1            -1            -1           114            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
77            -1            -1            -1            -1            -1            -1            25            -1           115            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
78            -1            -1            -1            -1            -1            -1            25            -1           116            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
79            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1           121           122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 




84            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           129            -1            -1           130            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

86            -1            -1            -1            -1            -1            -1           133            -1           134            -1            -1           135           136            -1            -1            -1            -1            -1            -1            -1           139            -1            -1            -1            -1           140            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
87            -1            -1            -1            -1            -1            -1           133            -1           134            -1            -1           135           136            -1            -1            -1            -1            -1            -1            -1           141            -1            -1            -1            -1           140            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 





93            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1           146            64            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 






100            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
101            -1            -1            -1            -1            -1            -1            95           151            97            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
102            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
103            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
104            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1            -1           153            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
105            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1            -1           154            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
106            -1            -1            -1            -1            -1            -1            61            -1           155            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
107            -1            -1            -1            -1            -1            -1            61            -1           156            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
108            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1           157           122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
109            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
110            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

112            -1            -1            -1            -1            -1            -1            25            -1            26            -1            -1           160            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
113            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
114            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
115            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
116            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
117            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
118            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1           162            64            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
119            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
120            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
123            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
124            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
125            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
126            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1           169           122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
127            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
128            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
129            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
130            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

132            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1           173            64            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
133            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
134            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
135            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
136            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
137            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
138            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
139            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
140            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           180            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

142            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
143            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
144            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
145            -1            -1            -1            -1            -1            -1            95           191            97            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
146            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
147            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
148            -1            -1            -1            -1            -1            -1            95            -1           193            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
149            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1           194           122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
150            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

152            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
153            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
154            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
155            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
156            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
157            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
158            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
159            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
160            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
161            -1            -1            -1            -1            -1            -1            95           201            97            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
162            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
163            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1            -1           203            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
164            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1            -1           204            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
165            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
166            -1            -1            -1            -1            -1            -1           119            -1           206            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
167            -1            -1            -1            -1            -1            -1           119            -1           207            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
168            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1           208           122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
169            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
170            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1           210           122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
171            -1            -1            -1            -1            -1            -1           213            -1           214            -1            -1           135           136            -1            -1            -1            -1            -1            -1            -1           217            -1            -1            -1            -1           218            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
172            -1            -1            -1            -1            -1            -1            95           220            97            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
173            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
174            -1            -1            -1            -1            -1            -1           224            -1           225            -1            -1            -1           226            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
175            -1            -1            -1            -1            -1            -1           224            -1           225            -1            -1            -1           229            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
176            -1            -1            -1            -1            -1            -1           224            -1           230            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
177            -1            -1            -1            -1            -1            -1           224            -1           231            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
178            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1           232           122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
179            -1            -1            -1            -1            -1            24            25            -1            26            -1           233            31            32            36            -1            -1            37            38            39            -1            -1            41            -1            42           234            -1            -1            -1            44            45            46            -1            48            49            50            -1            -1            -1 
180            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1           235            64            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           236            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

182            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
183            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
184            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
185            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
186            -1            -1            -1            -1            -1           238            25            -1            26            -1           239           240            32           242            -1            -1           243           244           245            -1            -1           247            -1           248            -1            -1            -1            -1            44            45           249           251           252           253           254            -1            -1            -1 
187            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
188            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           259            -1            -1 
189            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           260            -1 
190            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

192            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
193            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
194            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
195            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
196            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
197            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
198            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
199            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
200            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

202            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
203            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
204            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
205            -1            -1            -1            -1            -1            -1            25            -1            26            -1            -1           268            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
206            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
207            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
208            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
209            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
210            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

212            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1           272            64            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
213            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
214            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
215            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
216            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
217            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
218            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           275            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
219            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
220            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

222            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
223            -1            -1            -1            -1            -1            -1            61            -1            62            -1            -1           278            64            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
224            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
225            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
226            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
227            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
228            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
229            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
230            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

232            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
233            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
234            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
235            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
236            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
237            -1            -1            -1           281            -1            24            25            -1            26            -1            30            31            32            36            -1            -1            37            38            39            -1            -1            41            -1            42            -1            -1            -1            -1            44            45            46            -1            48            49            50            -1            -1            -1 
238            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           284            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
239            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
240            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
241            -1            -1            -1            -1            -1            -1            25            -1            26            -1            -1           286            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
242            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
243            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
244            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
245            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
246            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
247            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
248            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
249            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
250            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

252            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
253            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
254            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
255            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
256            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
257            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
258            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
259            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
260            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

262            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
263            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
264            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
265            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
266            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           301            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
267            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
268            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
269            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
270            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
271            -1            -1            -1            -1            -1            -1            95           303            97            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
272            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
273            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1           305           122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
274            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           307            -1            -1            -1            -1            -1            -1           308           309            -1            -1            -1            -1            -1            -1            -1            -1 
275            -1            -1            -1            -1            -1            -1            25            -1            26            -1            -1           310            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           311            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
276            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
277            -1            -1            -1            -1            -1            -1            95           313            97            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
278            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
279            -1            -1            -1            -1            -1            -1           119            -1           120            -1            -1           315           122            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
280            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

282            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
283            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
284            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
285            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
286            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
287            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
288            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           129            -1            -1           321            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
289            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
290            -1            -1            -1            -1            -1            -1           133            -1           134            -1            -1           135           136            -1            -1            -1            -1            -1            -1            -1           322            -1            -1            -1            -1           140            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
291            -1            -1            -1            -1            -1            -1           133            -1           134            -1            -1           135           136            -1            -1            -1            -1            -1            -1            -1           323            -1            -1            -1            -1           140            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
292            -1            -1            -1            -1            -1            24            25            -1            26            -1           324            31            32            36            -1            -1            37            38            39            -1            -1            41            -1            42            -1            -1            -1            -1            44            45            46            -1            48            49            50            -1            -1            -1 
293            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
294            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
295            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           327            -1            -1 
296            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
297            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
298            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
299            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           330            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
300            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

302            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
303            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
304            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
305            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
306            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
307            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
308            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
309            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
310            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

312            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
313            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
314            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
315            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
316            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
317            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
318            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
319            -1            -1            -1            -1            -1            -1            25            -1            26            -1            -1           342            32            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
320            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

322            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
323            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
324            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
325            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
326            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
327            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
328            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
329            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
330            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
331            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           350            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
332            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
333            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
334            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
335            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
336            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
337            -1            -1            -1            -1            -1            24            25            -1            26            -1           352            31            32            36            -1            -1            37            38            39            -1            -1            41           353            42            -1            -1            -1            -1            44            45            46            -1            48            49            50            -1            -1            -1 
338            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
339            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
340            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

342            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
343            -1            -1            -1            -1            -1            -1           213            -1           214            -1            -1           135           136            -1            -1            -1            -1            -1            -1            -1           357            -1            -1            -1            -1           218            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
344            -1            -1            -1            -1            -1           238            25            -1            26            -1           358           240            32           242            -1            -1           243           244           245            -1            -1           247            -1           248           359            -1            -1            -1            44            45           249            -1           252           253           254            -1            -1            -1 
345            -1            -1            -1            -1            -1           238            25            -1            26            -1           360           240            32           242            -1            -1           243           244           245            -1            -1           247            -1           248            -1            -1            -1            -1            44            45           249           361           252           253           254            -1            -1            -1 
346            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
347            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           363            -1            -1 
348            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           364            -1 
349            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
350            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

352            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
353            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
354            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
355            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
356            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
357            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
358            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
359            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
360            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 

362            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
363            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
364            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
365            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
366            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
367            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
368            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           374            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
369            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           375            -1            -1            -1            -1            -1            -1           308           309            -1            -1            -1            -1            -1            -1            -1            -1 
370            -1            -1            -1            -1            -1           238            25            -1            26            -1           376           240            32           242            -1            -1           243           244           245            -1            -1           247            -1           248            -1            -1            -1            -1            44            45           249            -1           252           253           254            -1            -1            -1 

372            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
373            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1           379            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
374            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
375            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
376            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
377            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
378            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
379            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
380            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
381            -1            -1            -1            -1            -1           238            25            -1            26            -1           384           240            32           242            -1            -1           243           244           245            -1            -1           247           385           248            -1            -1            -1            -1            44            45           249            -1           252           253           254            -1            -1            -1 
382            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
383            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
384            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
385            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
386            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1            -1 
(INT,)
(ID, main)
(LPAREN,)
(RPAREN,)
(LBBRACKET,)
(INT,)
(ARRAY,)
(LMBRACKET,)
(NUM, 6)
(RMBRACKET,)
(ASSIGN,)
(LBBRACKET,)
(NUM, 76)
(COMMA,)
(NUM, 82)
(COMMA,)
(NUM, 90)
(COMMA,)
(NUM, 86)
(COMMA,)
(NUM, 79)
(COMMA,)
(NUM, 62)
(RBBRACKET,)
(SEMI,)
(INT,)
(ARRAY,)
(LMBRACKET,)
(NUM, 6)
(RMBRACKET,)
(ASSIGN,)
(LBBRACKET,)
(NUM, 2)
(COMMA,)
(NUM, 2)
(COMMA,)
(NUM, 1)
(COMMA,)
(NUM, 2)
(COMMA,)
(NUM, 2)
(COMMA,)
(NUM, 3)
(RBBRACKET,)
(SEMI,)
(INT,)
(ID, stu_number)
(SEMI,)
(DOUBLE,)
(ID, mean)
(SEMI,)
(DOUBLE,)
(ID, sum)
(SEMI,)
(INT,)
(ID, temp)
(SEMI,)
(INT,)
(ID, i)
(SEMI,)
(PRINTF,)
(LPAREN,)
(STR, please input your student number:)
(RPAREN,)
(SEMI,)
(SCANF,)
(LPAREN,)
(STR, %d)
(COMMA,)
(ADDR,)
(ID, stu_number)
(RPAREN,)
(SEMI,)
(ID, sum)
(ASSIGN,)
(NUM, 0)
(SEMI,)
(ID, temp)
(ASSIGN,)
(NUM, 0)
(SEMI,)
(FOR,)
(LPAREN,)
(ID, i)
(ASSIGN,)
(NUM, 0)
(SEMI,)
(ID, i)
(LT,)
(NUM, 6)
(SEMI,)
(ID, i)
(PLUSPLUS,)
(RPAREN,)
(LBBRACKET,)
(ID, sum)
(ASSIGN,)
(ID, sum)
(PLUS,)
(ARRAY,)
(LMBRACKET,)
(ID, i)
(RMBRACKET,)
(MULTI,)
(ARRAY,)
(LMBRACKET,)
(ID, i)
(RMBRACKET,)
(SEMI,)
(ID, temp)
(ASSIGN,)
(ID, temp)
(PLUS,)
(ARRAY,)
(LMBRACKET,)
(ID, i)
(RMBRACKET,)
(SEMI,)
(RBBRACKET,)
(ID, mean)
(ASSIGN,)
(ID, sum)
(RDIV,)
(ID, temp)
(SEMI,)
(IF,)
(LPAREN,)
(ID, mean)
(GE,)
(NUM, 60)
(RPAREN,)
(LBBRACKET,)
(ID, mean)
(ASSIGN,)
(ID, mean)
(MINUS,)
(NUM, 60)
(SEMI,)
(PRINTF,)
(LPAREN,)
(STR, the score of student number %d is %f higher than 60.\n)
(COMMA,)
(ID, stu_number)
(COMMA,)
(ID, mean)
(RPAREN,)
(SEMI,)
(RBBRACKET,)
(ELSE,)
(LBBRACKET,)
(ID, mean)
(ASSIGN,)
(NUM, 60)
(MINUS,)
(ID, mean)
(SEMI,)
(PRINTF,)
(LPAREN,)
(STR, the score of student number %d is %f lower than 60.\n)
(COMMA,)
(ID, stu_number)
(COMMA,)
(ID, mean)
(RPAREN,)
(SEMI,)
(RBBRACKET,)
(RETURN,)
(NUM, 0)
(SEMI,)
(RBBRACKET,)
find sentence!
token:int
token:id
规约:index:7 type->int
token:id
规约:function_type->type
token:id
token:(
token:)
token:{
token:int
token:array
规约:index:7 type->int
token:array
token:[
token:num
token:]
token:=
token:{
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:}
规约:index:7 nums->num
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
token:;
token:int
规约:index:22 define->typearray[num]={nums};
token:int
规约:index:11 sentence->define
token:int
token:array
规约:index:7 type->int
token:array
token:[
token:num
token:]
token:=
token:{
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:,
token:num
token:}
规约:index:7 nums->num
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
规约:index:21 nums->num,nums
token:}
token:;
token:int
规约:index:22 define->typearray[num]={nums};
token:int
规约:index:11 sentence->define
token:int
token:id
规约:index:7 type->int
token:id
token:;
规约:index:7 id_name->id
token:;
token:double
规约:index:1 define->typeid_name;
token:double
规约:index:11 sentence->define
token:double
token:id
规约:index:7 type->double
token:id
token:;
规约:index:7 id_name->id
token:;
token:double
规约:index:1 define->typeid_name;
token:double
规约:index:11 sentence->define
token:double
token:id
规约:index:7 type->double
token:id
token:;
规约:index:7 id_name->id
token:;
token:int
规约:index:1 define->typeid_name;
token:int
规约:index:11 sentence->define
token:int
token:id
规约:index:7 type->int
token:id
token:;
规约:index:7 id_name->id
token:;
token:int
规约:index:1 define->typeid_name;
token:int
规约:index:11 sentence->define
token:int
token:id
规约:index:7 type->int
token:id
token:;
规约:index:7 id_name->id
token:;
token:printf
规约:index:1 define->typeid_name;
token:printf
规约:index:11 sentence->define
token:printf
token:(
token:string
token:)
token:;
token:scanf
规约:printf_expression->printf(string);
token:scanf
规约:inout_expression->printf_expression
token:scanf
规约:index:11 sentence->inout_expression
token:scanf
token:(
token:string
token:,
token:&
token:id
token:)
规约:getaddr->&id
token:)
token:;
token:id
规约:scanf_expression->scanf(string,getaddr);
token:id
规约:inout_expression->scanf_expression
token:id
规约:index:11 sentence->inout_expression
token:id
token:=
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
规约:index:9 set_value->id=E
token:;
token:id
规约:index:11 sentence->set_value;
token:id
token:=
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
规约:index:9 set_value->id=E
token:;
token:for
规约:index:11 sentence->set_value;
token:for
token:(
token:id
token:=
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
规约:index:9 set_value->id=E
token:;
规约:index:11 for_set_value->set_value
token:;
token:id
token:<
规约:index:3 F->id
token:<
规约:index:7 T->F
token:<
规约:index:7 E->T
token:<
规约:index:7 G->E
token:<
token:num
规约:index:7 op-><
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
规约:index:7 H->E
token:;
规约:index:13 bool_expression->GopH
token:;
token:id
token:++
token:)
规约:index:18 Inc_expression->id++
token:)
规约:index:11 IncorDec->Inc_expression
token:)
token:{
token:id
token:=
token:id
token:+
规约:index:3 F->id
token:+
规约:index:7 T->F
token:+
规约:index:7 E->T
token:+
token:array
token:[
token:id
token:]
规约:index:3 F->id
token:]
规约:index:7 T->F
token:]
规约:index:7 E->T
token:]
token:*
规约:index:3 F->array[E]
 申请临时变量0
 释放临时变量22
token:*
规约:index:7 T->F
token:*
token:array
token:[
token:id
token:]
规约:index:3 F->id
token:]
规约:index:7 T->F
token:]
规约:index:7 E->T
token:]
token:;
规约:index:3 F->array[E]
 申请临时变量1
 释放临时变量22
token:;
规约:index:6 T->T*F
 申请临时变量2
 释放临时变量0
 释放临时变量1
token:;
规约:index:6 E->E+T
 申请临时变量0
 释放临时变量20
 释放临时变量2
token:;
规约:index:9 set_value->id=E
 释放临时变量0
token:;
token:id
规约:index:11 sentence->set_value;
token:id
token:=
token:id
token:+
规约:index:3 F->id
token:+
规约:index:7 T->F
token:+
规约:index:7 E->T
token:+
token:array
token:[
token:id
token:]
规约:index:3 F->id
token:]
规约:index:7 T->F
token:]
规约:index:7 E->T
token:]
token:;
规约:index:3 F->array[E]
 申请临时变量0
 释放临时变量22
token:;
规约:index:7 T->F
token:;
规约:index:6 E->E+T
 申请临时变量1
 释放临时变量21
 释放临时变量0
token:;
规约:index:9 set_value->id=E
 释放临时变量1
token:;
token:}
规约:index:11 sentence->set_value;
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
token:id
规约:index:12 sentence->{block}
token:id
规约:index:11 forsentence->sentence
token:id
规约:index:20 loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence
token:id
规约:index:11 sentence->loop_expression
token:id
token:=
token:id
token:/
规约:index:3 F->id
token:/
规约:index:7 T->F
token:/
token:id
token:;
规约:index:3 F->id
token:;
规约:index:6 T->T/F
 申请临时变量0
token:;
规约:index:7 E->T
token:;
规约:index:9 set_value->id=E
 释放临时变量0
token:;
token:if
规约:index:11 sentence->set_value;
token:if
token:(
token:id
token:>=
规约:index:3 F->id
token:>=
规约:index:7 T->F
token:>=
规约:index:7 E->T
token:>=
规约:index:7 G->E
token:>=
token:num
规约:index:7 op->>=
token:num
token:)
规约:index:2 F->num
token:)
规约:index:7 T->F
token:)
规约:index:7 E->T
token:)
规约:index:7 H->E
token:)
规约:index:13 bool_expression->GopH
token:)
token:{
token:id
token:=
token:id
token:-
规约:index:3 F->id
token:-
规约:index:7 T->F
token:-
规约:index:7 E->T
token:-
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:6 E->E-T
 申请临时变量0
 释放临时变量19
token:;
规约:index:9 set_value->id=E
 释放临时变量0
token:;
token:printf
规约:index:11 sentence->set_value;
token:printf
token:(
token:string
token:,
token:id
token:,
token:id
token:)
规约:expressions->id
token:)
规约:expressions->id,expressions
token:)
token:;
token:}
规约:printf_expression->printf(string,expressions);
token:}
规约:inout_expression->printf_expression
token:}
规约:index:11 sentence->inout_expression
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
token:else
规约:index:12 sentence->{block}
token:else
规约:index:16 ifsentence->sentence
token:else
token:{
token:id
token:=
token:num
token:-
规约:index:2 F->num
token:-
规约:index:7 T->F
token:-
规约:index:7 E->T
token:-
token:id
token:;
规约:index:3 F->id
token:;
规约:index:7 T->F
token:;
规约:index:6 E->E-T
 申请临时变量0
 释放临时变量19
token:;
规约:index:9 set_value->id=E
 释放临时变量0
token:;
token:printf
规约:index:11 sentence->set_value;
token:printf
token:(
token:string
token:,
token:id
token:,
token:id
token:)
规约:expressions->id
token:)
规约:expressions->id,expressions
token:)
token:;
token:}
规约:printf_expression->printf(string,expressions);
token:}
规约:inout_expression->printf_expression
token:}
规约:index:11 sentence->inout_expression
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
token:return
规约:index:12 sentence->{block}
token:return
规约:index:17 if_expression->if(bool_expression)ifsentenceelsesentence
token:return
规约:index:11 sentence->if_expression
token:return
token:num
token:;
规约:index:2 F->num
token:;
规约:index:7 T->F
token:;
规约:index:7 E->T
token:;
token:}
规约:index:11 sentence->returnE;
token:}
规约:index:7 block->sentence
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:block->sentenceblock
token:}
规约:function_define->function_typeid(){block}
规约:function->function_define
规约:S->function
语法分析完成！
0:(MOV,0,,sum)
1:(MOV,0,,temp)
2:(MOV,0,,i)
3:(<,i,6,5)
4:(JMP,,,18)
5:(*,i,4,t0)
6:(MOV,score+[t0],,t0)
7:(*,i,4,t1)
8:(MOV,credit+[t1],,t1)
9:(*,t0,t1,t2)
10:(+,sum,t2,t0)
11:(MOV,t0,,sum)
12:(*,i,4,t0)
13:(MOV,credit+[t0],,t0)
14:(+,temp,t0,t1)
15:(MOV,t1,,temp)
16:(+,i,1,i)
17:(JMP,,,3)
18:(MOV,sum,,t0)
19:(/,t0,temp,t0)
20:(MOV,t0,,mean)
21:(>=,mean,60,23)
22:(JMP,,,26)
23:(-,mean,60,t0)
24:(MOV,t0,,mean)
25:(JMP,,,28)
26:(-,60,mean,t0)
27:(MOV,t0,,mean)
