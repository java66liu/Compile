function->function_define 
function->function_define function 
index:25 function_define->function_type id ( ) { block } 
index:25 function_define->function_type id ( function_define_list ) { block } 
index:7 function_type->type 
index:7 function_type->void 
index:24 function_define_list->type id 
index:24 function_define_list->function_define_list , type id 
index:28 function_call->id ( ) 
index:28 function_call->id ( function_call_list ) 
index:27 function_call_list->list 
index:27 function_call_list->list , function_call_list 
index:4 list->E 
S->function 
index:7 type->int 
index:7 type->double 
index:7 type->char 
index:7 block->sentence 
block->sentence block 
index:12 sentence->{ block } 
index:11 sentence->{ } 
index:11 sentence->E ; 
index:6 E->E + T 
index:6 E->E - T 
index:7 E->T 
index:6 T->T * F 
index:6 T->T / F 
index:6 T->T % F 
index:7 T->F 
index:8 F->( E ) 
index:2 F->num 
index:2 F->string 
index:3 F->id 
index:3 F->array [ E ] 
index:5 F->function_call 
index:26 sentence->return E ; 
index:11 sentence->define 
index:10 define->type id_name = E ; 
index:1 define->type id_name ; 
index:7 id_name->id 
index:23 define->type array [ ] = { string } ; 
index:22 define->type array [ num ] = { nums } ; 
index:22 define->type array [ ] = { nums } ; 
index:22 define->type array [ num ] ; 
index:21 nums->num , nums 
index:7 nums->num 
index:11 sentence->set_value ; 
index:9 set_value->id = E 
index:9 set_value->array [ E ] = E 
index:11 sentence->loop_expression 
index:11 sentence->while_expression 
index:20 loop_expression->for ( for_set_value ; bool_expression ; IncorDec ) forsentence 
index:19 while_expression->while1 ( bool_expression ) whilesentence 
index:11 while1->while 
index:16 whilesentence->sentence 
index:13 bool_expression->G op H 
index:14 bool_expression->F 
index:7 op->>= 
index:7 op-><= 
index:7 op->< 
index:7 op->> 
index:7 op->== 
index:7 op->!= 
index:7 H->E 
index:7 G->E 
index:11 forsentence->sentence 
index:11 for_set_value->set_value 
index:11 sentence->IncorDec ; 
index:11 IncorDec->Inc_expression 
index:11 IncorDec->Dec_expression 
index:18 Inc_expression->id ++ 
index:18 Dec_expression->id -- 
index:11 sentence->if_expression 
index:15 if_expression->if ( bool_expression ) sentence 
index:17 if_expression->if ( bool_expression ) ifsentence else sentence 
index:16 ifsentence->sentence 
index:11 sentence->inout_expression 
inout_expression->printf_expression 
inout_expression->scanf_expression 
index:31 printf_expression->printf ( string ) ; 
index:31 printf_expression->printf ( string , expressions ) ; 
index:30 expressions->getaddr , expressions 
index:30 expressions->getaddr 
index:32 scanf_expression->scanf ( string , expressions ) ; 
index:32 scanf_expression->scanf ( string ) ; 
index:29 getaddr->id 
index:29 getaddr->& id 
符号集：
0:1 #
1:2 function
2:2 function_define
3:2 function_type
4:1 id
5:1 (
6:1 )
7:1 {
8:2 block
9:1 }
10:2 function_define_list
11:2 type
12:1 void
13:1 ,
14:2 function_call
15:2 function_call_list
16:2 list
17:2 E
18:2 S
19:1 int
20:1 double
21:1 char
22:2 sentence
23:1 ;
24:1 +
25:2 T
26:1 -
27:1 *
28:2 F
29:1 /
30:1 %
31:1 num
32:1 string
33:1 array
34:1 [
35:1 ]
36:1 return
37:2 define
38:2 id_name
39:1 =
40:2 nums
41:2 set_value
42:2 loop_expression
43:2 while_expression
44:1 for
45:2 for_set_value
46:2 bool_expression
47:2 IncorDec
48:2 forsentence
49:2 while1
50:2 whilesentence
51:1 while
52:2 G
53:2 op
54:2 H
55:1 >=
56:1 <=
57:1 <
58:1 >
59:1 ==
60:1 !=
61:2 Inc_expression
62:2 Dec_expression
63:1 ++
64:1 --
65:2 if_expression
66:1 if
67:2 ifsentence
68:1 else
69:2 inout_expression
70:2 printf_expression
71:2 scanf_expression
72:1 printf
73:2 expressions
74:2 getaddr
75:1 scanf
76:1 &
77:2 S'
规则集:
function->function_define
function->function_definefunction
index:25 function_define->function_typeid(){block}
index:25 function_define->function_typeid(function_define_list){block}
index:7 function_type->type
index:7 function_type->void
index:24 function_define_list->typeid
index:24 function_define_list->function_define_list,typeid
index:28 function_call->id()
index:28 function_call->id(function_call_list)
index:27 function_call_list->list
index:27 function_call_list->list,function_call_list
index:4 list->E
S->function
index:7 type->int
index:7 type->double
index:7 type->char
index:7 block->sentence
block->sentenceblock
index:12 sentence->{block}
index:11 sentence->{}
index:11 sentence->E;
index:6 E->E+T
index:6 E->E-T
index:7 E->T
index:6 T->T*F
index:6 T->T/F
index:6 T->T%F
index:7 T->F
index:8 F->(E)
index:2 F->num
index:2 F->string
index:3 F->id
index:3 F->array[E]
index:5 F->function_call
index:26 sentence->returnE;
index:11 sentence->define
index:10 define->typeid_name=E;
index:1 define->typeid_name;
index:7 id_name->id
index:23 define->typearray[]={string};
index:22 define->typearray[num]={nums};
index:22 define->typearray[]={nums};
index:22 define->typearray[num];
index:21 nums->num,nums
index:7 nums->num
index:11 sentence->set_value;
index:9 set_value->id=E
index:9 set_value->array[E]=E
index:11 sentence->loop_expression
index:11 sentence->while_expression
index:20 loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence
index:19 while_expression->while1(bool_expression)whilesentence
index:11 while1->while
index:16 whilesentence->sentence
index:13 bool_expression->GopH
index:14 bool_expression->F
index:7 op->>=
index:7 op-><=
index:7 op-><
index:7 op->>
index:7 op->==
index:7 op->!=
index:7 H->E
index:7 G->E
index:11 forsentence->sentence
index:11 for_set_value->set_value
index:11 sentence->IncorDec;
index:11 IncorDec->Inc_expression
index:11 IncorDec->Dec_expression
index:18 Inc_expression->id++
index:18 Dec_expression->id--
index:11 sentence->if_expression
index:15 if_expression->if(bool_expression)sentence
index:17 if_expression->if(bool_expression)ifsentenceelsesentence
index:16 ifsentence->sentence
index:11 sentence->inout_expression
inout_expression->printf_expression
inout_expression->scanf_expression
index:31 printf_expression->printf(string);
index:31 printf_expression->printf(string,expressions);
index:30 expressions->getaddr,expressions
index:30 expressions->getaddr
index:32 scanf_expression->scanf(string,expressions);
index:32 scanf_expression->scanf(string);
index:29 getaddr->id
index:29 getaddr->&id
S'->S
