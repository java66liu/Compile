0:S
1:whilesentence
2:while_expression
3:function
4:function_define
5:function_type
6:function_define_list
7:function_call
8:function_call_list
9:type
10:block
11:sentence
12:E
13:T
14:F
15:id_name
16:nums
17:set_value
18:left
19:loop_expression
20:bool_expression
21:op
22:H
23:forsentence
24:for_set_value
25:IncorDec
26:Inc_expression
27:Dec_expression
28:if_expression
29:ifsentence
30:inout_expression
31:printf_expression
32:expressions
33:scanf_expression
34:getaddr
35:G
36:define
37:main
38:else
39:if
40:int
41:double
42:char
43:return
44:void
45:while
46:for
47:<=
48:>=
49:==
50:!=
51:/*
52:*/
53:<
54:>
55:=
56:+
57:-
58:*
59:/
60:;
61:,
62:(
63:)
64:[
65:]
66:{
67:}
68:num
69:id
70:string
71:&
72:++
73:--
74:printf
75:scanf
76:array
77:M
function->function_define 
function->function function_define 
function_define->function_type id ( ) { block } 
function_define->function_type id ( function_define_list ) { block } 
function_type->type 
function_type->void 
function_define_list->type id 
function_define_list->function_define_list , type id 
function_call->id ( ) 
function_call->id ( function_call_list ) 
function_call_list->F 
function_call_list->function_call_list , F 
S->function 
index:7 type->int 
index:7 type->double 
index:7 type->char 
index:7 block->sentence 
block->sentence block 
index:12 sentence->{ block } 
index:11 sentence->{ } 
index:11 sentence->E ; 
index:6 E->E + T 
index:6 E->E - T 
index:7 E->T 
index:6 T->T * F 
index:6 T->T / F 
index:7 T->F 
index:8 F->( E ) 
index:2 F->num 
index:3 F->id 
index:4 F->array [ E ] 
index:5 F->function_call 
index:11 sentence->return E ; 
index:11 sentence->define 
index:10 define->type id_name = E ; 
index:1 define->type id_name ; 
index:7 id_name->id 
index:22 define->type array [ num ] = { nums } ; 
index:22 define->type array [ ] = { nums } ; 
index:22 define->type array [ num ] ; 
index:21 nums->num , nums 
index:7 nums->num 
index:11 sentence->set_value ; 
index:9 set_value->left = E 
index:3 left->id 
left->array [ E ] 
index:11 sentence->loop_expression 
index:11 sentence->while_expression 
index:20 loop_expression->for ( for_set_value ; bool_expression ; IncorDec ) forsentence 
index:19 while_expression->while ( bool_expression ) whilesentence 
index:16 whilesentence->sentence 
index:13 bool_expression->G op H 
index:14 bool_expression->F 
index:7 op->>= 
index:7 op-><= 
index:7 op->< 
index:7 op->> 
index:7 op->== 
index:7 H->E 
index:7 G->E 
index:11 forsentence->sentence 
index:11 for_set_value->set_value 
index:11 sentence->IncorDec ; 
index:11 IncorDec->Inc_expression 
index:11 IncorDec->Dec_expression 
index:18 Inc_expression->id ++ 
index:18 Dec_expression->id -- 
index:11 sentence->if_expression 
index:15 if_expression->if ( bool_expression ) sentence 
index:17 if_expression->if ( bool_expression ) ifsentence else sentence 
index:16 ifsentence->sentence 
未知元素：i
index:11 sentence->inout_expression 
inout_expression->printf_expression 
inout_expression->scanf_expression 
printf_expression->printf ( string ) ; 
printf_expression->printf ( string , expressions ) ; 
expressions->id , expressions 
expressions->id 
scanf_expression->scanf ( string , getaddr ) ; 
getaddr->& id 
符号集：
0:1 #
1:2 function
2:2 function_define
3:2 function_type
4:1 id
5:1 (
6:1 )
7:1 {
8:2 block
9:1 }
10:2 function_define_list
11:2 type
12:1 void
13:1 ,
14:2 function_call
15:2 function_call_list
16:2 F
17:2 S
18:1 int
19:1 double
20:1 char
21:2 sentence
22:2 E
23:1 ;
24:1 +
25:2 T
26:1 -
27:1 *
28:1 /
29:1 num
30:1 array
31:1 [
32:1 ]
33:1 return
34:2 define
35:2 id_name
36:1 =
37:2 nums
38:2 set_value
39:2 left
40:2 loop_expression
41:2 while_expression
42:1 for
43:2 for_set_value
44:2 bool_expression
45:2 IncorDec
46:2 forsentence
47:1 while
48:2 whilesentence
49:2 G
50:2 op
51:2 H
52:1 >=
53:1 <=
54:1 <
55:1 >
56:1 ==
57:2 Inc_expression
58:2 Dec_expression
59:1 ++
60:1 --
61:2 if_expression
62:1 if
63:2 ifsentence
64:1 else
65:2 inout_expression
66:2 printf_expression
67:2 scanf_expression
68:1 printf
69:1 string
70:2 expressions
71:1 scanf
72:2 getaddr
73:1 &
74:2 S'
规则集:
function->function_define
function->functionfunction_define
function_define->function_typeid(){block}
function_define->function_typeid(function_define_list){block}
function_type->type
function_type->void
function_define_list->typeid
function_define_list->function_define_list,typeid
function_call->id()
function_call->id(function_call_list)
function_call_list->F
function_call_list->function_call_list,F
S->function
index:7 type->int
index:7 type->double
index:7 type->char
index:7 block->sentence
block->sentenceblock
index:12 sentence->{block}
index:11 sentence->{}
index:11 sentence->E;
index:6 E->E+T
index:6 E->E-T
index:7 E->T
index:6 T->T*F
index:6 T->T/F
index:7 T->F
index:8 F->(E)
index:2 F->num
index:3 F->id
index:4 F->array[E]
index:5 F->function_call
index:11 sentence->returnE;
index:11 sentence->define
index:10 define->typeid_name=E;
index:1 define->typeid_name;
index:7 id_name->id
index:22 define->typearray[num]={nums};
index:22 define->typearray[]={nums};
index:22 define->typearray[num];
index:21 nums->num,nums
index:7 nums->num
index:11 sentence->set_value;
index:9 set_value->left=E
index:3 left->id
left->array[E]
index:11 sentence->loop_expression
index:11 sentence->while_expression
index:20 loop_expression->for(for_set_value;bool_expression;IncorDec)forsentence
index:19 while_expression->while(bool_expression)whilesentence
index:16 whilesentence->sentence
index:13 bool_expression->GopH
index:14 bool_expression->F
index:7 op->>=
index:7 op-><=
index:7 op-><
index:7 op->>
index:7 op->==
index:7 H->E
index:7 G->E
index:11 forsentence->sentence
index:11 for_set_value->set_value
index:11 sentence->IncorDec;
index:11 IncorDec->Inc_expression
index:11 IncorDec->Dec_expression
index:18 Inc_expression->id++
index:18 Dec_expression->id--
index:11 sentence->if_expression
index:15 if_expression->if(bool_expression)sentence
index:17 if_expression->if(bool_expression)ifsentenceelsesentence
index:16 ifsentence->sentence
index:11 sentence->inout_expression
inout_expression->printf_expression
inout_expression->scanf_expression
printf_expression->printf(string);
printf_expression->printf(string,expressions);
expressions->id,expressions
expressions->id
scanf_expression->scanf(string,getaddr);
getaddr->&id
S'->S
