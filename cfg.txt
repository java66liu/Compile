function function_define
function function function_define
function_define function_type id ( ) { block }
function_define function_type id ( function_define_list ) { block }
function_type type
function_type void
function_define_list type id
function_define_list function_define_list , type id
function_call id ( ) 
function_call id ( function_call_list ) 
function_call_list F
function_call_list function_call_list , F
S function
7 type int 
7 type double 
7 type char 
block sentence 
block sentence block 
sentence { block } 
sentence E ; 
6 E E + T 
6 E E - T 
7 E T 
6 T T * F 
6 T T / F 
7 T F 
8 F ( E ) 
2 F num 
3 F id 
4 F array [ E ] 
5 F function_call
sentence return E ; 
sentence define 
//1 define type id_name 
10 define type id_name = E ;
1 define type id_name  ;
id_name id , id_name 
7 id_name id 
//id_name id = E ;
id_name array [ num ] = { nums } ; 
nums num , nums 
nums num 
sentence set_value ; 
9 set_value left = E 
3 left id 
left array [ E ] 
sentence loop_expression 
sentence while_expression
loop_expression for ( for_set_value ; bool_expression ; IncorDec ) forsentence 
while_expression while ( bool_expression ) whilesentence
whilesentence sentence
bool_expression G op H 
bool_expression F
op >= 
op <= 
op < 
op > 
H E 
forsentence sentence 
for_set_value set_value 
IncorDec Inc_expression 
IncorDec Dec_expression 
Inc_expression id ++ 
Dec_expression id -- 
sentence if_expression 
if_expression if ( bool_expression ) sentence
if_expression if ( bool_expression ) ifsentence else sentence 
ifsentence sentence 
sentence inout_expression 
inout_expression printf_expression 
inout_expression scanf_expression 
printf_expression printf ( string ) ; 
printf_expression printf ( string , expressions ) ; 
expressions id , expressions 
expressions id 
scanf_expression scanf ( string , getaddr ) ; 
getaddr & id 
G E 